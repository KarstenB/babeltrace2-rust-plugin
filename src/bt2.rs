//! Rustified, object oriented abstraction layer for libbabeltrace2
//!
//! Provides an object oriented abstraction layer for the plain C API of [`babeltrace`].
//! The original API has the form `<comp>_<function>('self', ...)`. These functions are 
//! translated into rust structs with functions. `<comp>` is translated to a CamelCase
//! struct. And `<function>` are `pub fn` using the stored `'self'` pointer.
//! 
//! For example the function `bt_event_borrow_stream()` can be found in the struct `BtEvent`, 
//! together with the function `borrow_stream`.
//! 
//! [`babeltrace`]: https://babeltrace.org/docs/v2.0/libbabeltrace2/
//This file is automatically generated
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::missing_safety_doc)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
use std::ffi::CStr;
use num_derive::{FromPrimitive, ToPrimitive};
pub mod binding {
  include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
  include!("binding_additions.rs");
}
use binding::*;
include!("bt2_additions.rs");


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_clock_class_cycles_to_ns_from_origin_status")]
/// Represents the bt_clock_class_cycles_to_ns_from_origin_status as rust enum
pub enum BtClockClassCyclesToNsFromOriginStatus {
  #[doc(alias = "bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK")]
  /// Alias for bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK
  Ok = bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK,
  #[doc(alias = "bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR")]
  /// Alias for bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR
  OverflowError = bt_clock_class_cycles_to_ns_from_origin_status_BT_CLOCK_CLASS_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR,
}
impl From< i32 > for BtClockClassCyclesToNsFromOriginStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtClockClassCyclesToNsFromOriginStatus > for i32 {
  fn from(item: BtClockClassCyclesToNsFromOriginStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_clock_class_set_description_status")]
/// Represents the bt_clock_class_set_description_status as rust enum
pub enum BtClockClassSetDescriptionStatus {
  #[doc(alias = "bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_OK")]
  /// Alias for bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_OK
  Ok = bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_OK,
  #[doc(alias = "bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR")]
  /// Alias for bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR
  MemoryError = bt_clock_class_set_description_status_BT_CLOCK_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtClockClassSetDescriptionStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtClockClassSetDescriptionStatus > for i32 {
  fn from(item: BtClockClassSetDescriptionStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_clock_class_set_name_status")]
/// Represents the bt_clock_class_set_name_status as rust enum
pub enum BtClockClassSetNameStatus {
  #[doc(alias = "bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_OK")]
  /// Alias for bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_OK
  Ok = bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_OK,
  #[doc(alias = "bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_MEMORY_ERROR")]
  /// Alias for bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_MEMORY_ERROR
  MemoryError = bt_clock_class_set_name_status_BT_CLOCK_CLASS_SET_NAME_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtClockClassSetNameStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtClockClassSetNameStatus > for i32 {
  fn from(item: BtClockClassSetNameStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_clock_snapshot_get_ns_from_origin_status")]
/// Represents the bt_clock_snapshot_get_ns_from_origin_status as rust enum
pub enum BtClockSnapshotGetNsFromOriginStatus {
  #[doc(alias = "bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OK")]
  /// Alias for bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OK
  Ok = bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OK,
  #[doc(alias = "bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR")]
  /// Alias for bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR
  OverflowError = bt_clock_snapshot_get_ns_from_origin_status_BT_CLOCK_SNAPSHOT_GET_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR,
}
impl From< i32 > for BtClockSnapshotGetNsFromOriginStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtClockSnapshotGetNsFromOriginStatus > for i32 {
  fn from(item: BtClockSnapshotGetNsFromOriginStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_get_supported_mip_versions_method_status")]
/// Represents the bt_component_class_get_supported_mip_versions_method_status as rust enum
pub enum BtComponentClassGetSupportedMipVersionsMethodStatus {
  #[doc(alias = "bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_OK
  Ok = bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_ERROR
  Error = bt_component_class_get_supported_mip_versions_method_status_BT_COMPONENT_CLASS_GET_SUPPORTED_MIP_VERSIONS_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassGetSupportedMipVersionsMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassGetSupportedMipVersionsMethodStatus > for i32 {
  fn from(item: BtComponentClassGetSupportedMipVersionsMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_initialize_method_status")]
/// Represents the bt_component_class_initialize_method_status as rust enum
pub enum BtComponentClassInitializeMethodStatus {
  #[doc(alias = "bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_OK
  Ok = bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_ERROR
  Error = bt_component_class_initialize_method_status_BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassInitializeMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassInitializeMethodStatus > for i32 {
  fn from(item: BtComponentClassInitializeMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_port_connected_method_status")]
/// Represents the bt_component_class_port_connected_method_status as rust enum
pub enum BtComponentClassPortConnectedMethodStatus {
  #[doc(alias = "bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_OK
  Ok = bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_ERROR
  Error = bt_component_class_port_connected_method_status_BT_COMPONENT_CLASS_PORT_CONNECTED_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassPortConnectedMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassPortConnectedMethodStatus > for i32 {
  fn from(item: BtComponentClassPortConnectedMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_query_method_status")]
/// Represents the bt_component_class_query_method_status as rust enum
pub enum BtComponentClassQueryMethodStatus {
  #[doc(alias = "bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_OK
  Ok = bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_UNKNOWN_OBJECT")]
  /// Alias for bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_UNKNOWN_OBJECT
  UnknownObject = bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_UNKNOWN_OBJECT,
  #[doc(alias = "bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_AGAIN")]
  /// Alias for bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_AGAIN
  Again = bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_ERROR
  Error = bt_component_class_query_method_status_BT_COMPONENT_CLASS_QUERY_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassQueryMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassQueryMethodStatus > for i32 {
  fn from(item: BtComponentClassQueryMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_set_description_status")]
/// Represents the bt_component_class_set_description_status as rust enum
pub enum BtComponentClassSetDescriptionStatus {
  #[doc(alias = "bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_OK")]
  /// Alias for bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_OK
  Ok = bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_OK,
  #[doc(alias = "bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_set_description_status_BT_COMPONENT_CLASS_SET_DESCRIPTION_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtComponentClassSetDescriptionStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassSetDescriptionStatus > for i32 {
  fn from(item: BtComponentClassSetDescriptionStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_set_help_status")]
/// Represents the bt_component_class_set_help_status as rust enum
pub enum BtComponentClassSetHelpStatus {
  #[doc(alias = "bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_OK")]
  /// Alias for bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_OK
  Ok = bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_OK,
  #[doc(alias = "bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_set_help_status_BT_COMPONENT_CLASS_SET_HELP_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtComponentClassSetHelpStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassSetHelpStatus > for i32 {
  fn from(item: BtComponentClassSetHelpStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_set_method_status")]
/// Represents the bt_component_class_set_method_status as rust enum
pub enum BtComponentClassSetMethodStatus {
  #[doc(alias = "bt_component_class_set_method_status_BT_COMPONENT_CLASS_SET_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_set_method_status_BT_COMPONENT_CLASS_SET_METHOD_STATUS_OK
  Ok = bt_component_class_set_method_status_BT_COMPONENT_CLASS_SET_METHOD_STATUS_OK,
}
impl From< u32 > for BtComponentClassSetMethodStatus {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtComponentClassSetMethodStatus > for u32 {
  fn from(item: BtComponentClassSetMethodStatus) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_sink_consume_method_status")]
/// Represents the bt_component_class_sink_consume_method_status as rust enum
pub enum BtComponentClassSinkConsumeMethodStatus {
  #[doc(alias = "bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_OK
  Ok = bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_END")]
  /// Alias for bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_END
  End = bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_END,
  #[doc(alias = "bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_AGAIN")]
  /// Alias for bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_AGAIN
  Again = bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_ERROR
  Error = bt_component_class_sink_consume_method_status_BT_COMPONENT_CLASS_SINK_CONSUME_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassSinkConsumeMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassSinkConsumeMethodStatus > for i32 {
  fn from(item: BtComponentClassSinkConsumeMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_sink_graph_is_configured_method_status")]
/// Represents the bt_component_class_sink_graph_is_configured_method_status as rust enum
pub enum BtComponentClassSinkGraphIsConfiguredMethodStatus {
  #[doc(alias = "bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_OK")]
  /// Alias for bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_OK
  Ok = bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_OK,
  #[doc(alias = "bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_ERROR")]
  /// Alias for bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_ERROR
  Error = bt_component_class_sink_graph_is_configured_method_status_BT_COMPONENT_CLASS_SINK_GRAPH_IS_CONFIGURED_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtComponentClassSinkGraphIsConfiguredMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentClassSinkGraphIsConfiguredMethodStatus > for i32 {
  fn from(item: BtComponentClassSinkGraphIsConfiguredMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_class_type")]
/// Represents the bt_component_class_type as rust enum
pub enum BtComponentClassType {
  #[doc(alias = "bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SOURCE")]
  /// Alias for bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SOURCE
  Source = bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SOURCE,
  #[doc(alias = "bt_component_class_type_BT_COMPONENT_CLASS_TYPE_FILTER")]
  /// Alias for bt_component_class_type_BT_COMPONENT_CLASS_TYPE_FILTER
  Filter = bt_component_class_type_BT_COMPONENT_CLASS_TYPE_FILTER,
  #[doc(alias = "bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SINK")]
  /// Alias for bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SINK
  Sink = bt_component_class_type_BT_COMPONENT_CLASS_TYPE_SINK,
}
impl From< u32 > for BtComponentClassType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtComponentClassType > for u32 {
  fn from(item: BtComponentClassType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_component_descriptor_set_add_descriptor_status")]
/// Represents the bt_component_descriptor_set_add_descriptor_status as rust enum
pub enum BtComponentDescriptorSetAddDescriptorStatus {
  #[doc(alias = "bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_OK")]
  /// Alias for bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_OK
  Ok = bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_OK,
  #[doc(alias = "bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_MEMORY_ERROR")]
  /// Alias for bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_MEMORY_ERROR
  MemoryError = bt_component_descriptor_set_add_descriptor_status_BT_COMPONENT_DESCRIPTOR_SET_ADD_DESCRIPTOR_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtComponentDescriptorSetAddDescriptorStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtComponentDescriptorSetAddDescriptorStatus > for i32 {
  fn from(item: BtComponentDescriptorSetAddDescriptorStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_current_thread_error_append_cause_status")]
/// Represents the bt_current_thread_error_append_cause_status as rust enum
pub enum BtCurrentThreadErrorAppendCauseStatus {
  #[doc(alias = "bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_OK")]
  /// Alias for bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_OK
  Ok = bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_OK,
  #[doc(alias = "bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_MEMORY_ERROR
  MemoryError = bt_current_thread_error_append_cause_status_BT_CURRENT_THREAD_ERROR_APPEND_CAUSE_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtCurrentThreadErrorAppendCauseStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtCurrentThreadErrorAppendCauseStatus > for i32 {
  fn from(item: BtCurrentThreadErrorAppendCauseStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_error_cause_actor_type")]
/// Represents the bt_error_cause_actor_type as rust enum
pub enum BtErrorCauseActorType {
  #[doc(alias = "bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_UNKNOWN")]
  /// Alias for bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_UNKNOWN
  Unknown = bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_UNKNOWN,
  #[doc(alias = "bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT")]
  /// Alias for bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT
  Component = bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT,
  #[doc(alias = "bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT_CLASS")]
  /// Alias for bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT_CLASS
  ComponentClass = bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_COMPONENT_CLASS,
  #[doc(alias = "bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_MESSAGE_ITERATOR")]
  /// Alias for bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_MESSAGE_ITERATOR
  MessageIterator = bt_error_cause_actor_type_BT_ERROR_CAUSE_ACTOR_TYPE_MESSAGE_ITERATOR,
}
impl From< u32 > for BtErrorCauseActorType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtErrorCauseActorType > for u32 {
  fn from(item: BtErrorCauseActorType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_event_class_log_level")]
/// Represents the bt_event_class_log_level as rust enum
pub enum BtEventClassLogLevel {
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_EMERGENCY")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_EMERGENCY
  Emergency = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_EMERGENCY,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ALERT")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ALERT
  Alert = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ALERT,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_CRITICAL")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_CRITICAL
  Critical = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_CRITICAL,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ERROR")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ERROR
  Error = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_ERROR,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_WARNING")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_WARNING
  Warning = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_WARNING,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_NOTICE")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_NOTICE
  Notice = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_NOTICE,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_INFO")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_INFO
  Info = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_INFO,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_SYSTEM")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_SYSTEM
  DebugSystem = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_SYSTEM,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROGRAM")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROGRAM
  DebugProgram = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROGRAM,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROCESS")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROCESS
  DebugProcess = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_PROCESS,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_MODULE")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_MODULE
  DebugModule = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_MODULE,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_UNIT")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_UNIT
  DebugUnit = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_UNIT,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_FUNCTION")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_FUNCTION
  DebugFunction = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_FUNCTION,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_LINE")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_LINE
  DebugLine = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG_LINE,
  #[doc(alias = "bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG")]
  /// Alias for bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG
  Debug = bt_event_class_log_level_BT_EVENT_CLASS_LOG_LEVEL_DEBUG,
}
impl From< u32 > for BtEventClassLogLevel {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtEventClassLogLevel > for u32 {
  fn from(item: BtEventClassLogLevel) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_event_class_set_emf_uri_status")]
/// Represents the bt_event_class_set_emf_uri_status as rust enum
pub enum BtEventClassSetEmfUriStatus {
  #[doc(alias = "bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_OK")]
  /// Alias for bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_OK
  Ok = bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_OK,
  #[doc(alias = "bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_MEMORY_ERROR")]
  /// Alias for bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_MEMORY_ERROR
  MemoryError = bt_event_class_set_emf_uri_status_BT_EVENT_CLASS_SET_EMF_URI_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtEventClassSetEmfUriStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtEventClassSetEmfUriStatus > for i32 {
  fn from(item: BtEventClassSetEmfUriStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_event_class_set_field_class_status")]
/// Represents the bt_event_class_set_field_class_status as rust enum
pub enum BtEventClassSetFieldClassStatus {
  #[doc(alias = "bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_OK")]
  /// Alias for bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_OK
  Ok = bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_OK,
  #[doc(alias = "bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR")]
  /// Alias for bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR
  MemoryError = bt_event_class_set_field_class_status_BT_EVENT_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtEventClassSetFieldClassStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtEventClassSetFieldClassStatus > for i32 {
  fn from(item: BtEventClassSetFieldClassStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_event_class_set_name_status")]
/// Represents the bt_event_class_set_name_status as rust enum
pub enum BtEventClassSetNameStatus {
  #[doc(alias = "bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_OK")]
  /// Alias for bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_OK
  Ok = bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_OK,
  #[doc(alias = "bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_MEMORY_ERROR")]
  /// Alias for bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_MEMORY_ERROR
  MemoryError = bt_event_class_set_name_status_BT_EVENT_CLASS_SET_NAME_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtEventClassSetNameStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtEventClassSetNameStatus > for i32 {
  fn from(item: BtEventClassSetNameStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_array_dynamic_set_length_status")]
/// Represents the bt_field_array_dynamic_set_length_status as rust enum
pub enum BtFieldArrayDynamicSetLengthStatus {
  #[doc(alias = "bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_OK")]
  /// Alias for bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_OK
  BtFieldDynamicArraySetLengthStatusOk = bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_OK,
  #[doc(alias = "bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_MEMORY_ERROR
  BtFieldDynamicArraySetLengthStatusMemoryError = bt_field_array_dynamic_set_length_status_BT_FIELD_DYNAMIC_ARRAY_SET_LENGTH_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldArrayDynamicSetLengthStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldArrayDynamicSetLengthStatus > for i32 {
  fn from(item: BtFieldArrayDynamicSetLengthStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_enumeration_add_mapping_status")]
/// Represents the bt_field_class_enumeration_add_mapping_status as rust enum
pub enum BtFieldClassEnumerationAddMappingStatus {
  #[doc(alias = "bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_OK")]
  /// Alias for bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_OK
  Ok = bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_OK,
  #[doc(alias = "bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_MEMORY_ERROR
  MemoryError = bt_field_class_enumeration_add_mapping_status_BT_FIELD_CLASS_ENUMERATION_ADD_MAPPING_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldClassEnumerationAddMappingStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldClassEnumerationAddMappingStatus > for i32 {
  fn from(item: BtFieldClassEnumerationAddMappingStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_enumeration_get_mapping_labels_for_value_status")]
/// Represents the bt_field_class_enumeration_get_mapping_labels_for_value_status as rust enum
pub enum BtFieldClassEnumerationGetMappingLabelsForValueStatus {
  #[doc(alias = "bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_OK")]
  /// Alias for bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_OK
  BtFieldClassEnumerationGetMappingLabelsByValueStatusOk = bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_OK,
  #[doc(alias = "bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_MEMORY_ERROR
  BtFieldClassEnumerationGetMappingLabelsByValueStatusMemoryError = bt_field_class_enumeration_get_mapping_labels_for_value_status_BT_FIELD_CLASS_ENUMERATION_GET_MAPPING_LABELS_BY_VALUE_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldClassEnumerationGetMappingLabelsForValueStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldClassEnumerationGetMappingLabelsForValueStatus > for i32 {
  fn from(item: BtFieldClassEnumerationGetMappingLabelsForValueStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_integer_preferred_display_base")]
/// Represents the bt_field_class_integer_preferred_display_base as rust enum
pub enum BtFieldClassIntegerPreferredDisplayBase {
  #[doc(alias = "bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_BINARY")]
  /// Alias for bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_BINARY
  Binary = bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_BINARY,
  #[doc(alias = "bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_OCTAL")]
  /// Alias for bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_OCTAL
  Octal = bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_OCTAL,
  #[doc(alias = "bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_DECIMAL")]
  /// Alias for bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_DECIMAL
  Decimal = bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_DECIMAL,
  #[doc(alias = "bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_HEXADECIMAL")]
  /// Alias for bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_HEXADECIMAL
  Hexadecimal = bt_field_class_integer_preferred_display_base_BT_FIELD_CLASS_INTEGER_PREFERRED_DISPLAY_BASE_HEXADECIMAL,
}
impl From< u32 > for BtFieldClassIntegerPreferredDisplayBase {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtFieldClassIntegerPreferredDisplayBase > for u32 {
  fn from(item: BtFieldClassIntegerPreferredDisplayBase) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_structure_append_member_status")]
/// Represents the bt_field_class_structure_append_member_status as rust enum
pub enum BtFieldClassStructureAppendMemberStatus {
  #[doc(alias = "bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_OK")]
  /// Alias for bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_OK
  Ok = bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_OK,
  #[doc(alias = "bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_MEMORY_ERROR
  MemoryError = bt_field_class_structure_append_member_status_BT_FIELD_CLASS_STRUCTURE_APPEND_MEMBER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldClassStructureAppendMemberStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldClassStructureAppendMemberStatus > for i32 {
  fn from(item: BtFieldClassStructureAppendMemberStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u64)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_type")]
/// Represents the bt_field_class_type as rust enum
pub enum BtFieldClassType {
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_BOOL")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_BOOL
  Bool = bt_field_class_type_BT_FIELD_CLASS_TYPE_BOOL,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_BIT_ARRAY")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_BIT_ARRAY
  BitArray = bt_field_class_type_BT_FIELD_CLASS_TYPE_BIT_ARRAY,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_INTEGER")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_INTEGER
  Integer = bt_field_class_type_BT_FIELD_CLASS_TYPE_INTEGER,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_INTEGER")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_INTEGER
  UnsignedInteger = bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_INTEGER,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_INTEGER")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_INTEGER
  SignedInteger = bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_INTEGER,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_ENUMERATION")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_ENUMERATION
  Enumeration = bt_field_class_type_BT_FIELD_CLASS_TYPE_ENUMERATION,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_ENUMERATION")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_ENUMERATION
  UnsignedEnumeration = bt_field_class_type_BT_FIELD_CLASS_TYPE_UNSIGNED_ENUMERATION,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_ENUMERATION")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_ENUMERATION
  SignedEnumeration = bt_field_class_type_BT_FIELD_CLASS_TYPE_SIGNED_ENUMERATION,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_REAL")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_REAL
  Real = bt_field_class_type_BT_FIELD_CLASS_TYPE_REAL,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_SINGLE_PRECISION_REAL")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_SINGLE_PRECISION_REAL
  SinglePrecisionReal = bt_field_class_type_BT_FIELD_CLASS_TYPE_SINGLE_PRECISION_REAL,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_DOUBLE_PRECISION_REAL")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_DOUBLE_PRECISION_REAL
  DoublePrecisionReal = bt_field_class_type_BT_FIELD_CLASS_TYPE_DOUBLE_PRECISION_REAL,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_STRING")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_STRING
  String = bt_field_class_type_BT_FIELD_CLASS_TYPE_STRING,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_STRUCTURE")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_STRUCTURE
  Structure = bt_field_class_type_BT_FIELD_CLASS_TYPE_STRUCTURE,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_ARRAY")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_ARRAY
  Array = bt_field_class_type_BT_FIELD_CLASS_TYPE_ARRAY,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_STATIC_ARRAY")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_STATIC_ARRAY
  StaticArray = bt_field_class_type_BT_FIELD_CLASS_TYPE_STATIC_ARRAY,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY
  DynamicArray = bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITHOUT_LENGTH_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITHOUT_LENGTH_FIELD
  DynamicArrayWithoutLengthField = bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITHOUT_LENGTH_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITH_LENGTH_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITH_LENGTH_FIELD
  DynamicArrayWithLengthField = bt_field_class_type_BT_FIELD_CLASS_TYPE_DYNAMIC_ARRAY_WITH_LENGTH_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION
  Option = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITHOUT_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITHOUT_SELECTOR_FIELD
  OptionWithoutSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITHOUT_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SELECTOR_FIELD
  OptionWithSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_BOOL_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_BOOL_SELECTOR_FIELD
  OptionWithBoolSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_BOOL_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_INTEGER_SELECTOR_FIELD
  OptionWithIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD
  OptionWithUnsignedIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SIGNED_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SIGNED_INTEGER_SELECTOR_FIELD
  OptionWithSignedIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_OPTION_WITH_SIGNED_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT
  Variant = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITHOUT_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITHOUT_SELECTOR_FIELD
  VariantWithoutSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITHOUT_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SELECTOR_FIELD
  VariantWithSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_INTEGER_SELECTOR_FIELD
  VariantWithIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD
  VariantWithUnsignedIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_UNSIGNED_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SIGNED_INTEGER_SELECTOR_FIELD")]
  /// Alias for bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SIGNED_INTEGER_SELECTOR_FIELD
  VariantWithSignedIntegerSelectorField = bt_field_class_type_BT_FIELD_CLASS_TYPE_VARIANT_WITH_SIGNED_INTEGER_SELECTOR_FIELD,
  #[doc(alias = "bt_field_class_type___BT_FIELD_CLASS_TYPE_BIG_VALUE")]
  /// Alias for bt_field_class_type___BT_FIELD_CLASS_TYPE_BIG_VALUE
  BtFieldClassTypeBigValue = bt_field_class_type___BT_FIELD_CLASS_TYPE_BIG_VALUE,
}
impl From< u64 > for BtFieldClassType {
  fn from(item: u64) -> Self {
    num::FromPrimitive::from_u64(item).unwrap()
  }
}
impl From< BtFieldClassType > for u64 {
  fn from(item: BtFieldClassType) -> Self {
    num::ToPrimitive::to_u64(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_variant_with_selector_field_integer_append_option_status")]
/// Represents the bt_field_class_variant_with_selector_field_integer_append_option_status as rust enum
pub enum BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus {
  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK")]
  /// Alias for bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK
  BtFieldClassVariantWithSelectorFieldAppendOptionStatusOk = bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK,
  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR
  BtFieldClassVariantWithSelectorFieldAppendOptionStatusMemoryError = bt_field_class_variant_with_selector_field_integer_append_option_status_BT_FIELD_CLASS_VARIANT_WITH_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus > for i32 {
  fn from(item: BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_class_variant_without_selector_append_option_status")]
/// Represents the bt_field_class_variant_without_selector_append_option_status as rust enum
pub enum BtFieldClassVariantWithoutSelectorAppendOptionStatus {
  #[doc(alias = "bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK")]
  /// Alias for bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK
  BtFieldClassVariantWithoutSelectorFieldAppendOptionStatusOk = bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_OK,
  #[doc(alias = "bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR
  BtFieldClassVariantWithoutSelectorFieldAppendOptionStatusMemoryError = bt_field_class_variant_without_selector_append_option_status_BT_FIELD_CLASS_VARIANT_WITHOUT_SELECTOR_FIELD_APPEND_OPTION_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldClassVariantWithoutSelectorAppendOptionStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldClassVariantWithoutSelectorAppendOptionStatus > for i32 {
  fn from(item: BtFieldClassVariantWithoutSelectorAppendOptionStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_enumeration_get_mapping_labels_status")]
/// Represents the bt_field_enumeration_get_mapping_labels_status as rust enum
pub enum BtFieldEnumerationGetMappingLabelsStatus {
  #[doc(alias = "bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_OK")]
  /// Alias for bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_OK
  Ok = bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_OK,
  #[doc(alias = "bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_MEMORY_ERROR
  MemoryError = bt_field_enumeration_get_mapping_labels_status_BT_FIELD_ENUMERATION_GET_MAPPING_LABELS_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldEnumerationGetMappingLabelsStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldEnumerationGetMappingLabelsStatus > for i32 {
  fn from(item: BtFieldEnumerationGetMappingLabelsStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_path_item_type")]
/// Represents the bt_field_path_item_type as rust enum
pub enum BtFieldPathItemType {
  #[doc(alias = "bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_INDEX")]
  /// Alias for bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_INDEX
  Index = bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_INDEX,
  #[doc(alias = "bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_ARRAY_ELEMENT")]
  /// Alias for bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_ARRAY_ELEMENT
  CurrentArrayElement = bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_ARRAY_ELEMENT,
  #[doc(alias = "bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_OPTION_CONTENT")]
  /// Alias for bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_OPTION_CONTENT
  CurrentOptionContent = bt_field_path_item_type_BT_FIELD_PATH_ITEM_TYPE_CURRENT_OPTION_CONTENT,
}
impl From< u32 > for BtFieldPathItemType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtFieldPathItemType > for u32 {
  fn from(item: BtFieldPathItemType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_path_scope")]
/// Represents the bt_field_path_scope as rust enum
pub enum BtFieldPathScope {
  #[doc(alias = "bt_field_path_scope_BT_FIELD_PATH_SCOPE_PACKET_CONTEXT")]
  /// Alias for bt_field_path_scope_BT_FIELD_PATH_SCOPE_PACKET_CONTEXT
  PacketContext = bt_field_path_scope_BT_FIELD_PATH_SCOPE_PACKET_CONTEXT,
  #[doc(alias = "bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_COMMON_CONTEXT")]
  /// Alias for bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_COMMON_CONTEXT
  EventCommonContext = bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_COMMON_CONTEXT,
  #[doc(alias = "bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_SPECIFIC_CONTEXT")]
  /// Alias for bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_SPECIFIC_CONTEXT
  EventSpecificContext = bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_SPECIFIC_CONTEXT,
  #[doc(alias = "bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_PAYLOAD")]
  /// Alias for bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_PAYLOAD
  EventPayload = bt_field_path_scope_BT_FIELD_PATH_SCOPE_EVENT_PAYLOAD,
}
impl From< u32 > for BtFieldPathScope {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtFieldPathScope > for u32 {
  fn from(item: BtFieldPathScope) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_string_append_status")]
/// Represents the bt_field_string_append_status as rust enum
pub enum BtFieldStringAppendStatus {
  #[doc(alias = "bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_OK")]
  /// Alias for bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_OK
  Ok = bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_OK,
  #[doc(alias = "bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_MEMORY_ERROR
  MemoryError = bt_field_string_append_status_BT_FIELD_STRING_APPEND_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldStringAppendStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldStringAppendStatus > for i32 {
  fn from(item: BtFieldStringAppendStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_string_set_value_status")]
/// Represents the bt_field_string_set_value_status as rust enum
pub enum BtFieldStringSetValueStatus {
  #[doc(alias = "bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_OK")]
  /// Alias for bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_OK
  Ok = bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_OK,
  #[doc(alias = "bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_MEMORY_ERROR
  MemoryError = bt_field_string_set_value_status_BT_FIELD_STRING_SET_VALUE_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtFieldStringSetValueStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtFieldStringSetValueStatus > for i32 {
  fn from(item: BtFieldStringSetValueStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_field_variant_select_option_by_index_status")]
/// Represents the bt_field_variant_select_option_by_index_status as rust enum
pub enum BtFieldVariantSelectOptionByIndexStatus {
  #[doc(alias = "bt_field_variant_select_option_by_index_status_BT_FIELD_VARIANT_SELECT_OPTION_STATUS_OK")]
  /// Alias for bt_field_variant_select_option_by_index_status_BT_FIELD_VARIANT_SELECT_OPTION_STATUS_OK
  BtFieldVariantSelectOptionStatusOk = bt_field_variant_select_option_by_index_status_BT_FIELD_VARIANT_SELECT_OPTION_STATUS_OK,
}
impl From< u32 > for BtFieldVariantSelectOptionByIndexStatus {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtFieldVariantSelectOptionByIndexStatus > for u32 {
  fn from(item: BtFieldVariantSelectOptionByIndexStatus) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_get_greatest_operative_mip_version_status")]
/// Represents the bt_get_greatest_operative_mip_version_status as rust enum
pub enum BtGetGreatestOperativeMipVersionStatus {
  #[doc(alias = "bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_OK")]
  /// Alias for bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_OK
  Ok = bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_OK,
  #[doc(alias = "bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_NO_MATCH")]
  /// Alias for bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_NO_MATCH
  NoMatch = bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_NO_MATCH,
  #[doc(alias = "bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_MEMORY_ERROR")]
  /// Alias for bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_MEMORY_ERROR
  MemoryError = bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_ERROR")]
  /// Alias for bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_ERROR
  Error = bt_get_greatest_operative_mip_version_status_BT_GET_GREATEST_OPERATIVE_MIP_VERSION_STATUS_ERROR,
}
impl From< i32 > for BtGetGreatestOperativeMipVersionStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGetGreatestOperativeMipVersionStatus > for i32 {
  fn from(item: BtGetGreatestOperativeMipVersionStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_add_component_status")]
/// Represents the bt_graph_add_component_status as rust enum
pub enum BtGraphAddComponentStatus {
  #[doc(alias = "bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_OK")]
  /// Alias for bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_OK
  Ok = bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_OK,
  #[doc(alias = "bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_ERROR")]
  /// Alias for bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_ERROR
  Error = bt_graph_add_component_status_BT_GRAPH_ADD_COMPONENT_STATUS_ERROR,
}
impl From< i32 > for BtGraphAddComponentStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphAddComponentStatus > for i32 {
  fn from(item: BtGraphAddComponentStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_add_interrupter_status")]
/// Represents the bt_graph_add_interrupter_status as rust enum
pub enum BtGraphAddInterrupterStatus {
  #[doc(alias = "bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_OK")]
  /// Alias for bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_OK
  Ok = bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_OK,
  #[doc(alias = "bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_add_interrupter_status_BT_GRAPH_ADD_INTERRUPTER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtGraphAddInterrupterStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphAddInterrupterStatus > for i32 {
  fn from(item: BtGraphAddInterrupterStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_add_listener_status")]
/// Represents the bt_graph_add_listener_status as rust enum
pub enum BtGraphAddListenerStatus {
  #[doc(alias = "bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_OK")]
  /// Alias for bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_OK
  Ok = bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_OK,
  #[doc(alias = "bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_add_listener_status_BT_GRAPH_ADD_LISTENER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtGraphAddListenerStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphAddListenerStatus > for i32 {
  fn from(item: BtGraphAddListenerStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_connect_ports_status")]
/// Represents the bt_graph_connect_ports_status as rust enum
pub enum BtGraphConnectPortsStatus {
  #[doc(alias = "bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_OK")]
  /// Alias for bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_OK
  Ok = bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_OK,
  #[doc(alias = "bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_ERROR")]
  /// Alias for bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_ERROR
  Error = bt_graph_connect_ports_status_BT_GRAPH_CONNECT_PORTS_STATUS_ERROR,
}
impl From< i32 > for BtGraphConnectPortsStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphConnectPortsStatus > for i32 {
  fn from(item: BtGraphConnectPortsStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_listener_func_status")]
/// Represents the bt_graph_listener_func_status as rust enum
pub enum BtGraphListenerFuncStatus {
  #[doc(alias = "bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_OK")]
  /// Alias for bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_OK
  Ok = bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_OK,
  #[doc(alias = "bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_ERROR")]
  /// Alias for bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_ERROR
  Error = bt_graph_listener_func_status_BT_GRAPH_LISTENER_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtGraphListenerFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphListenerFuncStatus > for i32 {
  fn from(item: BtGraphListenerFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_run_once_status")]
/// Represents the bt_graph_run_once_status as rust enum
pub enum BtGraphRunOnceStatus {
  #[doc(alias = "bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_OK")]
  /// Alias for bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_OK
  Ok = bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_OK,
  #[doc(alias = "bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_END")]
  /// Alias for bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_END
  End = bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_END,
  #[doc(alias = "bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_AGAIN")]
  /// Alias for bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_AGAIN
  Again = bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_AGAIN,
  #[doc(alias = "bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_ERROR")]
  /// Alias for bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_ERROR
  Error = bt_graph_run_once_status_BT_GRAPH_RUN_ONCE_STATUS_ERROR,
}
impl From< i32 > for BtGraphRunOnceStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphRunOnceStatus > for i32 {
  fn from(item: BtGraphRunOnceStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_run_status")]
/// Represents the bt_graph_run_status as rust enum
pub enum BtGraphRunStatus {
  #[doc(alias = "bt_graph_run_status_BT_GRAPH_RUN_STATUS_OK")]
  /// Alias for bt_graph_run_status_BT_GRAPH_RUN_STATUS_OK
  Ok = bt_graph_run_status_BT_GRAPH_RUN_STATUS_OK,
  #[doc(alias = "bt_graph_run_status_BT_GRAPH_RUN_STATUS_AGAIN")]
  /// Alias for bt_graph_run_status_BT_GRAPH_RUN_STATUS_AGAIN
  Again = bt_graph_run_status_BT_GRAPH_RUN_STATUS_AGAIN,
  #[doc(alias = "bt_graph_run_status_BT_GRAPH_RUN_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_run_status_BT_GRAPH_RUN_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_run_status_BT_GRAPH_RUN_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_run_status_BT_GRAPH_RUN_STATUS_ERROR")]
  /// Alias for bt_graph_run_status_BT_GRAPH_RUN_STATUS_ERROR
  Error = bt_graph_run_status_BT_GRAPH_RUN_STATUS_ERROR,
}
impl From< i32 > for BtGraphRunStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphRunStatus > for i32 {
  fn from(item: BtGraphRunStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_simple_sink_component_consume_func_status")]
/// Represents the bt_graph_simple_sink_component_consume_func_status as rust enum
pub enum BtGraphSimpleSinkComponentConsumeFuncStatus {
  #[doc(alias = "bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_OK")]
  /// Alias for bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_OK
  Ok = bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_OK,
  #[doc(alias = "bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_END")]
  /// Alias for bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_END
  End = bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_END,
  #[doc(alias = "bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_AGAIN")]
  /// Alias for bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_AGAIN
  Again = bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_AGAIN,
  #[doc(alias = "bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_ERROR")]
  /// Alias for bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_ERROR
  Error = bt_graph_simple_sink_component_consume_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_CONSUME_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtGraphSimpleSinkComponentConsumeFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphSimpleSinkComponentConsumeFuncStatus > for i32 {
  fn from(item: BtGraphSimpleSinkComponentConsumeFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_graph_simple_sink_component_initialize_func_status")]
/// Represents the bt_graph_simple_sink_component_initialize_func_status as rust enum
pub enum BtGraphSimpleSinkComponentInitializeFuncStatus {
  #[doc(alias = "bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_OK")]
  /// Alias for bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_OK
  Ok = bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_OK,
  #[doc(alias = "bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_ERROR")]
  /// Alias for bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_ERROR
  Error = bt_graph_simple_sink_component_initialize_func_status_BT_GRAPH_SIMPLE_SINK_COMPONENT_INITIALIZE_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtGraphSimpleSinkComponentInitializeFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtGraphSimpleSinkComponentInitializeFuncStatus > for i32 {
  fn from(item: BtGraphSimpleSinkComponentInitializeFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_integer_range_set_add_range_status")]
/// Represents the bt_integer_range_set_add_range_status as rust enum
pub enum BtIntegerRangeSetAddRangeStatus {
  #[doc(alias = "bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_OK")]
  /// Alias for bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_OK
  Ok = bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_OK,
  #[doc(alias = "bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_MEMORY_ERROR
  MemoryError = bt_integer_range_set_add_range_status_BT_INTEGER_RANGE_SET_ADD_RANGE_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtIntegerRangeSetAddRangeStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtIntegerRangeSetAddRangeStatus > for i32 {
  fn from(item: BtIntegerRangeSetAddRangeStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_logging_level")]
/// Represents the bt_logging_level as rust enum
pub enum BtLoggingLevel {
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_TRACE")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_TRACE
  Trace = bt_logging_level_BT_LOGGING_LEVEL_TRACE,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_DEBUG")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_DEBUG
  Debug = bt_logging_level_BT_LOGGING_LEVEL_DEBUG,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_INFO")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_INFO
  Info = bt_logging_level_BT_LOGGING_LEVEL_INFO,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_WARNING")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_WARNING
  Warning = bt_logging_level_BT_LOGGING_LEVEL_WARNING,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_ERROR")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_ERROR
  Error = bt_logging_level_BT_LOGGING_LEVEL_ERROR,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_FATAL")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_FATAL
  Fatal = bt_logging_level_BT_LOGGING_LEVEL_FATAL,
  #[doc(alias = "bt_logging_level_BT_LOGGING_LEVEL_NONE")]
  /// Alias for bt_logging_level_BT_LOGGING_LEVEL_NONE
  None = bt_logging_level_BT_LOGGING_LEVEL_NONE,
}
impl From< u32 > for BtLoggingLevel {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtLoggingLevel > for u32 {
  fn from(item: BtLoggingLevel) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_can_seek_beginning_status")]
/// Represents the bt_message_iterator_can_seek_beginning_status as rust enum
pub enum BtMessageIteratorCanSeekBeginningStatus {
  #[doc(alias = "bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_OK")]
  /// Alias for bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_OK
  Ok = bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_OK,
  #[doc(alias = "bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_AGAIN
  Again = bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_ERROR")]
  /// Alias for bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_ERROR
  Error = bt_message_iterator_can_seek_beginning_status_BT_MESSAGE_ITERATOR_CAN_SEEK_BEGINNING_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorCanSeekBeginningStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorCanSeekBeginningStatus > for i32 {
  fn from(item: BtMessageIteratorCanSeekBeginningStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_can_seek_ns_from_origin_status")]
/// Represents the bt_message_iterator_can_seek_ns_from_origin_status as rust enum
pub enum BtMessageIteratorCanSeekNsFromOriginStatus {
  #[doc(alias = "bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_OK")]
  /// Alias for bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_OK
  Ok = bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_OK,
  #[doc(alias = "bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN
  Again = bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_ERROR")]
  /// Alias for bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_ERROR
  Error = bt_message_iterator_can_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_CAN_SEEK_NS_FROM_ORIGIN_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorCanSeekNsFromOriginStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorCanSeekNsFromOriginStatus > for i32 {
  fn from(item: BtMessageIteratorCanSeekNsFromOriginStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_can_seek_beginning_method_status")]
/// Represents the bt_message_iterator_class_can_seek_beginning_method_status as rust enum
pub enum BtMessageIteratorClassCanSeekBeginningMethodStatus {
  #[doc(alias = "bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_AGAIN
  Again = bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_can_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_BEGINNING_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassCanSeekBeginningMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassCanSeekBeginningMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassCanSeekBeginningMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_can_seek_ns_from_origin_method_status")]
/// Represents the bt_message_iterator_class_can_seek_ns_from_origin_method_status as rust enum
pub enum BtMessageIteratorClassCanSeekNsFromOriginMethodStatus {
  #[doc(alias = "bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN
  Again = bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_can_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_CAN_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassCanSeekNsFromOriginMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassCanSeekNsFromOriginMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassCanSeekNsFromOriginMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_initialize_method_status")]
/// Represents the bt_message_iterator_class_initialize_method_status as rust enum
pub enum BtMessageIteratorClassInitializeMethodStatus {
  #[doc(alias = "bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_initialize_method_status_BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassInitializeMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassInitializeMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassInitializeMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_next_method_status")]
/// Represents the bt_message_iterator_class_next_method_status as rust enum
pub enum BtMessageIteratorClassNextMethodStatus {
  #[doc(alias = "bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_END")]
  /// Alias for bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_END
  End = bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_END,
  #[doc(alias = "bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_AGAIN
  Again = bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_next_method_status_BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassNextMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassNextMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassNextMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_seek_beginning_method_status")]
/// Represents the bt_message_iterator_class_seek_beginning_method_status as rust enum
pub enum BtMessageIteratorClassSeekBeginningMethodStatus {
  #[doc(alias = "bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_AGAIN
  Again = bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_seek_beginning_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_BEGINNING_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassSeekBeginningMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassSeekBeginningMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassSeekBeginningMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_seek_ns_from_origin_method_status")]
/// Represents the bt_message_iterator_class_seek_ns_from_origin_method_status as rust enum
pub enum BtMessageIteratorClassSeekNsFromOriginMethodStatus {
  #[doc(alias = "bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_OK,
  #[doc(alias = "bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN
  Again = bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR")]
  /// Alias for bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR
  Error = bt_message_iterator_class_seek_ns_from_origin_method_status_BT_MESSAGE_ITERATOR_CLASS_SEEK_NS_FROM_ORIGIN_METHOD_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorClassSeekNsFromOriginMethodStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassSeekNsFromOriginMethodStatus > for i32 {
  fn from(item: BtMessageIteratorClassSeekNsFromOriginMethodStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_class_set_method_status")]
/// Represents the bt_message_iterator_class_set_method_status as rust enum
pub enum BtMessageIteratorClassSetMethodStatus {
  #[doc(alias = "bt_message_iterator_class_set_method_status_BT_MESSAGE_ITERATOR_CLASS_SET_METHOD_STATUS_OK")]
  /// Alias for bt_message_iterator_class_set_method_status_BT_MESSAGE_ITERATOR_CLASS_SET_METHOD_STATUS_OK
  Ok = bt_message_iterator_class_set_method_status_BT_MESSAGE_ITERATOR_CLASS_SET_METHOD_STATUS_OK,
}
impl From< u32 > for BtMessageIteratorClassSetMethodStatus {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtMessageIteratorClassSetMethodStatus > for u32 {
  fn from(item: BtMessageIteratorClassSetMethodStatus) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_create_from_message_iterator_status")]
/// Represents the bt_message_iterator_create_from_message_iterator_status as rust enum
pub enum BtMessageIteratorCreateFromMessageIteratorStatus {
  #[doc(alias = "bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_OK")]
  /// Alias for bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_OK
  Ok = bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_OK,
  #[doc(alias = "bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_ERROR")]
  /// Alias for bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_ERROR
  Error = bt_message_iterator_create_from_message_iterator_status_BT_MESSAGE_ITERATOR_CREATE_FROM_MESSAGE_ITERATOR_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorCreateFromMessageIteratorStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorCreateFromMessageIteratorStatus > for i32 {
  fn from(item: BtMessageIteratorCreateFromMessageIteratorStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_create_from_sink_component_status")]
/// Represents the bt_message_iterator_create_from_sink_component_status as rust enum
pub enum BtMessageIteratorCreateFromSinkComponentStatus {
  #[doc(alias = "bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_OK")]
  /// Alias for bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_OK
  Ok = bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_OK,
  #[doc(alias = "bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_ERROR")]
  /// Alias for bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_ERROR
  Error = bt_message_iterator_create_from_sink_component_status_BT_MESSAGE_ITERATOR_CREATE_FROM_SINK_COMPONENT_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorCreateFromSinkComponentStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorCreateFromSinkComponentStatus > for i32 {
  fn from(item: BtMessageIteratorCreateFromSinkComponentStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_next_status")]
/// Represents the bt_message_iterator_next_status as rust enum
pub enum BtMessageIteratorNextStatus {
  #[doc(alias = "bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_OK")]
  /// Alias for bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_OK
  Ok = bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_OK,
  #[doc(alias = "bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_END")]
  /// Alias for bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_END
  End = bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_END,
  #[doc(alias = "bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_AGAIN
  Again = bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_ERROR")]
  /// Alias for bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_ERROR
  Error = bt_message_iterator_next_status_BT_MESSAGE_ITERATOR_NEXT_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorNextStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorNextStatus > for i32 {
  fn from(item: BtMessageIteratorNextStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_seek_beginning_status")]
/// Represents the bt_message_iterator_seek_beginning_status as rust enum
pub enum BtMessageIteratorSeekBeginningStatus {
  #[doc(alias = "bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_OK")]
  /// Alias for bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_OK
  Ok = bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_OK,
  #[doc(alias = "bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_AGAIN
  Again = bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_ERROR")]
  /// Alias for bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_ERROR
  Error = bt_message_iterator_seek_beginning_status_BT_MESSAGE_ITERATOR_SEEK_BEGINNING_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorSeekBeginningStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorSeekBeginningStatus > for i32 {
  fn from(item: BtMessageIteratorSeekBeginningStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_iterator_seek_ns_from_origin_status")]
/// Represents the bt_message_iterator_seek_ns_from_origin_status as rust enum
pub enum BtMessageIteratorSeekNsFromOriginStatus {
  #[doc(alias = "bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_OK")]
  /// Alias for bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_OK
  Ok = bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_OK,
  #[doc(alias = "bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN")]
  /// Alias for bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN
  Again = bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_AGAIN,
  #[doc(alias = "bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR")]
  /// Alias for bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR
  MemoryError = bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_ERROR")]
  /// Alias for bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_ERROR
  Error = bt_message_iterator_seek_ns_from_origin_status_BT_MESSAGE_ITERATOR_SEEK_NS_FROM_ORIGIN_STATUS_ERROR,
}
impl From< i32 > for BtMessageIteratorSeekNsFromOriginStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtMessageIteratorSeekNsFromOriginStatus > for i32 {
  fn from(item: BtMessageIteratorSeekNsFromOriginStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_stream_clock_snapshot_state")]
/// Represents the bt_message_stream_clock_snapshot_state as rust enum
pub enum BtMessageStreamClockSnapshotState {
  #[doc(alias = "bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_KNOWN")]
  /// Alias for bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_KNOWN
  Known = bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_KNOWN,
  #[doc(alias = "bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_UNKNOWN")]
  /// Alias for bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_UNKNOWN
  Unknown = bt_message_stream_clock_snapshot_state_BT_MESSAGE_STREAM_CLOCK_SNAPSHOT_STATE_UNKNOWN,
}
impl From< u32 > for BtMessageStreamClockSnapshotState {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtMessageStreamClockSnapshotState > for u32 {
  fn from(item: BtMessageStreamClockSnapshotState) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_message_type")]
/// Represents the bt_message_type as rust enum
pub enum BtMessageType {
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_STREAM_BEGINNING")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_STREAM_BEGINNING
  StreamBeginning = bt_message_type_BT_MESSAGE_TYPE_STREAM_BEGINNING,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_STREAM_END")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_STREAM_END
  StreamEnd = bt_message_type_BT_MESSAGE_TYPE_STREAM_END,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_EVENT")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_EVENT
  Event = bt_message_type_BT_MESSAGE_TYPE_EVENT,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_PACKET_BEGINNING")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_PACKET_BEGINNING
  PacketBeginning = bt_message_type_BT_MESSAGE_TYPE_PACKET_BEGINNING,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_PACKET_END")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_PACKET_END
  PacketEnd = bt_message_type_BT_MESSAGE_TYPE_PACKET_END,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_DISCARDED_EVENTS")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_DISCARDED_EVENTS
  DiscardedEvents = bt_message_type_BT_MESSAGE_TYPE_DISCARDED_EVENTS,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_DISCARDED_PACKETS")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_DISCARDED_PACKETS
  DiscardedPackets = bt_message_type_BT_MESSAGE_TYPE_DISCARDED_PACKETS,
  #[doc(alias = "bt_message_type_BT_MESSAGE_TYPE_MESSAGE_ITERATOR_INACTIVITY")]
  /// Alias for bt_message_type_BT_MESSAGE_TYPE_MESSAGE_ITERATOR_INACTIVITY
  MessageIteratorInactivity = bt_message_type_BT_MESSAGE_TYPE_MESSAGE_ITERATOR_INACTIVITY,
}
impl From< u32 > for BtMessageType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtMessageType > for u32 {
  fn from(item: BtMessageType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_find_all_from_dir_status")]
/// Represents the bt_plugin_find_all_from_dir_status as rust enum
pub enum BtPluginFindAllFromDirStatus {
  #[doc(alias = "bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_OK")]
  /// Alias for bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_OK
  Ok = bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_OK,
  #[doc(alias = "bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_NOT_FOUND")]
  /// Alias for bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_NOT_FOUND
  NotFound = bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_NOT_FOUND,
  #[doc(alias = "bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_ERROR")]
  /// Alias for bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_ERROR
  Error = bt_plugin_find_all_from_dir_status_BT_PLUGIN_FIND_ALL_FROM_DIR_STATUS_ERROR,
}
impl From< i32 > for BtPluginFindAllFromDirStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginFindAllFromDirStatus > for i32 {
  fn from(item: BtPluginFindAllFromDirStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_find_all_from_file_status")]
/// Represents the bt_plugin_find_all_from_file_status as rust enum
pub enum BtPluginFindAllFromFileStatus {
  #[doc(alias = "bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_OK")]
  /// Alias for bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_OK
  Ok = bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_OK,
  #[doc(alias = "bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_NOT_FOUND")]
  /// Alias for bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_NOT_FOUND
  NotFound = bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_NOT_FOUND,
  #[doc(alias = "bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_ERROR")]
  /// Alias for bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_ERROR
  Error = bt_plugin_find_all_from_file_status_BT_PLUGIN_FIND_ALL_FROM_FILE_STATUS_ERROR,
}
impl From< i32 > for BtPluginFindAllFromFileStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginFindAllFromFileStatus > for i32 {
  fn from(item: BtPluginFindAllFromFileStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_find_all_from_static_status")]
/// Represents the bt_plugin_find_all_from_static_status as rust enum
pub enum BtPluginFindAllFromStaticStatus {
  #[doc(alias = "bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_OK")]
  /// Alias for bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_OK
  Ok = bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_OK,
  #[doc(alias = "bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_NOT_FOUND")]
  /// Alias for bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_NOT_FOUND
  NotFound = bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_NOT_FOUND,
  #[doc(alias = "bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_ERROR")]
  /// Alias for bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_ERROR
  Error = bt_plugin_find_all_from_static_status_BT_PLUGIN_FIND_ALL_FROM_STATIC_STATUS_ERROR,
}
impl From< i32 > for BtPluginFindAllFromStaticStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginFindAllFromStaticStatus > for i32 {
  fn from(item: BtPluginFindAllFromStaticStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_find_all_status")]
/// Represents the bt_plugin_find_all_status as rust enum
pub enum BtPluginFindAllStatus {
  #[doc(alias = "bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_OK")]
  /// Alias for bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_OK
  Ok = bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_OK,
  #[doc(alias = "bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_NOT_FOUND")]
  /// Alias for bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_NOT_FOUND
  NotFound = bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_NOT_FOUND,
  #[doc(alias = "bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_ERROR")]
  /// Alias for bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_ERROR
  Error = bt_plugin_find_all_status_BT_PLUGIN_FIND_ALL_STATUS_ERROR,
}
impl From< i32 > for BtPluginFindAllStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginFindAllStatus > for i32 {
  fn from(item: BtPluginFindAllStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_find_status")]
/// Represents the bt_plugin_find_status as rust enum
pub enum BtPluginFindStatus {
  #[doc(alias = "bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_OK")]
  /// Alias for bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_OK
  Ok = bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_OK,
  #[doc(alias = "bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_NOT_FOUND")]
  /// Alias for bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_NOT_FOUND
  NotFound = bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_NOT_FOUND,
  #[doc(alias = "bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_ERROR")]
  /// Alias for bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_ERROR
  Error = bt_plugin_find_status_BT_PLUGIN_FIND_STATUS_ERROR,
}
impl From< i32 > for BtPluginFindStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginFindStatus > for i32 {
  fn from(item: BtPluginFindStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_plugin_initialize_func_status")]
/// Represents the bt_plugin_initialize_func_status as rust enum
pub enum BtPluginInitializeFuncStatus {
  #[doc(alias = "bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_OK")]
  /// Alias for bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_OK
  Ok = bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_OK,
  #[doc(alias = "bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_ERROR")]
  /// Alias for bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_ERROR
  Error = bt_plugin_initialize_func_status_BT_PLUGIN_INITIALIZE_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtPluginInitializeFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtPluginInitializeFuncStatus > for i32 {
  fn from(item: BtPluginInitializeFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_port_type")]
/// Represents the bt_port_type as rust enum
pub enum BtPortType {
  #[doc(alias = "bt_port_type_BT_PORT_TYPE_INPUT")]
  /// Alias for bt_port_type_BT_PORT_TYPE_INPUT
  Input = bt_port_type_BT_PORT_TYPE_INPUT,
  #[doc(alias = "bt_port_type_BT_PORT_TYPE_OUTPUT")]
  /// Alias for bt_port_type_BT_PORT_TYPE_OUTPUT
  Output = bt_port_type_BT_PORT_TYPE_OUTPUT,
}
impl From< u32 > for BtPortType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtPortType > for u32 {
  fn from(item: BtPortType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_property_availability")]
/// Represents the bt_property_availability as rust enum
pub enum BtPropertyAvailability {
  #[doc(alias = "bt_property_availability_BT_PROPERTY_AVAILABILITY_AVAILABLE")]
  /// Alias for bt_property_availability_BT_PROPERTY_AVAILABILITY_AVAILABLE
  Available = bt_property_availability_BT_PROPERTY_AVAILABILITY_AVAILABLE,
  #[doc(alias = "bt_property_availability_BT_PROPERTY_AVAILABILITY_NOT_AVAILABLE")]
  /// Alias for bt_property_availability_BT_PROPERTY_AVAILABILITY_NOT_AVAILABLE
  NotAvailable = bt_property_availability_BT_PROPERTY_AVAILABILITY_NOT_AVAILABLE,
}
impl From< u32 > for BtPropertyAvailability {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtPropertyAvailability > for u32 {
  fn from(item: BtPropertyAvailability) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_query_executor_add_interrupter_status")]
/// Represents the bt_query_executor_add_interrupter_status as rust enum
pub enum BtQueryExecutorAddInterrupterStatus {
  #[doc(alias = "bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_OK")]
  /// Alias for bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_OK
  Ok = bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_OK,
  #[doc(alias = "bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_MEMORY_ERROR
  MemoryError = bt_query_executor_add_interrupter_status_BT_QUERY_EXECUTOR_ADD_INTERRUPTER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtQueryExecutorAddInterrupterStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtQueryExecutorAddInterrupterStatus > for i32 {
  fn from(item: BtQueryExecutorAddInterrupterStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_query_executor_query_status")]
/// Represents the bt_query_executor_query_status as rust enum
pub enum BtQueryExecutorQueryStatus {
  #[doc(alias = "bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_OK")]
  /// Alias for bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_OK
  Ok = bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_OK,
  #[doc(alias = "bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_UNKNOWN_OBJECT")]
  /// Alias for bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_UNKNOWN_OBJECT
  UnknownObject = bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_UNKNOWN_OBJECT,
  #[doc(alias = "bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_AGAIN")]
  /// Alias for bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_AGAIN
  Again = bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_AGAIN,
  #[doc(alias = "bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_MEMORY_ERROR")]
  /// Alias for bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_MEMORY_ERROR
  MemoryError = bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_ERROR")]
  /// Alias for bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_ERROR
  Error = bt_query_executor_query_status_BT_QUERY_EXECUTOR_QUERY_STATUS_ERROR,
}
impl From< i32 > for BtQueryExecutorQueryStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtQueryExecutorQueryStatus > for i32 {
  fn from(item: BtQueryExecutorQueryStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_query_executor_set_logging_level_status")]
/// Represents the bt_query_executor_set_logging_level_status as rust enum
pub enum BtQueryExecutorSetLoggingLevelStatus {
  #[doc(alias = "bt_query_executor_set_logging_level_status_BT_QUERY_EXECUTOR_SET_LOGGING_LEVEL_STATUS_OK")]
  /// Alias for bt_query_executor_set_logging_level_status_BT_QUERY_EXECUTOR_SET_LOGGING_LEVEL_STATUS_OK
  Ok = bt_query_executor_set_logging_level_status_BT_QUERY_EXECUTOR_SET_LOGGING_LEVEL_STATUS_OK,
}
impl From< u32 > for BtQueryExecutorSetLoggingLevelStatus {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtQueryExecutorSetLoggingLevelStatus > for u32 {
  fn from(item: BtQueryExecutorSetLoggingLevelStatus) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_self_component_add_port_status")]
/// Represents the bt_self_component_add_port_status as rust enum
pub enum BtSelfComponentAddPortStatus {
  #[doc(alias = "bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_OK")]
  /// Alias for bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_OK
  Ok = bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_OK,
  #[doc(alias = "bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_MEMORY_ERROR")]
  /// Alias for bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_MEMORY_ERROR
  MemoryError = bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_ERROR")]
  /// Alias for bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_ERROR
  Error = bt_self_component_add_port_status_BT_SELF_COMPONENT_ADD_PORT_STATUS_ERROR,
}
impl From< i32 > for BtSelfComponentAddPortStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtSelfComponentAddPortStatus > for i32 {
  fn from(item: BtSelfComponentAddPortStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_stream_class_set_default_clock_class_status")]
/// Represents the bt_stream_class_set_default_clock_class_status as rust enum
pub enum BtStreamClassSetDefaultClockClassStatus {
  #[doc(alias = "bt_stream_class_set_default_clock_class_status_BT_STREAM_CLASS_SET_DEFAULT_CLOCK_CLASS_STATUS_OK")]
  /// Alias for bt_stream_class_set_default_clock_class_status_BT_STREAM_CLASS_SET_DEFAULT_CLOCK_CLASS_STATUS_OK
  Ok = bt_stream_class_set_default_clock_class_status_BT_STREAM_CLASS_SET_DEFAULT_CLOCK_CLASS_STATUS_OK,
}
impl From< u32 > for BtStreamClassSetDefaultClockClassStatus {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtStreamClassSetDefaultClockClassStatus > for u32 {
  fn from(item: BtStreamClassSetDefaultClockClassStatus) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_stream_class_set_field_class_status")]
/// Represents the bt_stream_class_set_field_class_status as rust enum
pub enum BtStreamClassSetFieldClassStatus {
  #[doc(alias = "bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_OK")]
  /// Alias for bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_OK
  Ok = bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_OK,
  #[doc(alias = "bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR")]
  /// Alias for bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR
  MemoryError = bt_stream_class_set_field_class_status_BT_STREAM_CLASS_SET_FIELD_CLASS_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtStreamClassSetFieldClassStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtStreamClassSetFieldClassStatus > for i32 {
  fn from(item: BtStreamClassSetFieldClassStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_stream_class_set_name_status")]
/// Represents the bt_stream_class_set_name_status as rust enum
pub enum BtStreamClassSetNameStatus {
  #[doc(alias = "bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_OK")]
  /// Alias for bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_OK
  Ok = bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_OK,
  #[doc(alias = "bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_MEMORY_ERROR")]
  /// Alias for bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_MEMORY_ERROR
  MemoryError = bt_stream_class_set_name_status_BT_STREAM_CLASS_SET_NAME_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtStreamClassSetNameStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtStreamClassSetNameStatus > for i32 {
  fn from(item: BtStreamClassSetNameStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_stream_set_name_status")]
/// Represents the bt_stream_set_name_status as rust enum
pub enum BtStreamSetNameStatus {
  #[doc(alias = "bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_OK")]
  /// Alias for bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_OK
  Ok = bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_OK,
  #[doc(alias = "bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_MEMORY_ERROR")]
  /// Alias for bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_MEMORY_ERROR
  MemoryError = bt_stream_set_name_status_BT_STREAM_SET_NAME_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtStreamSetNameStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtStreamSetNameStatus > for i32 {
  fn from(item: BtStreamSetNameStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_add_listener_status")]
/// Represents the bt_trace_add_listener_status as rust enum
pub enum BtTraceAddListenerStatus {
  #[doc(alias = "bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_OK")]
  /// Alias for bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_OK
  Ok = bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_OK,
  #[doc(alias = "bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_add_listener_status_BT_TRACE_ADD_LISTENER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceAddListenerStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceAddListenerStatus > for i32 {
  fn from(item: BtTraceAddListenerStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_class_add_listener_status")]
/// Represents the bt_trace_class_add_listener_status as rust enum
pub enum BtTraceClassAddListenerStatus {
  #[doc(alias = "bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_OK")]
  /// Alias for bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_OK
  Ok = bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_OK,
  #[doc(alias = "bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_class_add_listener_status_BT_TRACE_CLASS_ADD_LISTENER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceClassAddListenerStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceClassAddListenerStatus > for i32 {
  fn from(item: BtTraceClassAddListenerStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_class_remove_listener_status")]
/// Represents the bt_trace_class_remove_listener_status as rust enum
pub enum BtTraceClassRemoveListenerStatus {
  #[doc(alias = "bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_OK")]
  /// Alias for bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_OK
  Ok = bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_OK,
  #[doc(alias = "bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_class_remove_listener_status_BT_TRACE_CLASS_REMOVE_LISTENER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceClassRemoveListenerStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceClassRemoveListenerStatus > for i32 {
  fn from(item: BtTraceClassRemoveListenerStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_remove_listener_status")]
/// Represents the bt_trace_remove_listener_status as rust enum
pub enum BtTraceRemoveListenerStatus {
  #[doc(alias = "bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_OK")]
  /// Alias for bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_OK
  Ok = bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_OK,
  #[doc(alias = "bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_remove_listener_status_BT_TRACE_REMOVE_LISTENER_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceRemoveListenerStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceRemoveListenerStatus > for i32 {
  fn from(item: BtTraceRemoveListenerStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_set_environment_entry_status")]
/// Represents the bt_trace_set_environment_entry_status as rust enum
pub enum BtTraceSetEnvironmentEntryStatus {
  #[doc(alias = "bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_OK")]
  /// Alias for bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_OK
  Ok = bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_OK,
  #[doc(alias = "bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_set_environment_entry_status_BT_TRACE_SET_ENVIRONMENT_ENTRY_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceSetEnvironmentEntryStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceSetEnvironmentEntryStatus > for i32 {
  fn from(item: BtTraceSetEnvironmentEntryStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_trace_set_name_status")]
/// Represents the bt_trace_set_name_status as rust enum
pub enum BtTraceSetNameStatus {
  #[doc(alias = "bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_OK")]
  /// Alias for bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_OK
  Ok = bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_OK,
  #[doc(alias = "bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_MEMORY_ERROR")]
  /// Alias for bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_MEMORY_ERROR
  MemoryError = bt_trace_set_name_status_BT_TRACE_SET_NAME_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtTraceSetNameStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtTraceSetNameStatus > for i32 {
  fn from(item: BtTraceSetNameStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_util_clock_cycles_to_ns_from_origin_status")]
/// Represents the bt_util_clock_cycles_to_ns_from_origin_status as rust enum
pub enum BtUtilClockCyclesToNsFromOriginStatus {
  #[doc(alias = "bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK")]
  /// Alias for bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK
  Ok = bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OK,
  #[doc(alias = "bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR")]
  /// Alias for bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR
  OverflowError = bt_util_clock_cycles_to_ns_from_origin_status_BT_UTIL_CLOCK_CYCLES_TO_NS_FROM_ORIGIN_STATUS_OVERFLOW_ERROR,
}
impl From< i32 > for BtUtilClockCyclesToNsFromOriginStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtUtilClockCyclesToNsFromOriginStatus > for i32 {
  fn from(item: BtUtilClockCyclesToNsFromOriginStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_array_append_element_status")]
/// Represents the bt_value_array_append_element_status as rust enum
pub enum BtValueArrayAppendElementStatus {
  #[doc(alias = "bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_OK")]
  /// Alias for bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_OK
  Ok = bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_OK,
  #[doc(alias = "bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_MEMORY_ERROR
  MemoryError = bt_value_array_append_element_status_BT_VALUE_ARRAY_APPEND_ELEMENT_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueArrayAppendElementStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueArrayAppendElementStatus > for i32 {
  fn from(item: BtValueArrayAppendElementStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_array_set_element_by_index_status")]
/// Represents the bt_value_array_set_element_by_index_status as rust enum
pub enum BtValueArraySetElementByIndexStatus {
  #[doc(alias = "bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_OK")]
  /// Alias for bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_OK
  Ok = bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_OK,
  #[doc(alias = "bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_MEMORY_ERROR
  MemoryError = bt_value_array_set_element_by_index_status_BT_VALUE_ARRAY_SET_ELEMENT_BY_INDEX_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueArraySetElementByIndexStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueArraySetElementByIndexStatus > for i32 {
  fn from(item: BtValueArraySetElementByIndexStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_copy_status")]
/// Represents the bt_value_copy_status as rust enum
pub enum BtValueCopyStatus {
  #[doc(alias = "bt_value_copy_status_BT_VALUE_COPY_STATUS_OK")]
  /// Alias for bt_value_copy_status_BT_VALUE_COPY_STATUS_OK
  Ok = bt_value_copy_status_BT_VALUE_COPY_STATUS_OK,
  #[doc(alias = "bt_value_copy_status_BT_VALUE_COPY_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_copy_status_BT_VALUE_COPY_STATUS_MEMORY_ERROR
  MemoryError = bt_value_copy_status_BT_VALUE_COPY_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueCopyStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueCopyStatus > for i32 {
  fn from(item: BtValueCopyStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_extend_status")]
/// Represents the bt_value_map_extend_status as rust enum
pub enum BtValueMapExtendStatus {
  #[doc(alias = "bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_OK")]
  /// Alias for bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_OK
  Ok = bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_OK,
  #[doc(alias = "bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_extend_status_BT_VALUE_MAP_EXTEND_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueMapExtendStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapExtendStatus > for i32 {
  fn from(item: BtValueMapExtendStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_foreach_entry_const_func_status")]
/// Represents the bt_value_map_foreach_entry_const_func_status as rust enum
pub enum BtValueMapForeachEntryConstFuncStatus {
  #[doc(alias = "bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_OK")]
  /// Alias for bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_OK
  Ok = bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_OK,
  #[doc(alias = "bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_INTERRUPT")]
  /// Alias for bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_INTERRUPT
  Interrupt = bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_INTERRUPT,
  #[doc(alias = "bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_ERROR")]
  /// Alias for bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_ERROR
  Error = bt_value_map_foreach_entry_const_func_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtValueMapForeachEntryConstFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapForeachEntryConstFuncStatus > for i32 {
  fn from(item: BtValueMapForeachEntryConstFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_foreach_entry_const_status")]
/// Represents the bt_value_map_foreach_entry_const_status as rust enum
pub enum BtValueMapForeachEntryConstStatus {
  #[doc(alias = "bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_OK")]
  /// Alias for bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_OK
  Ok = bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_OK,
  #[doc(alias = "bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_INTERRUPTED")]
  /// Alias for bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_INTERRUPTED
  Interrupted = bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_INTERRUPTED,
  #[doc(alias = "bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_USER_ERROR")]
  /// Alias for bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_USER_ERROR
  UserError = bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_USER_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_ERROR")]
  /// Alias for bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_ERROR
  Error = bt_value_map_foreach_entry_const_status_BT_VALUE_MAP_FOREACH_ENTRY_CONST_STATUS_ERROR,
}
impl From< i32 > for BtValueMapForeachEntryConstStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapForeachEntryConstStatus > for i32 {
  fn from(item: BtValueMapForeachEntryConstStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_foreach_entry_func_status")]
/// Represents the bt_value_map_foreach_entry_func_status as rust enum
pub enum BtValueMapForeachEntryFuncStatus {
  #[doc(alias = "bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_OK")]
  /// Alias for bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_OK
  Ok = bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_OK,
  #[doc(alias = "bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_INTERRUPT")]
  /// Alias for bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_INTERRUPT
  Interrupt = bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_INTERRUPT,
  #[doc(alias = "bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_ERROR")]
  /// Alias for bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_ERROR
  Error = bt_value_map_foreach_entry_func_status_BT_VALUE_MAP_FOREACH_ENTRY_FUNC_STATUS_ERROR,
}
impl From< i32 > for BtValueMapForeachEntryFuncStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapForeachEntryFuncStatus > for i32 {
  fn from(item: BtValueMapForeachEntryFuncStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_foreach_entry_status")]
/// Represents the bt_value_map_foreach_entry_status as rust enum
pub enum BtValueMapForeachEntryStatus {
  #[doc(alias = "bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_OK")]
  /// Alias for bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_OK
  Ok = bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_OK,
  #[doc(alias = "bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_INTERRUPTED")]
  /// Alias for bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_INTERRUPTED
  Interrupted = bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_INTERRUPTED,
  #[doc(alias = "bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_USER_ERROR")]
  /// Alias for bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_USER_ERROR
  UserError = bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_USER_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_MEMORY_ERROR,
  #[doc(alias = "bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_ERROR")]
  /// Alias for bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_ERROR
  Error = bt_value_map_foreach_entry_status_BT_VALUE_MAP_FOREACH_ENTRY_STATUS_ERROR,
}
impl From< i32 > for BtValueMapForeachEntryStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapForeachEntryStatus > for i32 {
  fn from(item: BtValueMapForeachEntryStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_map_insert_entry_status")]
/// Represents the bt_value_map_insert_entry_status as rust enum
pub enum BtValueMapInsertEntryStatus {
  #[doc(alias = "bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_OK")]
  /// Alias for bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_OK
  Ok = bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_OK,
  #[doc(alias = "bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_MEMORY_ERROR
  MemoryError = bt_value_map_insert_entry_status_BT_VALUE_MAP_INSERT_ENTRY_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueMapInsertEntryStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueMapInsertEntryStatus > for i32 {
  fn from(item: BtValueMapInsertEntryStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(i32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_string_set_status")]
/// Represents the bt_value_string_set_status as rust enum
pub enum BtValueStringSetStatus {
  #[doc(alias = "bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_OK")]
  /// Alias for bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_OK
  Ok = bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_OK,
  #[doc(alias = "bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_MEMORY_ERROR")]
  /// Alias for bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_MEMORY_ERROR
  MemoryError = bt_value_string_set_status_BT_VALUE_STRING_SET_STATUS_MEMORY_ERROR,
}
impl From< i32 > for BtValueStringSetStatus {
  fn from(item: i32) -> Self {
    num::FromPrimitive::from_i32(item).unwrap()
  }
}
impl From< BtValueStringSetStatus > for i32 {
  fn from(item: BtValueStringSetStatus) -> Self {
    num::ToPrimitive::to_i32(&item).unwrap()
  }
}


#[repr(u32)]
#[derive(FromPrimitive, ToPrimitive, Debug, PartialEq, PartialOrd, Copy, Clone)]
#[doc(alias = "bt_value_type")]
/// Represents the bt_value_type as rust enum
pub enum BtValueType {
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_NULL")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_NULL
  Null = bt_value_type_BT_VALUE_TYPE_NULL,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_BOOL")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_BOOL
  Bool = bt_value_type_BT_VALUE_TYPE_BOOL,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_INTEGER")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_INTEGER
  Integer = bt_value_type_BT_VALUE_TYPE_INTEGER,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_UNSIGNED_INTEGER")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_UNSIGNED_INTEGER
  UnsignedInteger = bt_value_type_BT_VALUE_TYPE_UNSIGNED_INTEGER,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_SIGNED_INTEGER")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_SIGNED_INTEGER
  SignedInteger = bt_value_type_BT_VALUE_TYPE_SIGNED_INTEGER,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_REAL")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_REAL
  Real = bt_value_type_BT_VALUE_TYPE_REAL,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_STRING")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_STRING
  String = bt_value_type_BT_VALUE_TYPE_STRING,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_ARRAY")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_ARRAY
  Array = bt_value_type_BT_VALUE_TYPE_ARRAY,
  #[doc(alias = "bt_value_type_BT_VALUE_TYPE_MAP")]
  /// Alias for bt_value_type_BT_VALUE_TYPE_MAP
  Map = bt_value_type_BT_VALUE_TYPE_MAP,
}
impl From< u32 > for BtValueType {
  fn from(item: u32) -> Self {
    num::FromPrimitive::from_u32(item).unwrap()
  }
}
impl From< BtValueType > for u32 {
  fn from(item: BtValueType) -> Self {
    num::ToPrimitive::to_u32(&item).unwrap()
  }
}

/// Wraps all methods related to bt_clock_class, but the pointer is const
pub struct BtClockClassConst {
    ptr: *const bt_clock_class
}
impl BtClockClassConst {
    /// Generate a BtClockClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtClockClassConst {
        BtClockClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtClockClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_clock_class) -> BtClockClassConst {
        assert!(!ptr.is_null());
        BtClockClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_clock_class_get_frequency")]
  ///Calls bt_clock_class_get_frequency
  pub fn get_frequency(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_frequency(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_get_offset")]
  ///Calls bt_clock_class_get_offset
  pub unsafe fn get_offset(&self, offset_seconds: *mut i64, offset_cycles: *mut u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_offset(self.ptr, offset_seconds, offset_cycles) }
  }

  #[doc(alias = "bt_clock_class_get_precision")]
  ///Calls bt_clock_class_get_precision
  pub fn get_precision(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_precision(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_origin_is_unix_epoch")]
  ///Calls bt_clock_class_origin_is_unix_epoch
  pub fn origin_is_unix_epoch(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_clock_class_origin_is_unix_epoch(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_clock_class_get_name")]
  ///Calls bt_clock_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_clock_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_clock_class_get_description")]
  ///Calls bt_clock_class_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_clock_class_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_clock_class_get_uuid")]
  ///Calls bt_clock_class_get_uuid
  pub fn get_uuid(&self) -> bt_uuid {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_uuid(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_borrow_user_attributes_const")]
  ///Calls bt_clock_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_clock_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_clock_class_cycles_to_ns_from_origin")]
  ///Calls bt_clock_class_cycles_to_ns_from_origin
  pub unsafe fn cycles_to_ns_from_origin(&self, value: u64, ns_from_origin: *mut i64) -> BtClockClassCyclesToNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_class_cycles_to_ns_from_origin(self.ptr, value, ns_from_origin)).unwrap() }
  }

  #[doc(alias = "bt_clock_class_get_ref")]
  ///Calls bt_clock_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_put_ref")]
  ///Calls bt_clock_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_clock_class
pub struct BtClockClass {
    ptr: *mut bt_clock_class
}
impl BtClockClass {
    /// Generate a BtClockClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtClockClass {
        BtClockClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtClockClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_clock_class) -> BtClockClass {
        BtClockClass { ptr }
    }
    /// Create the equivalent BtClockClassConst version of this object.
    pub fn as_const(&mut self) -> BtClockClassConst {
      BtClockClassConst { ptr: self.ptr }
    }
    /// Generate a BtClockClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_clock_class_create")]
  ///Calls bt_clock_class_create
  pub unsafe fn create(self_component: &BtSelfComponent) -> BtClockClass {
    unsafe { BtClockClass{ ptr:bt_clock_class_create(self_component.ptr)} }
  }

  #[doc(alias = "bt_clock_class_set_frequency")]
  ///Calls bt_clock_class_set_frequency
  pub fn set_frequency(&mut self, frequency: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_frequency(self.ptr, frequency) }
  }

  #[doc(alias = "bt_clock_class_get_frequency")]
  ///Calls bt_clock_class_get_frequency
  pub fn get_frequency(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_frequency(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_set_offset")]
  ///Calls bt_clock_class_set_offset
  pub fn set_offset(&mut self, offset_seconds: i64, offset_cycles: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_offset(self.ptr, offset_seconds, offset_cycles) }
  }

  #[doc(alias = "bt_clock_class_get_offset")]
  ///Calls bt_clock_class_get_offset
  pub unsafe fn get_offset(&self, offset_seconds: *mut i64, offset_cycles: *mut u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_offset(self.ptr, offset_seconds, offset_cycles) }
  }

  #[doc(alias = "bt_clock_class_set_precision")]
  ///Calls bt_clock_class_set_precision
  pub fn set_precision(&mut self, precision: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_precision(self.ptr, precision) }
  }

  #[doc(alias = "bt_clock_class_get_precision")]
  ///Calls bt_clock_class_get_precision
  pub fn get_precision(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_precision(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_set_origin_is_unix_epoch")]
  ///Calls bt_clock_class_set_origin_is_unix_epoch
  pub fn set_origin_is_unix_epoch(&mut self, origin_is_unix_epoch: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_origin_is_unix_epoch(self.ptr, if origin_is_unix_epoch { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_clock_class_origin_is_unix_epoch")]
  ///Calls bt_clock_class_origin_is_unix_epoch
  pub fn origin_is_unix_epoch(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_clock_class_origin_is_unix_epoch(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_clock_class_set_name")]
  ///Calls bt_clock_class_set_name
  pub unsafe fn set_name(&mut self, name: &str) -> BtClockClassSetNameStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_class_set_name(self.ptr, name.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_clock_class_get_name")]
  ///Calls bt_clock_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_clock_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_clock_class_set_description")]
  ///Calls bt_clock_class_set_description
  pub unsafe fn set_description(&mut self, description: &str) -> BtClockClassSetDescriptionStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_class_set_description(self.ptr, description.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_clock_class_get_description")]
  ///Calls bt_clock_class_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_clock_class_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_clock_class_set_uuid")]
  ///Calls bt_clock_class_set_uuid
  pub unsafe fn set_uuid(&mut self, uuid: bt_uuid)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_uuid(self.ptr, uuid) }
  }

  #[doc(alias = "bt_clock_class_get_uuid")]
  ///Calls bt_clock_class_get_uuid
  pub fn get_uuid(&self) -> bt_uuid {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_uuid(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_set_user_attributes")]
  ///Calls bt_clock_class_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_clock_class_borrow_user_attributes")]
  ///Calls bt_clock_class_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_clock_class_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_clock_class_borrow_user_attributes_const")]
  ///Calls bt_clock_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_clock_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_clock_class_cycles_to_ns_from_origin")]
  ///Calls bt_clock_class_cycles_to_ns_from_origin
  pub unsafe fn cycles_to_ns_from_origin(&self, value: u64, ns_from_origin: *mut i64) -> BtClockClassCyclesToNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_class_cycles_to_ns_from_origin(self.ptr, value, ns_from_origin)).unwrap() }
  }

  #[doc(alias = "bt_clock_class_get_ref")]
  ///Calls bt_clock_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_clock_class_put_ref")]
  ///Calls bt_clock_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_clock_snapshot, but the pointer is const
pub struct BtClockSnapshotConst {
    ptr: *const bt_clock_snapshot
}
impl BtClockSnapshotConst {
    /// Generate a BtClockSnapshotConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtClockSnapshotConst {
        BtClockSnapshotConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtClockSnapshotConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_clock_snapshot) -> BtClockSnapshotConst {
        assert!(!ptr.is_null());
        BtClockSnapshotConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_clock_snapshot_borrow_clock_class_const")]
  ///Calls bt_clock_snapshot_borrow_clock_class_const
  pub fn borrow_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_clock_snapshot_borrow_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_clock_snapshot_get_value")]
  ///Calls bt_clock_snapshot_get_value
  pub fn get_value(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_snapshot_get_value(self.ptr) }
  }

  #[doc(alias = "bt_clock_snapshot_get_ns_from_origin")]
  ///Calls bt_clock_snapshot_get_ns_from_origin
  pub unsafe fn get_ns_from_origin(&self, ns_from_origin: *mut i64) -> BtClockSnapshotGetNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_snapshot_get_ns_from_origin(self.ptr, ns_from_origin)).unwrap() }
  }

}/// Wraps all methods related to bt_clock_snapshot
pub struct BtClockSnapshot {
    ptr: *mut bt_clock_snapshot
}
impl BtClockSnapshot {
    /// Generate a BtClockSnapshotConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtClockSnapshot {
        BtClockSnapshot { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtClockSnapshotConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_clock_snapshot) -> BtClockSnapshot {
        BtClockSnapshot { ptr }
    }
    /// Create the equivalent BtClockSnapshotConst version of this object.
    pub fn as_const(&mut self) -> BtClockSnapshotConst {
      BtClockSnapshotConst { ptr: self.ptr }
    }
    /// Generate a BtClockSnapshotConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_clock_snapshot_borrow_clock_class_const")]
  ///Calls bt_clock_snapshot_borrow_clock_class_const
  pub fn borrow_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_clock_snapshot_borrow_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_clock_snapshot_get_value")]
  ///Calls bt_clock_snapshot_get_value
  pub fn get_value(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_clock_snapshot_get_value(self.ptr) }
  }

  #[doc(alias = "bt_clock_snapshot_get_ns_from_origin")]
  ///Calls bt_clock_snapshot_get_ns_from_origin
  pub unsafe fn get_ns_from_origin(&self, ns_from_origin: *mut i64) -> BtClockSnapshotGetNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_clock_snapshot_get_ns_from_origin(self.ptr, ns_from_origin)).unwrap() }
  }

}/// Wraps all methods related to bt_component, but the pointer is const
pub struct BtComponentConst {
    ptr: *const bt_component
}
impl BtComponentConst {
    /// Generate a BtComponentConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentConst {
        BtComponentConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component) -> BtComponentConst {
        assert!(!ptr.is_null());
        BtComponentConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_get_class_type")]
  ///Calls bt_component_get_class_type
  pub fn get_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_get_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_borrow_class_const")]
  ///Calls bt_component_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_get_name")]
  ///Calls bt_component_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_component_get_logging_level")]
  ///Calls bt_component_get_logging_level
  pub fn get_logging_level(&self) -> BtLoggingLevel {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_get_logging_level(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_get_ref")]
  ///Calls bt_component_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_put_ref")]
  ///Calls bt_component_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_is_source_inline")]
  ///Calls bt_component_is_source_inline
  pub fn is_source_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_source_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_is_filter_inline")]
  ///Calls bt_component_is_filter_inline
  pub fn is_filter_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_filter_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_is_sink_inline")]
  ///Calls bt_component_is_sink_inline
  pub fn is_sink_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_sink_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_component
pub struct BtComponent {
    ptr: *mut bt_component
}
impl BtComponent {
    /// Generate a BtComponentConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponent {
        BtComponent { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component) -> BtComponent {
        BtComponent { ptr }
    }
    /// Create the equivalent BtComponentConst version of this object.
    pub fn as_const(&mut self) -> BtComponentConst {
      BtComponentConst { ptr: self.ptr }
    }
    /// Generate a BtComponentConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_get_class_type")]
  ///Calls bt_component_get_class_type
  pub fn get_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_get_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_borrow_class_const")]
  ///Calls bt_component_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_get_name")]
  ///Calls bt_component_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_component_get_logging_level")]
  ///Calls bt_component_get_logging_level
  pub fn get_logging_level(&self) -> BtLoggingLevel {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_get_logging_level(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_get_ref")]
  ///Calls bt_component_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_put_ref")]
  ///Calls bt_component_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_is_source_inline")]
  ///Calls bt_component_is_source_inline
  pub fn is_source_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_source_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_is_filter_inline")]
  ///Calls bt_component_is_filter_inline
  pub fn is_filter_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_filter_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_is_sink_inline")]
  ///Calls bt_component_is_sink_inline
  pub fn is_sink_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_is_sink_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_component_class, but the pointer is const
pub struct BtComponentClassConst {
    ptr: *const bt_component_class
}
impl BtComponentClassConst {
    /// Generate a BtComponentClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassConst {
        BtComponentClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_class) -> BtComponentClassConst {
        assert!(!ptr.is_null());
        BtComponentClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_get_type")]
  ///Calls bt_component_class_get_type
  pub fn get_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_class_get_name")]
  ///Calls bt_component_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_description")]
  ///Calls bt_component_class_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_help")]
  ///Calls bt_component_class_get_help
  pub fn get_help(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_help(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_ref")]
  ///Calls bt_component_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_put_ref")]
  ///Calls bt_component_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_is_source_inline")]
  ///Calls bt_component_class_is_source_inline
  pub fn is_source_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_source_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_class_is_filter_inline")]
  ///Calls bt_component_class_is_filter_inline
  pub fn is_filter_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_filter_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_class_is_sink_inline")]
  ///Calls bt_component_class_is_sink_inline
  pub fn is_sink_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_sink_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_component_class
pub struct BtComponentClass {
    ptr: *mut bt_component_class
}
impl BtComponentClass {
    /// Generate a BtComponentClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClass {
        BtComponentClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_class) -> BtComponentClass {
        BtComponentClass { ptr }
    }
    /// Create the equivalent BtComponentClassConst version of this object.
    pub fn as_const(&mut self) -> BtComponentClassConst {
      BtComponentClassConst { ptr: self.ptr }
    }
    /// Generate a BtComponentClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_get_type")]
  ///Calls bt_component_class_get_type
  pub fn get_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_class_get_name")]
  ///Calls bt_component_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_description")]
  ///Calls bt_component_class_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_help")]
  ///Calls bt_component_class_get_help
  pub fn get_help(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_component_class_get_help(self.ptr)) }
  }

  #[doc(alias = "bt_component_class_get_ref")]
  ///Calls bt_component_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_put_ref")]
  ///Calls bt_component_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_set_description")]
  ///Calls bt_component_class_set_description
  pub unsafe fn set_description(&mut self, description: &str) -> BtComponentClassSetDescriptionStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_component_class_set_description(self.ptr, description.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_component_class_set_help")]
  ///Calls bt_component_class_set_help
  pub unsafe fn set_help(&mut self, help_text: &str) -> BtComponentClassSetHelpStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_component_class_set_help(self.ptr, help_text.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_component_class_is_source_inline")]
  ///Calls bt_component_class_is_source_inline
  pub fn is_source_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_source_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_class_is_filter_inline")]
  ///Calls bt_component_class_is_filter_inline
  pub fn is_filter_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_filter_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_component_class_is_sink_inline")]
  ///Calls bt_component_class_is_sink_inline
  pub fn is_sink_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_component_class_is_sink_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_component_class_filter, but the pointer is const
pub struct BtComponentClassFilterConst {
    ptr: *const bt_component_class_filter
}
impl BtComponentClassFilterConst {
    /// Generate a BtComponentClassFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassFilterConst {
        BtComponentClassFilterConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_class_filter) -> BtComponentClassFilterConst {
        assert!(!ptr.is_null());
        BtComponentClassFilterConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_filter_get_ref")]
  ///Calls bt_component_class_filter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_filter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_filter_put_ref")]
  ///Calls bt_component_class_filter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_filter_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_filter_as_component_class_const_inline")]
  ///Calls bt_component_class_filter_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_filter_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_class_filter
pub struct BtComponentClassFilter {
    ptr: *mut bt_component_class_filter
}
impl BtComponentClassFilter {
    /// Generate a BtComponentClassFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassFilter {
        BtComponentClassFilter { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_class_filter) -> BtComponentClassFilter {
        BtComponentClassFilter { ptr }
    }
    /// Create the equivalent BtComponentClassFilterConst version of this object.
    pub fn as_const(&mut self) -> BtComponentClassFilterConst {
      BtComponentClassFilterConst { ptr: self.ptr }
    }
    /// Generate a BtComponentClassFilterConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_filter_get_ref")]
  ///Calls bt_component_class_filter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_filter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_filter_put_ref")]
  ///Calls bt_component_class_filter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_filter_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_filter_create")]
  ///Calls bt_component_class_filter_create
  pub unsafe fn create(name: &str, message_iterator_class: &BtMessageIteratorClass) -> BtComponentClassFilter {
    unsafe { BtComponentClassFilter{ ptr:bt_component_class_filter_create(name.as_ptr(), message_iterator_class.ptr)} }
  }

  #[doc(alias = "bt_component_class_filter_set_finalize_method")]
  ///Calls bt_component_class_filter_set_finalize_method
  pub fn set_finalize_method(&mut self, method: bt_component_class_filter_finalize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_finalize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_set_get_supported_mip_versions_method")]
  ///Calls bt_component_class_filter_set_get_supported_mip_versions_method
  pub fn set_get_supported_mip_versions_method(&mut self, method: bt_component_class_filter_get_supported_mip_versions_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_get_supported_mip_versions_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_set_initialize_method")]
  ///Calls bt_component_class_filter_set_initialize_method
  pub fn set_initialize_method(&mut self, method: bt_component_class_filter_initialize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_initialize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_set_input_port_connected_method")]
  ///Calls bt_component_class_filter_set_input_port_connected_method
  pub fn set_input_port_connected_method(&mut self, method: bt_component_class_filter_input_port_connected_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_input_port_connected_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_set_output_port_connected_method")]
  ///Calls bt_component_class_filter_set_output_port_connected_method
  pub fn set_output_port_connected_method(&mut self, method: bt_component_class_filter_output_port_connected_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_output_port_connected_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_set_query_method")]
  ///Calls bt_component_class_filter_set_query_method
  pub fn set_query_method(&mut self, method: bt_component_class_filter_query_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_filter_set_query_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_filter_as_component_class_inline")]
  ///Calls bt_component_class_filter_as_component_class_inline
  pub fn as_component_class_inline(&mut self) -> BtComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClass{ ptr:bt_component_class_filter_as_component_class_inline(self.ptr)} }
  }

  #[doc(alias = "bt_component_class_filter_as_component_class_const_inline")]
  ///Calls bt_component_class_filter_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_filter_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_class_sink, but the pointer is const
pub struct BtComponentClassSinkConst {
    ptr: *const bt_component_class_sink
}
impl BtComponentClassSinkConst {
    /// Generate a BtComponentClassSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassSinkConst {
        BtComponentClassSinkConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_class_sink) -> BtComponentClassSinkConst {
        assert!(!ptr.is_null());
        BtComponentClassSinkConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_sink_get_ref")]
  ///Calls bt_component_class_sink_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_sink_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_sink_put_ref")]
  ///Calls bt_component_class_sink_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_sink_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_sink_as_component_class_const_inline")]
  ///Calls bt_component_class_sink_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_sink_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_class_sink
pub struct BtComponentClassSink {
    ptr: *mut bt_component_class_sink
}
impl BtComponentClassSink {
    /// Generate a BtComponentClassSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassSink {
        BtComponentClassSink { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_class_sink) -> BtComponentClassSink {
        BtComponentClassSink { ptr }
    }
    /// Create the equivalent BtComponentClassSinkConst version of this object.
    pub fn as_const(&mut self) -> BtComponentClassSinkConst {
      BtComponentClassSinkConst { ptr: self.ptr }
    }
    /// Generate a BtComponentClassSinkConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_sink_get_ref")]
  ///Calls bt_component_class_sink_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_sink_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_sink_put_ref")]
  ///Calls bt_component_class_sink_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_sink_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_sink_create")]
  ///Calls bt_component_class_sink_create
  pub unsafe fn create(name: &str, consume_method: bt_component_class_sink_consume_method) -> BtComponentClassSink {
    unsafe { BtComponentClassSink{ ptr:bt_component_class_sink_create(name.as_ptr(), consume_method)} }
  }

  #[doc(alias = "bt_component_class_sink_set_finalize_method")]
  ///Calls bt_component_class_sink_set_finalize_method
  pub fn set_finalize_method(&mut self, method: bt_component_class_sink_finalize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_finalize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_set_get_supported_mip_versions_method")]
  ///Calls bt_component_class_sink_set_get_supported_mip_versions_method
  pub fn set_get_supported_mip_versions_method(&mut self, method: bt_component_class_sink_get_supported_mip_versions_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_get_supported_mip_versions_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_set_graph_is_configured_method")]
  ///Calls bt_component_class_sink_set_graph_is_configured_method
  pub fn set_graph_is_configured_method(&mut self, method: bt_component_class_sink_graph_is_configured_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_graph_is_configured_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_set_initialize_method")]
  ///Calls bt_component_class_sink_set_initialize_method
  pub fn set_initialize_method(&mut self, method: bt_component_class_sink_initialize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_initialize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_set_input_port_connected_method")]
  ///Calls bt_component_class_sink_set_input_port_connected_method
  pub fn set_input_port_connected_method(&mut self, method: bt_component_class_sink_input_port_connected_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_input_port_connected_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_set_query_method")]
  ///Calls bt_component_class_sink_set_query_method
  pub fn set_query_method(&mut self, method: bt_component_class_sink_query_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_sink_set_query_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_sink_as_component_class_inline")]
  ///Calls bt_component_class_sink_as_component_class_inline
  pub fn as_component_class_inline(&mut self) -> BtComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClass{ ptr:bt_component_class_sink_as_component_class_inline(self.ptr)} }
  }

  #[doc(alias = "bt_component_class_sink_as_component_class_const_inline")]
  ///Calls bt_component_class_sink_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_sink_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_class_source, but the pointer is const
pub struct BtComponentClassSourceConst {
    ptr: *const bt_component_class_source
}
impl BtComponentClassSourceConst {
    /// Generate a BtComponentClassSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassSourceConst {
        BtComponentClassSourceConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_class_source) -> BtComponentClassSourceConst {
        assert!(!ptr.is_null());
        BtComponentClassSourceConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_source_get_ref")]
  ///Calls bt_component_class_source_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_source_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_source_put_ref")]
  ///Calls bt_component_class_source_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_source_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_source_as_component_class_const_inline")]
  ///Calls bt_component_class_source_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_source_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_class_source
pub struct BtComponentClassSource {
    ptr: *mut bt_component_class_source
}
impl BtComponentClassSource {
    /// Generate a BtComponentClassSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentClassSource {
        BtComponentClassSource { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentClassSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_class_source) -> BtComponentClassSource {
        BtComponentClassSource { ptr }
    }
    /// Create the equivalent BtComponentClassSourceConst version of this object.
    pub fn as_const(&mut self) -> BtComponentClassSourceConst {
      BtComponentClassSourceConst { ptr: self.ptr }
    }
    /// Generate a BtComponentClassSourceConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_class_source_get_ref")]
  ///Calls bt_component_class_source_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_source_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_source_put_ref")]
  ///Calls bt_component_class_source_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_class_source_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_class_source_create")]
  ///Calls bt_component_class_source_create
  pub unsafe fn create(name: &str, message_iterator_class: &BtMessageIteratorClass) -> BtComponentClassSource {
    unsafe { BtComponentClassSource{ ptr:bt_component_class_source_create(name.as_ptr(), message_iterator_class.ptr)} }
  }

  #[doc(alias = "bt_component_class_source_set_finalize_method")]
  ///Calls bt_component_class_source_set_finalize_method
  pub fn set_finalize_method(&mut self, method: bt_component_class_source_finalize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_source_set_finalize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_source_set_get_supported_mip_versions_method")]
  ///Calls bt_component_class_source_set_get_supported_mip_versions_method
  pub fn set_get_supported_mip_versions_method(&mut self, method: bt_component_class_source_get_supported_mip_versions_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_source_set_get_supported_mip_versions_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_source_set_initialize_method")]
  ///Calls bt_component_class_source_set_initialize_method
  pub fn set_initialize_method(&mut self, method: bt_component_class_source_initialize_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_source_set_initialize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_source_set_output_port_connected_method")]
  ///Calls bt_component_class_source_set_output_port_connected_method
  pub fn set_output_port_connected_method(&mut self, method: bt_component_class_source_output_port_connected_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_source_set_output_port_connected_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_source_set_query_method")]
  ///Calls bt_component_class_source_set_query_method
  pub fn set_query_method(&mut self, method: bt_component_class_source_query_method) -> BtComponentClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_component_class_source_set_query_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_component_class_source_as_component_class_inline")]
  ///Calls bt_component_class_source_as_component_class_inline
  pub fn as_component_class_inline(&mut self) -> BtComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClass{ ptr:bt_component_class_source_as_component_class_inline(self.ptr)} }
  }

  #[doc(alias = "bt_component_class_source_as_component_class_const_inline")]
  ///Calls bt_component_class_source_as_component_class_const_inline
  pub fn as_component_class_const_inline(&self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_component_class_source_as_component_class_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_descriptor_set, but the pointer is const
pub struct BtComponentDescriptorSetConst {
    ptr: *const bt_component_descriptor_set
}
impl BtComponentDescriptorSetConst {
    /// Generate a BtComponentDescriptorSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentDescriptorSetConst {
        BtComponentDescriptorSetConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentDescriptorSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_descriptor_set) -> BtComponentDescriptorSetConst {
        assert!(!ptr.is_null());
        BtComponentDescriptorSetConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_descriptor_set_get_ref")]
  ///Calls bt_component_descriptor_set_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_descriptor_set_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_descriptor_set_put_ref")]
  ///Calls bt_component_descriptor_set_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_descriptor_set_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_component_descriptor_set
pub struct BtComponentDescriptorSet {
    ptr: *mut bt_component_descriptor_set
}
impl BtComponentDescriptorSet {
    /// Generate a BtComponentDescriptorSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentDescriptorSet {
        BtComponentDescriptorSet { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentDescriptorSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_descriptor_set) -> BtComponentDescriptorSet {
        BtComponentDescriptorSet { ptr }
    }
    /// Create the equivalent BtComponentDescriptorSetConst version of this object.
    pub fn as_const(&mut self) -> BtComponentDescriptorSetConst {
      BtComponentDescriptorSetConst { ptr: self.ptr }
    }
    /// Generate a BtComponentDescriptorSetConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_descriptor_set_create")]
  ///Calls bt_component_descriptor_set_create
  pub fn create() -> BtComponentDescriptorSet {
    unsafe { BtComponentDescriptorSet{ ptr:bt_component_descriptor_set_create()} }
  }

  #[doc(alias = "bt_component_descriptor_set_add_descriptor")]
  ///Calls bt_component_descriptor_set_add_descriptor
  pub unsafe fn add_descriptor(&mut self, component_class: &BtComponentClassConst, params: &BtValueConst) -> BtComponentDescriptorSetAddDescriptorStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_component_descriptor_set_add_descriptor(self.ptr, component_class.ptr, params.ptr)).unwrap() }
  }

  #[doc(alias = "bt_component_descriptor_set_add_descriptor_with_initialize_method_data")]
  ///Calls bt_component_descriptor_set_add_descriptor_with_initialize_method_data
  pub unsafe fn add_descriptor_with_initialize_method_data(&mut self, component_class: &BtComponentClassConst, params: &BtValueConst, initialize_method_data: *mut ::std::os::raw::c_void) -> BtComponentDescriptorSetAddDescriptorStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_component_descriptor_set_add_descriptor_with_initialize_method_data(self.ptr, component_class.ptr, params.ptr, initialize_method_data)).unwrap() }
  }

  #[doc(alias = "bt_component_descriptor_set_get_ref")]
  ///Calls bt_component_descriptor_set_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_descriptor_set_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_descriptor_set_put_ref")]
  ///Calls bt_component_descriptor_set_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_descriptor_set_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_component_filter, but the pointer is const
pub struct BtComponentFilterConst {
    ptr: *const bt_component_filter
}
impl BtComponentFilterConst {
    /// Generate a BtComponentFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentFilterConst {
        BtComponentFilterConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_filter) -> BtComponentFilterConst {
        assert!(!ptr.is_null());
        BtComponentFilterConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_filter_borrow_class_const")]
  ///Calls bt_component_filter_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_component_filter_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_filter_get_input_port_count")]
  ///Calls bt_component_filter_get_input_port_count
  pub fn get_input_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_input_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_borrow_input_port_by_index_const")]
  ///Calls bt_component_filter_borrow_input_port_by_index_const
  pub fn borrow_input_port_by_index_const(&self, index: u64) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_filter_borrow_input_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_filter_borrow_input_port_by_name_const")]
  ///Calls bt_component_filter_borrow_input_port_by_name_const
  pub unsafe fn borrow_input_port_by_name_const(&self, name: &str) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_filter_borrow_input_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_filter_get_output_port_count")]
  ///Calls bt_component_filter_get_output_port_count
  pub fn get_output_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_output_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_borrow_output_port_by_index_const")]
  ///Calls bt_component_filter_borrow_output_port_by_index_const
  pub fn borrow_output_port_by_index_const(&self, index: u64) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_filter_borrow_output_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_filter_borrow_output_port_by_name_const")]
  ///Calls bt_component_filter_borrow_output_port_by_name_const
  pub unsafe fn borrow_output_port_by_name_const(&self, name: &str) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_filter_borrow_output_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_filter_get_ref")]
  ///Calls bt_component_filter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_put_ref")]
  ///Calls bt_component_filter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_as_component_const_inline")]
  ///Calls bt_component_filter_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_filter_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_filter
pub struct BtComponentFilter {
    ptr: *mut bt_component_filter
}
impl BtComponentFilter {
    /// Generate a BtComponentFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentFilter {
        BtComponentFilter { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_filter) -> BtComponentFilter {
        BtComponentFilter { ptr }
    }
    /// Create the equivalent BtComponentFilterConst version of this object.
    pub fn as_const(&mut self) -> BtComponentFilterConst {
      BtComponentFilterConst { ptr: self.ptr }
    }
    /// Generate a BtComponentFilterConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_filter_borrow_class_const")]
  ///Calls bt_component_filter_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_component_filter_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_filter_get_input_port_count")]
  ///Calls bt_component_filter_get_input_port_count
  pub fn get_input_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_input_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_borrow_input_port_by_index_const")]
  ///Calls bt_component_filter_borrow_input_port_by_index_const
  pub fn borrow_input_port_by_index_const(&self, index: u64) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_filter_borrow_input_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_filter_borrow_input_port_by_name_const")]
  ///Calls bt_component_filter_borrow_input_port_by_name_const
  pub unsafe fn borrow_input_port_by_name_const(&self, name: &str) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_filter_borrow_input_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_filter_get_output_port_count")]
  ///Calls bt_component_filter_get_output_port_count
  pub fn get_output_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_output_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_borrow_output_port_by_index_const")]
  ///Calls bt_component_filter_borrow_output_port_by_index_const
  pub fn borrow_output_port_by_index_const(&self, index: u64) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_filter_borrow_output_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_filter_borrow_output_port_by_name_const")]
  ///Calls bt_component_filter_borrow_output_port_by_name_const
  pub unsafe fn borrow_output_port_by_name_const(&self, name: &str) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_filter_borrow_output_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_filter_get_ref")]
  ///Calls bt_component_filter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_put_ref")]
  ///Calls bt_component_filter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_filter_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_filter_as_component_const_inline")]
  ///Calls bt_component_filter_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_filter_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_sink, but the pointer is const
pub struct BtComponentSinkConst {
    ptr: *const bt_component_sink
}
impl BtComponentSinkConst {
    /// Generate a BtComponentSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentSinkConst {
        BtComponentSinkConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_sink) -> BtComponentSinkConst {
        assert!(!ptr.is_null());
        BtComponentSinkConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_sink_borrow_class_const")]
  ///Calls bt_component_sink_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_component_sink_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_sink_get_input_port_count")]
  ///Calls bt_component_sink_get_input_port_count
  pub fn get_input_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_get_input_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_borrow_input_port_by_index_const")]
  ///Calls bt_component_sink_borrow_input_port_by_index_const
  pub fn borrow_input_port_by_index_const(&self, index: u64) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_sink_borrow_input_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_sink_borrow_input_port_by_name_const")]
  ///Calls bt_component_sink_borrow_input_port_by_name_const
  pub unsafe fn borrow_input_port_by_name_const(&self, name: &str) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_sink_borrow_input_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_sink_get_ref")]
  ///Calls bt_component_sink_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_put_ref")]
  ///Calls bt_component_sink_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_as_component_const_inline")]
  ///Calls bt_component_sink_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_sink_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_sink
pub struct BtComponentSink {
    ptr: *mut bt_component_sink
}
impl BtComponentSink {
    /// Generate a BtComponentSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentSink {
        BtComponentSink { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_sink) -> BtComponentSink {
        BtComponentSink { ptr }
    }
    /// Create the equivalent BtComponentSinkConst version of this object.
    pub fn as_const(&mut self) -> BtComponentSinkConst {
      BtComponentSinkConst { ptr: self.ptr }
    }
    /// Generate a BtComponentSinkConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_sink_borrow_class_const")]
  ///Calls bt_component_sink_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_component_sink_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_sink_get_input_port_count")]
  ///Calls bt_component_sink_get_input_port_count
  pub fn get_input_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_get_input_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_borrow_input_port_by_index_const")]
  ///Calls bt_component_sink_borrow_input_port_by_index_const
  pub fn borrow_input_port_by_index_const(&self, index: u64) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_sink_borrow_input_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_sink_borrow_input_port_by_name_const")]
  ///Calls bt_component_sink_borrow_input_port_by_name_const
  pub unsafe fn borrow_input_port_by_name_const(&self, name: &str) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_component_sink_borrow_input_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_sink_get_ref")]
  ///Calls bt_component_sink_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_put_ref")]
  ///Calls bt_component_sink_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_sink_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_sink_as_component_const_inline")]
  ///Calls bt_component_sink_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_sink_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_source, but the pointer is const
pub struct BtComponentSourceConst {
    ptr: *const bt_component_source
}
impl BtComponentSourceConst {
    /// Generate a BtComponentSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentSourceConst {
        BtComponentSourceConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_component_source) -> BtComponentSourceConst {
        assert!(!ptr.is_null());
        BtComponentSourceConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_source_borrow_class_const")]
  ///Calls bt_component_source_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_component_source_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_source_get_output_port_count")]
  ///Calls bt_component_source_get_output_port_count
  pub fn get_output_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_get_output_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_source_borrow_output_port_by_index_const")]
  ///Calls bt_component_source_borrow_output_port_by_index_const
  pub fn borrow_output_port_by_index_const(&self, index: u64) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_source_borrow_output_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_source_borrow_output_port_by_name_const")]
  ///Calls bt_component_source_borrow_output_port_by_name_const
  pub unsafe fn borrow_output_port_by_name_const(&self, name: &str) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_source_borrow_output_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_source_get_ref")]
  ///Calls bt_component_source_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_source_put_ref")]
  ///Calls bt_component_source_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_source_as_component_const_inline")]
  ///Calls bt_component_source_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_source_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_component_source
pub struct BtComponentSource {
    ptr: *mut bt_component_source
}
impl BtComponentSource {
    /// Generate a BtComponentSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtComponentSource {
        BtComponentSource { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtComponentSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_component_source) -> BtComponentSource {
        BtComponentSource { ptr }
    }
    /// Create the equivalent BtComponentSourceConst version of this object.
    pub fn as_const(&mut self) -> BtComponentSourceConst {
      BtComponentSourceConst { ptr: self.ptr }
    }
    /// Generate a BtComponentSourceConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_component_source_borrow_class_const")]
  ///Calls bt_component_source_borrow_class_const
  pub fn borrow_class_const(&self) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_component_source_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_component_source_get_output_port_count")]
  ///Calls bt_component_source_get_output_port_count
  pub fn get_output_port_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_get_output_port_count(self.ptr) }
  }

  #[doc(alias = "bt_component_source_borrow_output_port_by_index_const")]
  ///Calls bt_component_source_borrow_output_port_by_index_const
  pub fn borrow_output_port_by_index_const(&self, index: u64) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_source_borrow_output_port_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_component_source_borrow_output_port_by_name_const")]
  ///Calls bt_component_source_borrow_output_port_by_name_const
  pub unsafe fn borrow_output_port_by_name_const(&self, name: &str) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_component_source_borrow_output_port_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_component_source_get_ref")]
  ///Calls bt_component_source_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_source_put_ref")]
  ///Calls bt_component_source_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_component_source_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_component_source_as_component_const_inline")]
  ///Calls bt_component_source_as_component_const_inline
  pub fn as_component_const_inline(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_component_source_as_component_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_connection, but the pointer is const
pub struct BtConnectionConst {
    ptr: *const bt_connection
}
impl BtConnectionConst {
    /// Generate a BtConnectionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtConnectionConst {
        BtConnectionConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtConnectionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_connection) -> BtConnectionConst {
        assert!(!ptr.is_null());
        BtConnectionConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_connection_borrow_downstream_port_const")]
  ///Calls bt_connection_borrow_downstream_port_const
  pub fn borrow_downstream_port_const(&self) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_connection_borrow_downstream_port_const(self.ptr)} }
  }

  #[doc(alias = "bt_connection_borrow_upstream_port_const")]
  ///Calls bt_connection_borrow_upstream_port_const
  pub fn borrow_upstream_port_const(&self) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_connection_borrow_upstream_port_const(self.ptr)} }
  }

  #[doc(alias = "bt_connection_get_ref")]
  ///Calls bt_connection_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_connection_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_connection_put_ref")]
  ///Calls bt_connection_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_connection_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_connection
pub struct BtConnection {
    ptr: *mut bt_connection
}
impl BtConnection {
    /// Generate a BtConnectionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtConnection {
        BtConnection { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtConnectionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_connection) -> BtConnection {
        BtConnection { ptr }
    }
    /// Create the equivalent BtConnectionConst version of this object.
    pub fn as_const(&mut self) -> BtConnectionConst {
      BtConnectionConst { ptr: self.ptr }
    }
    /// Generate a BtConnectionConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_connection_borrow_downstream_port_const")]
  ///Calls bt_connection_borrow_downstream_port_const
  pub fn borrow_downstream_port_const(&self) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_connection_borrow_downstream_port_const(self.ptr)} }
  }

  #[doc(alias = "bt_connection_borrow_upstream_port_const")]
  ///Calls bt_connection_borrow_upstream_port_const
  pub fn borrow_upstream_port_const(&self) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_connection_borrow_upstream_port_const(self.ptr)} }
  }

  #[doc(alias = "bt_connection_get_ref")]
  ///Calls bt_connection_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_connection_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_connection_put_ref")]
  ///Calls bt_connection_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_connection_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_error, but the pointer is const
pub struct BtErrorConst {
    ptr: *const bt_error
}
impl BtErrorConst {
    /// Generate a BtErrorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtErrorConst {
        BtErrorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtErrorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_error) -> BtErrorConst {
        assert!(!ptr.is_null());
        BtErrorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_error_get_cause_count")]
  ///Calls bt_error_get_cause_count
  pub fn get_cause_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_get_cause_count(self.ptr) }
  }

  #[doc(alias = "bt_error_borrow_cause_by_index")]
  ///Calls bt_error_borrow_cause_by_index
  pub fn borrow_cause_by_index(&self, index: u64) -> BtErrorCauseConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtErrorCauseConst{ ptr:bt_error_borrow_cause_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_error_release")]
  ///Calls bt_error_release
  pub fn release(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_release(self.ptr) }
  }

}/// Wraps all methods related to bt_error
pub struct BtError {
    ptr: *mut bt_error
}
impl BtError {
    /// Generate a BtErrorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtError {
        BtError { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtErrorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_error) -> BtError {
        BtError { ptr }
    }
    /// Create the equivalent BtErrorConst version of this object.
    pub fn as_const(&mut self) -> BtErrorConst {
      BtErrorConst { ptr: self.ptr }
    }
    /// Generate a BtErrorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_error_get_cause_count")]
  ///Calls bt_error_get_cause_count
  pub fn get_cause_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_get_cause_count(self.ptr) }
  }

  #[doc(alias = "bt_error_borrow_cause_by_index")]
  ///Calls bt_error_borrow_cause_by_index
  pub fn borrow_cause_by_index(&self, index: u64) -> BtErrorCauseConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtErrorCauseConst{ ptr:bt_error_borrow_cause_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_error_release")]
  ///Calls bt_error_release
  pub fn release(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_release(self.ptr) }
  }

}/// Wraps all methods related to bt_error_cause, but the pointer is const
pub struct BtErrorCauseConst {
    ptr: *const bt_error_cause
}
impl BtErrorCauseConst {
    /// Generate a BtErrorCauseConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtErrorCauseConst {
        BtErrorCauseConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtErrorCauseConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_error_cause) -> BtErrorCauseConst {
        assert!(!ptr.is_null());
        BtErrorCauseConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_error_cause_get_actor_type")]
  ///Calls bt_error_cause_get_actor_type
  pub fn get_actor_type(&self) -> BtErrorCauseActorType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_get_actor_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_get_message")]
  ///Calls bt_error_cause_get_message
  pub fn get_message(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_message(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_module_name")]
  ///Calls bt_error_cause_get_module_name
  pub fn get_module_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_module_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_file_name")]
  ///Calls bt_error_cause_get_file_name
  pub fn get_file_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_file_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_line_number")]
  ///Calls bt_error_cause_get_line_number
  pub fn get_line_number(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_cause_get_line_number(self.ptr) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_name")]
  ///Calls bt_error_cause_component_actor_get_component_name
  pub fn component_actor_get_component_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_component_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_class_type")]
  ///Calls bt_error_cause_component_actor_get_component_class_type
  pub fn component_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_component_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_class_name")]
  ///Calls bt_error_cause_component_actor_get_component_class_name
  pub fn component_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_plugin_name")]
  ///Calls bt_error_cause_component_actor_get_plugin_name
  pub fn component_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_plugin_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_output_port_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_output_port_name
  pub fn message_iterator_actor_get_component_output_port_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_output_port_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_name
  pub fn message_iterator_actor_get_component_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_class_type")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_class_type
  pub fn message_iterator_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_message_iterator_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_class_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_class_name
  pub fn message_iterator_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_plugin_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_plugin_name
  pub fn message_iterator_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_plugin_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_component_class_type")]
  ///Calls bt_error_cause_component_class_actor_get_component_class_type
  pub fn component_class_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_component_class_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_component_class_name")]
  ///Calls bt_error_cause_component_class_actor_get_component_class_name
  pub fn component_class_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_class_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_plugin_name")]
  ///Calls bt_error_cause_component_class_actor_get_plugin_name
  pub fn component_class_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_class_actor_get_plugin_name(self.ptr)) }
  }

}/// Wraps all methods related to bt_error_cause
pub struct BtErrorCause {
    ptr: *mut bt_error_cause
}
impl BtErrorCause {
    /// Generate a BtErrorCauseConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtErrorCause {
        BtErrorCause { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtErrorCauseConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_error_cause) -> BtErrorCause {
        BtErrorCause { ptr }
    }
    /// Create the equivalent BtErrorCauseConst version of this object.
    pub fn as_const(&mut self) -> BtErrorCauseConst {
      BtErrorCauseConst { ptr: self.ptr }
    }
    /// Generate a BtErrorCauseConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_error_cause_get_actor_type")]
  ///Calls bt_error_cause_get_actor_type
  pub fn get_actor_type(&self) -> BtErrorCauseActorType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_get_actor_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_get_message")]
  ///Calls bt_error_cause_get_message
  pub fn get_message(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_message(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_module_name")]
  ///Calls bt_error_cause_get_module_name
  pub fn get_module_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_module_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_file_name")]
  ///Calls bt_error_cause_get_file_name
  pub fn get_file_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_get_file_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_get_line_number")]
  ///Calls bt_error_cause_get_line_number
  pub fn get_line_number(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_error_cause_get_line_number(self.ptr) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_name")]
  ///Calls bt_error_cause_component_actor_get_component_name
  pub fn component_actor_get_component_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_component_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_class_type")]
  ///Calls bt_error_cause_component_actor_get_component_class_type
  pub fn component_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_component_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_component_class_name")]
  ///Calls bt_error_cause_component_actor_get_component_class_name
  pub fn component_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_actor_get_plugin_name")]
  ///Calls bt_error_cause_component_actor_get_plugin_name
  pub fn component_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_actor_get_plugin_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_output_port_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_output_port_name
  pub fn message_iterator_actor_get_component_output_port_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_output_port_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_name
  pub fn message_iterator_actor_get_component_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_class_type")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_class_type
  pub fn message_iterator_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_message_iterator_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_component_class_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_component_class_name
  pub fn message_iterator_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_message_iterator_actor_get_plugin_name")]
  ///Calls bt_error_cause_message_iterator_actor_get_plugin_name
  pub fn message_iterator_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_message_iterator_actor_get_plugin_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_component_class_type")]
  ///Calls bt_error_cause_component_class_actor_get_component_class_type
  pub fn component_class_actor_get_component_class_type(&self) -> BtComponentClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_error_cause_component_class_actor_get_component_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_component_class_name")]
  ///Calls bt_error_cause_component_class_actor_get_component_class_name
  pub fn component_class_actor_get_component_class_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_class_actor_get_component_class_name(self.ptr)) }
  }

  #[doc(alias = "bt_error_cause_component_class_actor_get_plugin_name")]
  ///Calls bt_error_cause_component_class_actor_get_plugin_name
  pub fn component_class_actor_get_plugin_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_error_cause_component_class_actor_get_plugin_name(self.ptr)) }
  }

}/// Wraps all methods related to bt_event, but the pointer is const
pub struct BtEventConst {
    ptr: *const bt_event
}
impl BtEventConst {
    /// Generate a BtEventConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEventConst {
        BtEventConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_event) -> BtEventConst {
        assert!(!ptr.is_null());
        BtEventConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_event_borrow_class_const")]
  ///Calls bt_event_borrow_class_const
  pub fn borrow_class_const(&self) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_event_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_stream_const")]
  ///Calls bt_event_borrow_stream_const
  pub fn borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_event_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_packet_const")]
  ///Calls bt_event_borrow_packet_const
  pub fn borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_event_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_payload_field_const")]
  ///Calls bt_event_borrow_payload_field_const
  pub fn borrow_payload_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_payload_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_specific_context_field_const")]
  ///Calls bt_event_borrow_specific_context_field_const
  pub fn borrow_specific_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_specific_context_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_common_context_field_const")]
  ///Calls bt_event_borrow_common_context_field_const
  pub fn borrow_common_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_common_context_field_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_event
pub struct BtEvent {
    ptr: *mut bt_event
}
impl BtEvent {
    /// Generate a BtEventConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEvent {
        BtEvent { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_event) -> BtEvent {
        BtEvent { ptr }
    }
    /// Create the equivalent BtEventConst version of this object.
    pub fn as_const(&mut self) -> BtEventConst {
      BtEventConst { ptr: self.ptr }
    }
    /// Generate a BtEventConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_event_borrow_class")]
  ///Calls bt_event_borrow_class
  pub fn borrow_class(&mut self) -> BtEventClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClass{ ptr:bt_event_borrow_class(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_class_const")]
  ///Calls bt_event_borrow_class_const
  pub fn borrow_class_const(&self) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_event_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_stream")]
  ///Calls bt_event_borrow_stream
  pub fn borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_event_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_stream_const")]
  ///Calls bt_event_borrow_stream_const
  pub fn borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_event_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_packet")]
  ///Calls bt_event_borrow_packet
  pub fn borrow_packet(&mut self) -> BtPacket {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacket{ ptr:bt_event_borrow_packet(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_packet_const")]
  ///Calls bt_event_borrow_packet_const
  pub fn borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_event_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_payload_field")]
  ///Calls bt_event_borrow_payload_field
  pub fn borrow_payload_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_event_borrow_payload_field(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_payload_field_const")]
  ///Calls bt_event_borrow_payload_field_const
  pub fn borrow_payload_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_payload_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_specific_context_field")]
  ///Calls bt_event_borrow_specific_context_field
  pub fn borrow_specific_context_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_event_borrow_specific_context_field(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_specific_context_field_const")]
  ///Calls bt_event_borrow_specific_context_field_const
  pub fn borrow_specific_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_specific_context_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_common_context_field")]
  ///Calls bt_event_borrow_common_context_field
  pub fn borrow_common_context_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_event_borrow_common_context_field(self.ptr)} }
  }

  #[doc(alias = "bt_event_borrow_common_context_field_const")]
  ///Calls bt_event_borrow_common_context_field_const
  pub fn borrow_common_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_event_borrow_common_context_field_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_event_class, but the pointer is const
pub struct BtEventClassConst {
    ptr: *const bt_event_class
}
impl BtEventClassConst {
    /// Generate a BtEventClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEventClassConst {
        BtEventClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_event_class) -> BtEventClassConst {
        assert!(!ptr.is_null());
        BtEventClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_event_class_borrow_stream_class_const")]
  ///Calls bt_event_class_borrow_stream_class_const
  pub fn borrow_stream_class_const(&self) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_event_class_borrow_stream_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_get_id")]
  ///Calls bt_event_class_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_get_id(self.ptr) }
  }

  #[doc(alias = "bt_event_class_get_name")]
  ///Calls bt_event_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_event_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_event_class_get_log_level")]
  ///Calls bt_event_class_get_log_level
  pub unsafe fn get_log_level(&self, log_level: *mut bt_event_class_log_level) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_event_class_get_log_level(self.ptr, log_level)).unwrap() }
  }

  #[doc(alias = "bt_event_class_get_emf_uri")]
  ///Calls bt_event_class_get_emf_uri
  pub fn get_emf_uri(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_event_class_get_emf_uri(self.ptr)) }
  }

  #[doc(alias = "bt_event_class_borrow_payload_field_class_const")]
  ///Calls bt_event_class_borrow_payload_field_class_const
  pub fn borrow_payload_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_event_class_borrow_payload_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_specific_context_field_class_const")]
  ///Calls bt_event_class_borrow_specific_context_field_class_const
  pub fn borrow_specific_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_event_class_borrow_specific_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_user_attributes_const")]
  ///Calls bt_event_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_event_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_get_ref")]
  ///Calls bt_event_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_event_class_put_ref")]
  ///Calls bt_event_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_event_class
pub struct BtEventClass {
    ptr: *mut bt_event_class
}
impl BtEventClass {
    /// Generate a BtEventClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEventClass {
        BtEventClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_event_class) -> BtEventClass {
        BtEventClass { ptr }
    }
    /// Create the equivalent BtEventClassConst version of this object.
    pub fn as_const(&mut self) -> BtEventClassConst {
      BtEventClassConst { ptr: self.ptr }
    }
    /// Generate a BtEventClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_event_class_create")]
  ///Calls bt_event_class_create
  pub unsafe fn create(stream_class: &BtStreamClass) -> BtEventClass {
    unsafe { BtEventClass{ ptr:bt_event_class_create(stream_class.ptr)} }
  }

  #[doc(alias = "bt_event_class_create_with_id")]
  ///Calls bt_event_class_create_with_id
  pub unsafe fn create_with_id(stream_class: &BtStreamClass, id: u64) -> BtEventClass {
    unsafe { BtEventClass{ ptr:bt_event_class_create_with_id(stream_class.ptr, id)} }
  }

  #[doc(alias = "bt_event_class_borrow_stream_class")]
  ///Calls bt_event_class_borrow_stream_class
  pub fn borrow_stream_class(&mut self) -> BtStreamClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClass{ ptr:bt_event_class_borrow_stream_class(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_stream_class_const")]
  ///Calls bt_event_class_borrow_stream_class_const
  pub fn borrow_stream_class_const(&self) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_event_class_borrow_stream_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_get_id")]
  ///Calls bt_event_class_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_get_id(self.ptr) }
  }

  #[doc(alias = "bt_event_class_set_name")]
  ///Calls bt_event_class_set_name
  pub unsafe fn set_name(&mut self, name: &str) -> BtEventClassSetNameStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_event_class_set_name(self.ptr, name.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_event_class_get_name")]
  ///Calls bt_event_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_event_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_event_class_set_log_level")]
  ///Calls bt_event_class_set_log_level
  pub fn set_log_level(&mut self, log_level: BtEventClassLogLevel)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_set_log_level(self.ptr, num::ToPrimitive::to_u32(&log_level).unwrap()) }
  }

  #[doc(alias = "bt_event_class_get_log_level")]
  ///Calls bt_event_class_get_log_level
  pub unsafe fn get_log_level(&self, log_level: *mut bt_event_class_log_level) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_event_class_get_log_level(self.ptr, log_level)).unwrap() }
  }

  #[doc(alias = "bt_event_class_set_emf_uri")]
  ///Calls bt_event_class_set_emf_uri
  pub unsafe fn set_emf_uri(&mut self, emf_uri: &str) -> BtEventClassSetEmfUriStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_event_class_set_emf_uri(self.ptr, emf_uri.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_event_class_get_emf_uri")]
  ///Calls bt_event_class_get_emf_uri
  pub fn get_emf_uri(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_event_class_get_emf_uri(self.ptr)) }
  }

  #[doc(alias = "bt_event_class_set_payload_field_class")]
  ///Calls bt_event_class_set_payload_field_class
  pub unsafe fn set_payload_field_class(&mut self, field_class: &BtFieldClass) -> BtEventClassSetFieldClassStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_event_class_set_payload_field_class(self.ptr, field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_event_class_borrow_payload_field_class")]
  ///Calls bt_event_class_borrow_payload_field_class
  pub fn borrow_payload_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_event_class_borrow_payload_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_payload_field_class_const")]
  ///Calls bt_event_class_borrow_payload_field_class_const
  pub fn borrow_payload_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_event_class_borrow_payload_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_set_specific_context_field_class")]
  ///Calls bt_event_class_set_specific_context_field_class
  pub unsafe fn set_specific_context_field_class(&mut self, field_class: &BtFieldClass) -> BtEventClassSetFieldClassStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_event_class_set_specific_context_field_class(self.ptr, field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_event_class_borrow_specific_context_field_class")]
  ///Calls bt_event_class_borrow_specific_context_field_class
  pub fn borrow_specific_context_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_event_class_borrow_specific_context_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_specific_context_field_class_const")]
  ///Calls bt_event_class_borrow_specific_context_field_class_const
  pub fn borrow_specific_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_event_class_borrow_specific_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_set_user_attributes")]
  ///Calls bt_event_class_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_event_class_borrow_user_attributes")]
  ///Calls bt_event_class_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_event_class_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_borrow_user_attributes_const")]
  ///Calls bt_event_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_event_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_event_class_get_ref")]
  ///Calls bt_event_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_event_class_put_ref")]
  ///Calls bt_event_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_event_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_event_header_field, but the pointer is const
pub struct BtEventHeaderFieldConst {
    ptr: *const bt_event_header_field
}
impl BtEventHeaderFieldConst {
    /// Generate a BtEventHeaderFieldConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEventHeaderFieldConst {
        BtEventHeaderFieldConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventHeaderFieldConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_event_header_field) -> BtEventHeaderFieldConst {
        assert!(!ptr.is_null());
        BtEventHeaderFieldConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_event_header_field
pub struct BtEventHeaderField {
    ptr: *mut bt_event_header_field
}
impl BtEventHeaderField {
    /// Generate a BtEventHeaderFieldConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtEventHeaderField {
        BtEventHeaderField { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtEventHeaderFieldConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_event_header_field) -> BtEventHeaderField {
        BtEventHeaderField { ptr }
    }
    /// Create the equivalent BtEventHeaderFieldConst version of this object.
    pub fn as_const(&mut self) -> BtEventHeaderFieldConst {
      BtEventHeaderFieldConst { ptr: self.ptr }
    }
    /// Generate a BtEventHeaderFieldConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_field, but the pointer is const
pub struct BtFieldConst {
    ptr: *const bt_field
}
impl BtFieldConst {
    /// Generate a BtFieldConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldConst {
        BtFieldConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field) -> BtFieldConst {
        assert!(!ptr.is_null());
        BtFieldConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_get_class_type")]
  ///Calls bt_field_get_class_type
  pub fn get_class_type(&self) -> BtFieldClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u64(bt_field_get_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_borrow_class_const")]
  ///Calls bt_field_borrow_class_const
  pub fn borrow_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_bool_get_value")]
  ///Calls bt_field_bool_get_value
  pub fn bool_get_value(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_field_bool_get_value(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_field_bit_array_get_value_as_integer")]
  ///Calls bt_field_bit_array_get_value_as_integer
  pub fn bit_array_get_value_as_integer(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_bit_array_get_value_as_integer(self.ptr) }
  }

  #[doc(alias = "bt_field_integer_unsigned_get_value")]
  ///Calls bt_field_integer_unsigned_get_value
  pub fn integer_unsigned_get_value(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_unsigned_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_integer_signed_get_value")]
  ///Calls bt_field_integer_signed_get_value
  pub fn integer_signed_get_value(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_signed_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_enumeration_unsigned_get_mapping_labels")]
  ///Calls bt_field_enumeration_unsigned_get_mapping_labels
  pub unsafe fn enumeration_unsigned_get_mapping_labels(&self, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldEnumerationGetMappingLabelsStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_enumeration_unsigned_get_mapping_labels(self.ptr, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_enumeration_signed_get_mapping_labels")]
  ///Calls bt_field_enumeration_signed_get_mapping_labels
  pub unsafe fn enumeration_signed_get_mapping_labels(&self, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldEnumerationGetMappingLabelsStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_enumeration_signed_get_mapping_labels(self.ptr, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_real_single_precision_get_value")]
  ///Calls bt_field_real_single_precision_get_value
  pub fn real_single_precision_get_value(&self) -> f32 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_single_precision_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_real_double_precision_get_value")]
  ///Calls bt_field_real_double_precision_get_value
  pub fn real_double_precision_get_value(&self) -> f64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_double_precision_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_string_get_length")]
  ///Calls bt_field_string_get_length
  pub fn string_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_string_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_string_get_value")]
  ///Calls bt_field_string_get_value
  pub fn string_get_value(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_string_get_value(self.ptr)) }
  }

  #[doc(alias = "bt_field_array_get_length")]
  ///Calls bt_field_array_get_length
  pub fn array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_array_borrow_element_field_by_index_const")]
  ///Calls bt_field_array_borrow_element_field_by_index_const
  pub fn array_borrow_element_field_by_index_const(&self, index: u64) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_array_borrow_element_field_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_index_const")]
  ///Calls bt_field_structure_borrow_member_field_by_index_const
  pub fn structure_borrow_member_field_by_index_const(&self, index: u64) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_structure_borrow_member_field_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_name_const")]
  ///Calls bt_field_structure_borrow_member_field_by_name_const
  pub unsafe fn structure_borrow_member_field_by_name_const(&self, name: &str) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_structure_borrow_member_field_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_option_borrow_field_const")]
  ///Calls bt_field_option_borrow_field_const
  pub fn option_borrow_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_option_borrow_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_borrow_selected_option_field_const")]
  ///Calls bt_field_variant_borrow_selected_option_field_const
  pub fn variant_borrow_selected_option_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_variant_borrow_selected_option_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_get_selected_option_index")]
  ///Calls bt_field_variant_get_selected_option_index
  pub fn variant_get_selected_option_index(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_variant_get_selected_option_index(self.ptr) }
  }

  #[doc(alias = "bt_field_variant_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_borrow_selected_option_class_const
  pub fn variant_borrow_selected_option_class_const(&self) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_variant_borrow_selected_option_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const
  pub fn variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const(&self) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const
  pub fn variant_with_selector_field_integer_signed_borrow_selected_option_class_const(&self) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field
pub struct BtField {
    ptr: *mut bt_field
}
impl BtField {
    /// Generate a BtFieldConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtField {
        BtField { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field) -> BtField {
        BtField { ptr }
    }
    /// Create the equivalent BtFieldConst version of this object.
    pub fn as_const(&mut self) -> BtFieldConst {
      BtFieldConst { ptr: self.ptr }
    }
    /// Generate a BtFieldConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_get_class_type")]
  ///Calls bt_field_get_class_type
  pub fn get_class_type(&self) -> BtFieldClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u64(bt_field_get_class_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_borrow_class")]
  ///Calls bt_field_borrow_class
  pub fn borrow_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_field_borrow_class(self.ptr)} }
  }

  #[doc(alias = "bt_field_borrow_class_const")]
  ///Calls bt_field_borrow_class_const
  pub fn borrow_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_bool_set_value")]
  ///Calls bt_field_bool_set_value
  pub fn bool_set_value(&mut self, value: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_bool_set_value(self.ptr, if value { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_field_bool_get_value")]
  ///Calls bt_field_bool_get_value
  pub fn bool_get_value(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_field_bool_get_value(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_field_bit_array_set_value_as_integer")]
  ///Calls bt_field_bit_array_set_value_as_integer
  pub fn bit_array_set_value_as_integer(&mut self, bits: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_bit_array_set_value_as_integer(self.ptr, bits) }
  }

  #[doc(alias = "bt_field_bit_array_get_value_as_integer")]
  ///Calls bt_field_bit_array_get_value_as_integer
  pub fn bit_array_get_value_as_integer(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_bit_array_get_value_as_integer(self.ptr) }
  }

  #[doc(alias = "bt_field_integer_unsigned_set_value")]
  ///Calls bt_field_integer_unsigned_set_value
  pub fn integer_unsigned_set_value(&mut self, value: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_unsigned_set_value(self.ptr, value) }
  }

  #[doc(alias = "bt_field_integer_unsigned_get_value")]
  ///Calls bt_field_integer_unsigned_get_value
  pub fn integer_unsigned_get_value(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_unsigned_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_integer_signed_set_value")]
  ///Calls bt_field_integer_signed_set_value
  pub fn integer_signed_set_value(&mut self, value: i64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_signed_set_value(self.ptr, value) }
  }

  #[doc(alias = "bt_field_integer_signed_get_value")]
  ///Calls bt_field_integer_signed_get_value
  pub fn integer_signed_get_value(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_integer_signed_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_enumeration_unsigned_get_mapping_labels")]
  ///Calls bt_field_enumeration_unsigned_get_mapping_labels
  pub unsafe fn enumeration_unsigned_get_mapping_labels(&self, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldEnumerationGetMappingLabelsStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_enumeration_unsigned_get_mapping_labels(self.ptr, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_enumeration_signed_get_mapping_labels")]
  ///Calls bt_field_enumeration_signed_get_mapping_labels
  pub unsafe fn enumeration_signed_get_mapping_labels(&self, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldEnumerationGetMappingLabelsStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_enumeration_signed_get_mapping_labels(self.ptr, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_real_single_precision_set_value")]
  ///Calls bt_field_real_single_precision_set_value
  pub fn real_single_precision_set_value(&mut self, value: f32)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_single_precision_set_value(self.ptr, value) }
  }

  #[doc(alias = "bt_field_real_single_precision_get_value")]
  ///Calls bt_field_real_single_precision_get_value
  pub fn real_single_precision_get_value(&self) -> f32 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_single_precision_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_real_double_precision_set_value")]
  ///Calls bt_field_real_double_precision_set_value
  pub fn real_double_precision_set_value(&mut self, value: f64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_double_precision_set_value(self.ptr, value) }
  }

  #[doc(alias = "bt_field_real_double_precision_get_value")]
  ///Calls bt_field_real_double_precision_get_value
  pub fn real_double_precision_get_value(&self) -> f64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_real_double_precision_get_value(self.ptr) }
  }

  #[doc(alias = "bt_field_string_set_value")]
  ///Calls bt_field_string_set_value
  pub unsafe fn string_set_value(&mut self, value: &str) -> BtFieldStringSetValueStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_string_set_value(self.ptr, value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_field_string_get_length")]
  ///Calls bt_field_string_get_length
  pub fn string_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_string_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_string_get_value")]
  ///Calls bt_field_string_get_value
  pub fn string_get_value(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_string_get_value(self.ptr)) }
  }

  #[doc(alias = "bt_field_string_append")]
  ///Calls bt_field_string_append
  pub unsafe fn string_append(&mut self, value: &str) -> BtFieldStringAppendStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_string_append(self.ptr, value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_field_string_append_with_length")]
  ///Calls bt_field_string_append_with_length
  pub unsafe fn string_append_with_length(&mut self, value: &str, length: u64) -> BtFieldStringAppendStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_string_append_with_length(self.ptr, value.as_ptr(), length)).unwrap() }
  }

  #[doc(alias = "bt_field_string_clear")]
  ///Calls bt_field_string_clear
  pub fn string_clear(&mut self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_string_clear(self.ptr) }
  }

  #[doc(alias = "bt_field_array_get_length")]
  ///Calls bt_field_array_get_length
  pub fn array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_array_borrow_element_field_by_index")]
  ///Calls bt_field_array_borrow_element_field_by_index
  pub fn array_borrow_element_field_by_index(&mut self, index: u64) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_field_array_borrow_element_field_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_array_borrow_element_field_by_index_const")]
  ///Calls bt_field_array_borrow_element_field_by_index_const
  pub fn array_borrow_element_field_by_index_const(&self, index: u64) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_array_borrow_element_field_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_array_dynamic_set_length")]
  ///Calls bt_field_array_dynamic_set_length
  pub fn array_dynamic_set_length(&mut self, length: u64) -> BtFieldArrayDynamicSetLengthStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_array_dynamic_set_length(self.ptr, length)).unwrap() }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_index")]
  ///Calls bt_field_structure_borrow_member_field_by_index
  pub fn structure_borrow_member_field_by_index(&mut self, index: u64) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_field_structure_borrow_member_field_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_index_const")]
  ///Calls bt_field_structure_borrow_member_field_by_index_const
  pub fn structure_borrow_member_field_by_index_const(&self, index: u64) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_structure_borrow_member_field_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_name")]
  ///Calls bt_field_structure_borrow_member_field_by_name
  pub unsafe fn structure_borrow_member_field_by_name(&mut self, name: &str) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_field_structure_borrow_member_field_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_structure_borrow_member_field_by_name_const")]
  ///Calls bt_field_structure_borrow_member_field_by_name_const
  pub unsafe fn structure_borrow_member_field_by_name_const(&self, name: &str) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_structure_borrow_member_field_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_option_set_has_field")]
  ///Calls bt_field_option_set_has_field
  pub fn option_set_has_field(&mut self, has_field: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_option_set_has_field(self.ptr, if has_field { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_field_option_borrow_field")]
  ///Calls bt_field_option_borrow_field
  pub fn option_borrow_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_field_option_borrow_field(self.ptr)} }
  }

  #[doc(alias = "bt_field_option_borrow_field_const")]
  ///Calls bt_field_option_borrow_field_const
  pub fn option_borrow_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_option_borrow_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_select_option_by_index")]
  ///Calls bt_field_variant_select_option_by_index
  pub fn variant_select_option_by_index(&mut self, index: u64) -> BtFieldVariantSelectOptionByIndexStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_variant_select_option_by_index(self.ptr, index)).unwrap() }
  }

  #[doc(alias = "bt_field_variant_borrow_selected_option_field")]
  ///Calls bt_field_variant_borrow_selected_option_field
  pub fn variant_borrow_selected_option_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_field_variant_borrow_selected_option_field(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_borrow_selected_option_field_const")]
  ///Calls bt_field_variant_borrow_selected_option_field_const
  pub fn variant_borrow_selected_option_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_field_variant_borrow_selected_option_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_get_selected_option_index")]
  ///Calls bt_field_variant_get_selected_option_index
  pub fn variant_get_selected_option_index(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_variant_get_selected_option_index(self.ptr) }
  }

  #[doc(alias = "bt_field_variant_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_borrow_selected_option_class_const
  pub fn variant_borrow_selected_option_class_const(&self) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_variant_borrow_selected_option_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const
  pub fn variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const(&self) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_variant_with_selector_field_integer_unsigned_borrow_selected_option_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const")]
  ///Calls bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const
  pub fn variant_with_selector_field_integer_signed_borrow_selected_option_class_const(&self) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_variant_with_selector_field_integer_signed_borrow_selected_option_class_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class, but the pointer is const
pub struct BtFieldClassConst {
    ptr: *const bt_field_class
}
impl BtFieldClassConst {
    /// Generate a BtFieldClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassConst {
        BtFieldClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class) -> BtFieldClassConst {
        assert!(!ptr.is_null());
        BtFieldClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_get_type")]
  ///Calls bt_field_class_get_type
  pub fn get_type(&self) -> BtFieldClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u64(bt_field_class_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_borrow_user_attributes_const")]
  ///Calls bt_field_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_bit_array_get_length")]
  ///Calls bt_field_class_bit_array_get_length
  pub fn bit_array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_bit_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_class_integer_get_field_value_range")]
  ///Calls bt_field_class_integer_get_field_value_range
  pub fn integer_get_field_value_range(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_integer_get_field_value_range(self.ptr) }
  }

  #[doc(alias = "bt_field_class_integer_get_preferred_display_base")]
  ///Calls bt_field_class_integer_get_preferred_display_base
  pub fn integer_get_preferred_display_base(&self) -> BtFieldClassIntegerPreferredDisplayBase {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_class_integer_get_preferred_display_base(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_enumeration_get_mapping_count")]
  ///Calls bt_field_class_enumeration_get_mapping_count
  pub fn enumeration_get_mapping_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_enumeration_get_mapping_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const")]
  ///Calls bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const
  pub fn enumeration_unsigned_borrow_mapping_by_index_const(&self, index: u64) -> BtFieldClassEnumerationUnsignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationUnsignedMappingConst{ ptr:bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const")]
  ///Calls bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const
  pub unsafe fn enumeration_unsigned_borrow_mapping_by_label_const(&self, label: &str) -> BtFieldClassEnumerationUnsignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationUnsignedMappingConst{ ptr:bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const(self.ptr, label.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_get_mapping_labels_for_value")]
  ///Calls bt_field_class_enumeration_unsigned_get_mapping_labels_for_value
  pub unsafe fn enumeration_unsigned_get_mapping_labels_for_value(&self, value: u64, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldClassEnumerationGetMappingLabelsForValueStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_unsigned_get_mapping_labels_for_value(self.ptr, value, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_borrow_mapping_by_index_const")]
  ///Calls bt_field_class_enumeration_signed_borrow_mapping_by_index_const
  pub fn enumeration_signed_borrow_mapping_by_index_const(&self, index: u64) -> BtFieldClassEnumerationSignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationSignedMappingConst{ ptr:bt_field_class_enumeration_signed_borrow_mapping_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_borrow_mapping_by_label_const")]
  ///Calls bt_field_class_enumeration_signed_borrow_mapping_by_label_const
  pub unsafe fn enumeration_signed_borrow_mapping_by_label_const(&self, label: &str) -> BtFieldClassEnumerationSignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationSignedMappingConst{ ptr:bt_field_class_enumeration_signed_borrow_mapping_by_label_const(self.ptr, label.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_get_mapping_labels_for_value")]
  ///Calls bt_field_class_enumeration_signed_get_mapping_labels_for_value
  pub unsafe fn enumeration_signed_get_mapping_labels_for_value(&self, value: i64, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldClassEnumerationGetMappingLabelsForValueStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_signed_get_mapping_labels_for_value(self.ptr, value, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_class_array_borrow_element_field_class_const")]
  ///Calls bt_field_class_array_borrow_element_field_class_const
  pub fn array_borrow_element_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_array_borrow_element_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_array_static_get_length")]
  ///Calls bt_field_class_array_static_get_length
  pub fn array_static_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_array_static_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const")]
  ///Calls bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const
  pub fn array_dynamic_with_length_field_borrow_length_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_get_member_count")]
  ///Calls bt_field_class_structure_get_member_count
  pub fn structure_get_member_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_structure_get_member_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_index_const")]
  ///Calls bt_field_class_structure_borrow_member_by_index_const
  pub fn structure_borrow_member_by_index_const(&self, index: u64) -> BtFieldClassStructureMemberConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMemberConst{ ptr:bt_field_class_structure_borrow_member_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_name_const")]
  ///Calls bt_field_class_structure_borrow_member_by_name_const
  pub unsafe fn structure_borrow_member_by_name_const(&self, name: &str) -> BtFieldClassStructureMemberConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMemberConst{ ptr:bt_field_class_structure_borrow_member_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_option_borrow_field_class_const")]
  ///Calls bt_field_class_option_borrow_field_class_const
  pub fn option_borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_option_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_borrow_selector_field_path_const")]
  ///Calls bt_field_class_option_with_selector_field_borrow_selector_field_path_const
  pub fn option_with_selector_field_borrow_selector_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_option_with_selector_field_borrow_selector_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_bool_selector_is_reversed")]
  ///Calls bt_field_class_option_with_selector_field_bool_selector_is_reversed
  pub fn option_with_selector_field_bool_selector_is_reversed(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_field_class_option_with_selector_field_bool_selector_is_reversed(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const")]
  ///Calls bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const
  pub fn option_with_selector_field_integer_unsigned_borrow_selector_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const")]
  ///Calls bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const
  pub fn option_with_selector_field_integer_signed_borrow_selector_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_get_option_count")]
  ///Calls bt_field_class_variant_get_option_count
  pub fn variant_get_option_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_variant_get_option_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_borrow_option_by_index_const
  pub fn variant_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_class_variant_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_borrow_option_by_name_const
  pub unsafe fn variant_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_class_variant_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_borrow_selector_field_path_const")]
  ///Calls bt_field_class_variant_with_selector_field_borrow_selector_field_path_const
  pub fn variant_with_selector_field_borrow_selector_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_variant_with_selector_field_borrow_selector_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const
  pub fn variant_with_selector_field_integer_unsigned_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const
  pub unsafe fn variant_with_selector_field_integer_unsigned_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const
  pub fn variant_with_selector_field_integer_signed_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const
  pub unsafe fn variant_with_selector_field_integer_signed_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_get_ref")]
  ///Calls bt_field_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_field_class_put_ref")]
  ///Calls bt_field_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_field_class
pub struct BtFieldClass {
    ptr: *mut bt_field_class
}
impl BtFieldClass {
    /// Generate a BtFieldClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClass {
        BtFieldClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class) -> BtFieldClass {
        BtFieldClass { ptr }
    }
    /// Create the equivalent BtFieldClassConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassConst {
      BtFieldClassConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_get_type")]
  ///Calls bt_field_class_get_type
  pub fn get_type(&self) -> BtFieldClassType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u64(bt_field_class_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_set_user_attributes")]
  ///Calls bt_field_class_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_field_class_borrow_user_attributes")]
  ///Calls bt_field_class_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_field_class_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_borrow_user_attributes_const")]
  ///Calls bt_field_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_bool_create")]
  ///Calls bt_field_class_bool_create
  pub unsafe fn bool_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_bool_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_bit_array_create")]
  ///Calls bt_field_class_bit_array_create
  pub unsafe fn bit_array_create(trace_class: &BtTraceClass, length: u64) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_bit_array_create(trace_class.ptr, length)} }
  }

  #[doc(alias = "bt_field_class_bit_array_get_length")]
  ///Calls bt_field_class_bit_array_get_length
  pub fn bit_array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_bit_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_class_integer_set_field_value_range")]
  ///Calls bt_field_class_integer_set_field_value_range
  pub fn integer_set_field_value_range(&mut self, n: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_integer_set_field_value_range(self.ptr, n) }
  }

  #[doc(alias = "bt_field_class_integer_get_field_value_range")]
  ///Calls bt_field_class_integer_get_field_value_range
  pub fn integer_get_field_value_range(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_integer_get_field_value_range(self.ptr) }
  }

  #[doc(alias = "bt_field_class_integer_set_preferred_display_base")]
  ///Calls bt_field_class_integer_set_preferred_display_base
  pub fn integer_set_preferred_display_base(&mut self, preferred_display_base: BtFieldClassIntegerPreferredDisplayBase)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_integer_set_preferred_display_base(self.ptr, num::ToPrimitive::to_u32(&preferred_display_base).unwrap()) }
  }

  #[doc(alias = "bt_field_class_integer_get_preferred_display_base")]
  ///Calls bt_field_class_integer_get_preferred_display_base
  pub fn integer_get_preferred_display_base(&self) -> BtFieldClassIntegerPreferredDisplayBase {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_class_integer_get_preferred_display_base(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_integer_unsigned_create")]
  ///Calls bt_field_class_integer_unsigned_create
  pub unsafe fn integer_unsigned_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_integer_unsigned_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_integer_signed_create")]
  ///Calls bt_field_class_integer_signed_create
  pub unsafe fn integer_signed_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_integer_signed_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_real_single_precision_create")]
  ///Calls bt_field_class_real_single_precision_create
  pub unsafe fn real_single_precision_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_real_single_precision_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_real_double_precision_create")]
  ///Calls bt_field_class_real_double_precision_create
  pub unsafe fn real_double_precision_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_real_double_precision_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_enumeration_get_mapping_count")]
  ///Calls bt_field_class_enumeration_get_mapping_count
  pub fn enumeration_get_mapping_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_enumeration_get_mapping_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_create")]
  ///Calls bt_field_class_enumeration_unsigned_create
  pub unsafe fn enumeration_unsigned_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_enumeration_unsigned_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_add_mapping")]
  ///Calls bt_field_class_enumeration_unsigned_add_mapping
  pub unsafe fn enumeration_unsigned_add_mapping(&mut self, label: &str, ranges: &BtIntegerRangeSetUnsignedConst) -> BtFieldClassEnumerationAddMappingStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_unsigned_add_mapping(self.ptr, label.as_ptr(), ranges.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const")]
  ///Calls bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const
  pub fn enumeration_unsigned_borrow_mapping_by_index_const(&self, index: u64) -> BtFieldClassEnumerationUnsignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationUnsignedMappingConst{ ptr:bt_field_class_enumeration_unsigned_borrow_mapping_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const")]
  ///Calls bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const
  pub unsafe fn enumeration_unsigned_borrow_mapping_by_label_const(&self, label: &str) -> BtFieldClassEnumerationUnsignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationUnsignedMappingConst{ ptr:bt_field_class_enumeration_unsigned_borrow_mapping_by_label_const(self.ptr, label.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_enumeration_unsigned_get_mapping_labels_for_value")]
  ///Calls bt_field_class_enumeration_unsigned_get_mapping_labels_for_value
  pub unsafe fn enumeration_unsigned_get_mapping_labels_for_value(&self, value: u64, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldClassEnumerationGetMappingLabelsForValueStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_unsigned_get_mapping_labels_for_value(self.ptr, value, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_create")]
  ///Calls bt_field_class_enumeration_signed_create
  pub unsafe fn enumeration_signed_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_enumeration_signed_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_add_mapping")]
  ///Calls bt_field_class_enumeration_signed_add_mapping
  pub unsafe fn enumeration_signed_add_mapping(&mut self, label: &str, ranges: &BtIntegerRangeSetSignedConst) -> BtFieldClassEnumerationAddMappingStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_signed_add_mapping(self.ptr, label.as_ptr(), ranges.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_borrow_mapping_by_index_const")]
  ///Calls bt_field_class_enumeration_signed_borrow_mapping_by_index_const
  pub fn enumeration_signed_borrow_mapping_by_index_const(&self, index: u64) -> BtFieldClassEnumerationSignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationSignedMappingConst{ ptr:bt_field_class_enumeration_signed_borrow_mapping_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_borrow_mapping_by_label_const")]
  ///Calls bt_field_class_enumeration_signed_borrow_mapping_by_label_const
  pub unsafe fn enumeration_signed_borrow_mapping_by_label_const(&self, label: &str) -> BtFieldClassEnumerationSignedMappingConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassEnumerationSignedMappingConst{ ptr:bt_field_class_enumeration_signed_borrow_mapping_by_label_const(self.ptr, label.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_enumeration_signed_get_mapping_labels_for_value")]
  ///Calls bt_field_class_enumeration_signed_get_mapping_labels_for_value
  pub unsafe fn enumeration_signed_get_mapping_labels_for_value(&self, value: i64, labels: *mut bt_field_class_enumeration_mapping_label_array, count: *mut u64) -> BtFieldClassEnumerationGetMappingLabelsForValueStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_enumeration_signed_get_mapping_labels_for_value(self.ptr, value, labels, count)).unwrap() }
  }

  #[doc(alias = "bt_field_class_string_create")]
  ///Calls bt_field_class_string_create
  pub unsafe fn string_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_string_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_array_borrow_element_field_class")]
  ///Calls bt_field_class_array_borrow_element_field_class
  pub fn array_borrow_element_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_field_class_array_borrow_element_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_array_borrow_element_field_class_const")]
  ///Calls bt_field_class_array_borrow_element_field_class_const
  pub fn array_borrow_element_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_array_borrow_element_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_array_static_create")]
  ///Calls bt_field_class_array_static_create
  pub unsafe fn array_static_create(trace_class: &BtTraceClass, element_field_class: &BtFieldClass, length: u64) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_array_static_create(trace_class.ptr, element_field_class.ptr, length)} }
  }

  #[doc(alias = "bt_field_class_array_static_get_length")]
  ///Calls bt_field_class_array_static_get_length
  pub fn array_static_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_array_static_get_length(self.ptr) }
  }

  #[doc(alias = "bt_field_class_array_dynamic_create")]
  ///Calls bt_field_class_array_dynamic_create
  pub unsafe fn array_dynamic_create(trace_class: &BtTraceClass, element_field_class: &BtFieldClass, length_field_class: &BtFieldClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_array_dynamic_create(trace_class.ptr, element_field_class.ptr, length_field_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const")]
  ///Calls bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const
  pub fn array_dynamic_with_length_field_borrow_length_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_array_dynamic_with_length_field_borrow_length_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_create")]
  ///Calls bt_field_class_structure_create
  pub unsafe fn structure_create(trace_class: &BtTraceClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_structure_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_append_member")]
  ///Calls bt_field_class_structure_append_member
  pub unsafe fn structure_append_member(&mut self, name: &str, member_field_class: &BtFieldClass) -> BtFieldClassStructureAppendMemberStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_structure_append_member(self.ptr, name.as_ptr(), member_field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_structure_get_member_count")]
  ///Calls bt_field_class_structure_get_member_count
  pub fn structure_get_member_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_structure_get_member_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_index")]
  ///Calls bt_field_class_structure_borrow_member_by_index
  pub fn structure_borrow_member_by_index(&mut self, index: u64) -> BtFieldClassStructureMember {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMember{ ptr:bt_field_class_structure_borrow_member_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_index_const")]
  ///Calls bt_field_class_structure_borrow_member_by_index_const
  pub fn structure_borrow_member_by_index_const(&self, index: u64) -> BtFieldClassStructureMemberConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMemberConst{ ptr:bt_field_class_structure_borrow_member_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_name")]
  ///Calls bt_field_class_structure_borrow_member_by_name
  pub unsafe fn structure_borrow_member_by_name(&mut self, name: &str) -> BtFieldClassStructureMember {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMember{ ptr:bt_field_class_structure_borrow_member_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_structure_borrow_member_by_name_const")]
  ///Calls bt_field_class_structure_borrow_member_by_name_const
  pub unsafe fn structure_borrow_member_by_name_const(&self, name: &str) -> BtFieldClassStructureMemberConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassStructureMemberConst{ ptr:bt_field_class_structure_borrow_member_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_option_borrow_field_class")]
  ///Calls bt_field_class_option_borrow_field_class
  pub fn option_borrow_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_field_class_option_borrow_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_borrow_field_class_const")]
  ///Calls bt_field_class_option_borrow_field_class_const
  pub fn option_borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_option_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_without_selector_create")]
  ///Calls bt_field_class_option_without_selector_create
  pub unsafe fn option_without_selector_create(trace_class: &BtTraceClass, optional_field_class: &BtFieldClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_option_without_selector_create(trace_class.ptr, optional_field_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_borrow_selector_field_path_const")]
  ///Calls bt_field_class_option_with_selector_field_borrow_selector_field_path_const
  pub fn option_with_selector_field_borrow_selector_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_option_with_selector_field_borrow_selector_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_bool_create")]
  ///Calls bt_field_class_option_with_selector_field_bool_create
  pub unsafe fn option_with_selector_field_bool_create(trace_class: &BtTraceClass, optional_field_class: &BtFieldClass, selector_field_class: &BtFieldClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_option_with_selector_field_bool_create(trace_class.ptr, optional_field_class.ptr, selector_field_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_bool_set_selector_is_reversed")]
  ///Calls bt_field_class_option_with_selector_field_bool_set_selector_is_reversed
  pub fn option_with_selector_field_bool_set_selector_is_reversed(&mut self, selector_is_reversed: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_option_with_selector_field_bool_set_selector_is_reversed(self.ptr, if selector_is_reversed { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_bool_selector_is_reversed")]
  ///Calls bt_field_class_option_with_selector_field_bool_selector_is_reversed
  pub fn option_with_selector_field_bool_selector_is_reversed(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_field_class_option_with_selector_field_bool_selector_is_reversed(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_unsigned_create")]
  ///Calls bt_field_class_option_with_selector_field_integer_unsigned_create
  pub unsafe fn option_with_selector_field_integer_unsigned_create(trace_class: &BtTraceClass, optional_field_class: &BtFieldClass, selector_field_class: &BtFieldClass, ranges: &BtIntegerRangeSetUnsignedConst) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_option_with_selector_field_integer_unsigned_create(trace_class.ptr, optional_field_class.ptr, selector_field_class.ptr, ranges.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const")]
  ///Calls bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const
  pub fn option_with_selector_field_integer_unsigned_borrow_selector_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_option_with_selector_field_integer_unsigned_borrow_selector_ranges_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_signed_create")]
  ///Calls bt_field_class_option_with_selector_field_integer_signed_create
  pub unsafe fn option_with_selector_field_integer_signed_create(trace_class: &BtTraceClass, optional_field_class: &BtFieldClass, selector_field_class: &BtFieldClass, ranges: &BtIntegerRangeSetSignedConst) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_option_with_selector_field_integer_signed_create(trace_class.ptr, optional_field_class.ptr, selector_field_class.ptr, ranges.ptr)} }
  }

  #[doc(alias = "bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const")]
  ///Calls bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const
  pub fn option_with_selector_field_integer_signed_borrow_selector_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_option_with_selector_field_integer_signed_borrow_selector_ranges_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_create")]
  ///Calls bt_field_class_variant_create
  pub unsafe fn variant_create(trace_class: &BtTraceClass, selector_field_class: &BtFieldClass) -> BtFieldClass {
    unsafe { BtFieldClass{ ptr:bt_field_class_variant_create(trace_class.ptr, selector_field_class.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_get_option_count")]
  ///Calls bt_field_class_variant_get_option_count
  pub fn variant_get_option_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_variant_get_option_count(self.ptr) }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_index")]
  ///Calls bt_field_class_variant_borrow_option_by_index
  pub fn variant_borrow_option_by_index(&mut self, index: u64) -> BtFieldClassVariantOption {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOption{ ptr:bt_field_class_variant_borrow_option_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_borrow_option_by_index_const
  pub fn variant_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_class_variant_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_name")]
  ///Calls bt_field_class_variant_borrow_option_by_name
  pub unsafe fn variant_borrow_option_by_name(&mut self, name: &str) -> BtFieldClassVariantOption {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOption{ ptr:bt_field_class_variant_borrow_option_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_variant_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_borrow_option_by_name_const
  pub unsafe fn variant_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantOptionConst{ ptr:bt_field_class_variant_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_variant_without_selector_append_option")]
  ///Calls bt_field_class_variant_without_selector_append_option
  pub unsafe fn variant_without_selector_append_option(&mut self, name: &str, option_field_class: &BtFieldClass) -> BtFieldClassVariantWithoutSelectorAppendOptionStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_variant_without_selector_append_option(self.ptr, name.as_ptr(), option_field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_borrow_selector_field_path_const")]
  ///Calls bt_field_class_variant_with_selector_field_borrow_selector_field_path_const
  pub fn variant_with_selector_field_borrow_selector_field_path_const(&self) -> BtFieldPathConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathConst{ ptr:bt_field_class_variant_with_selector_field_borrow_selector_field_path_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_append_option")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_append_option
  pub unsafe fn variant_with_selector_field_integer_unsigned_append_option(&mut self, name: &str, option_field_class: &BtFieldClass, ranges: &BtIntegerRangeSetUnsignedConst) -> BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_variant_with_selector_field_integer_unsigned_append_option(self.ptr, name.as_ptr(), option_field_class.ptr, ranges.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const
  pub fn variant_with_selector_field_integer_unsigned_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const
  pub unsafe fn variant_with_selector_field_integer_unsigned_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_append_option")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_append_option
  pub unsafe fn variant_with_selector_field_integer_signed_append_option(&mut self, name: &str, option_field_class: &BtFieldClass, ranges: &BtIntegerRangeSetSignedConst) -> BtFieldClassVariantWithSelectorFieldIntegerAppendOptionStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_field_class_variant_with_selector_field_integer_signed_append_option(self.ptr, name.as_ptr(), option_field_class.ptr, ranges.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const
  pub fn variant_with_selector_field_integer_signed_borrow_option_by_index_const(&self, index: u64) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const
  pub unsafe fn variant_with_selector_field_integer_signed_borrow_option_by_name_const(&self, name: &str) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_borrow_option_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_field_class_get_ref")]
  ///Calls bt_field_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_field_class_put_ref")]
  ///Calls bt_field_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_field_class_enumeration_mapping, but the pointer is const
pub struct BtFieldClassEnumerationMappingConst {
    ptr: *const bt_field_class_enumeration_mapping
}
impl BtFieldClassEnumerationMappingConst {
    /// Generate a BtFieldClassEnumerationMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationMappingConst {
        BtFieldClassEnumerationMappingConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_enumeration_mapping) -> BtFieldClassEnumerationMappingConst {
        assert!(!ptr.is_null());
        BtFieldClassEnumerationMappingConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_mapping_get_label")]
  ///Calls bt_field_class_enumeration_mapping_get_label
  pub fn get_label(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_enumeration_mapping_get_label(self.ptr)) }
  }

}/// Wraps all methods related to bt_field_class_enumeration_mapping
pub struct BtFieldClassEnumerationMapping {
    ptr: *mut bt_field_class_enumeration_mapping
}
impl BtFieldClassEnumerationMapping {
    /// Generate a BtFieldClassEnumerationMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationMapping {
        BtFieldClassEnumerationMapping { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_enumeration_mapping) -> BtFieldClassEnumerationMapping {
        BtFieldClassEnumerationMapping { ptr }
    }
    /// Create the equivalent BtFieldClassEnumerationMappingConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassEnumerationMappingConst {
      BtFieldClassEnumerationMappingConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassEnumerationMappingConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_mapping_get_label")]
  ///Calls bt_field_class_enumeration_mapping_get_label
  pub fn get_label(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_enumeration_mapping_get_label(self.ptr)) }
  }

}/// Wraps all methods related to bt_field_class_enumeration_signed_mapping, but the pointer is const
pub struct BtFieldClassEnumerationSignedMappingConst {
    ptr: *const bt_field_class_enumeration_signed_mapping
}
impl BtFieldClassEnumerationSignedMappingConst {
    /// Generate a BtFieldClassEnumerationSignedMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationSignedMappingConst {
        BtFieldClassEnumerationSignedMappingConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationSignedMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_enumeration_signed_mapping) -> BtFieldClassEnumerationSignedMappingConst {
        assert!(!ptr.is_null());
        BtFieldClassEnumerationSignedMappingConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_signed_mapping_borrow_ranges_const")]
  ///Calls bt_field_class_enumeration_signed_mapping_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_enumeration_signed_mapping_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_enumeration_signed_mapping
pub struct BtFieldClassEnumerationSignedMapping {
    ptr: *mut bt_field_class_enumeration_signed_mapping
}
impl BtFieldClassEnumerationSignedMapping {
    /// Generate a BtFieldClassEnumerationSignedMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationSignedMapping {
        BtFieldClassEnumerationSignedMapping { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationSignedMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_enumeration_signed_mapping) -> BtFieldClassEnumerationSignedMapping {
        BtFieldClassEnumerationSignedMapping { ptr }
    }
    /// Create the equivalent BtFieldClassEnumerationSignedMappingConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassEnumerationSignedMappingConst {
      BtFieldClassEnumerationSignedMappingConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassEnumerationSignedMappingConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_signed_mapping_borrow_ranges_const")]
  ///Calls bt_field_class_enumeration_signed_mapping_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_enumeration_signed_mapping_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_enumeration_unsigned_mapping, but the pointer is const
pub struct BtFieldClassEnumerationUnsignedMappingConst {
    ptr: *const bt_field_class_enumeration_unsigned_mapping
}
impl BtFieldClassEnumerationUnsignedMappingConst {
    /// Generate a BtFieldClassEnumerationUnsignedMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationUnsignedMappingConst {
        BtFieldClassEnumerationUnsignedMappingConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationUnsignedMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_enumeration_unsigned_mapping) -> BtFieldClassEnumerationUnsignedMappingConst {
        assert!(!ptr.is_null());
        BtFieldClassEnumerationUnsignedMappingConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const")]
  ///Calls bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_enumeration_unsigned_mapping
pub struct BtFieldClassEnumerationUnsignedMapping {
    ptr: *mut bt_field_class_enumeration_unsigned_mapping
}
impl BtFieldClassEnumerationUnsignedMapping {
    /// Generate a BtFieldClassEnumerationUnsignedMappingConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassEnumerationUnsignedMapping {
        BtFieldClassEnumerationUnsignedMapping { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassEnumerationUnsignedMappingConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_enumeration_unsigned_mapping) -> BtFieldClassEnumerationUnsignedMapping {
        BtFieldClassEnumerationUnsignedMapping { ptr }
    }
    /// Create the equivalent BtFieldClassEnumerationUnsignedMappingConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassEnumerationUnsignedMappingConst {
      BtFieldClassEnumerationUnsignedMappingConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassEnumerationUnsignedMappingConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const")]
  ///Calls bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_enumeration_unsigned_mapping_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_structure_member, but the pointer is const
pub struct BtFieldClassStructureMemberConst {
    ptr: *const bt_field_class_structure_member
}
impl BtFieldClassStructureMemberConst {
    /// Generate a BtFieldClassStructureMemberConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassStructureMemberConst {
        BtFieldClassStructureMemberConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassStructureMemberConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_structure_member) -> BtFieldClassStructureMemberConst {
        assert!(!ptr.is_null());
        BtFieldClassStructureMemberConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_structure_member_get_name")]
  ///Calls bt_field_class_structure_member_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_structure_member_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_field_class_const")]
  ///Calls bt_field_class_structure_member_borrow_field_class_const
  pub fn borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_structure_member_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_user_attributes_const")]
  ///Calls bt_field_class_structure_member_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_structure_member_borrow_user_attributes_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_structure_member
pub struct BtFieldClassStructureMember {
    ptr: *mut bt_field_class_structure_member
}
impl BtFieldClassStructureMember {
    /// Generate a BtFieldClassStructureMemberConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassStructureMember {
        BtFieldClassStructureMember { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassStructureMemberConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_structure_member) -> BtFieldClassStructureMember {
        BtFieldClassStructureMember { ptr }
    }
    /// Create the equivalent BtFieldClassStructureMemberConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassStructureMemberConst {
      BtFieldClassStructureMemberConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassStructureMemberConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_structure_member_get_name")]
  ///Calls bt_field_class_structure_member_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_structure_member_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_field_class")]
  ///Calls bt_field_class_structure_member_borrow_field_class
  pub fn borrow_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_field_class_structure_member_borrow_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_field_class_const")]
  ///Calls bt_field_class_structure_member_borrow_field_class_const
  pub fn borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_structure_member_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_member_set_user_attributes")]
  ///Calls bt_field_class_structure_member_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_structure_member_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_user_attributes")]
  ///Calls bt_field_class_structure_member_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_field_class_structure_member_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_structure_member_borrow_user_attributes_const")]
  ///Calls bt_field_class_structure_member_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_structure_member_borrow_user_attributes_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_option, but the pointer is const
pub struct BtFieldClassVariantOptionConst {
    ptr: *const bt_field_class_variant_option
}
impl BtFieldClassVariantOptionConst {
    /// Generate a BtFieldClassVariantOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantOptionConst {
        BtFieldClassVariantOptionConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_variant_option) -> BtFieldClassVariantOptionConst {
        assert!(!ptr.is_null());
        BtFieldClassVariantOptionConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_option_get_name")]
  ///Calls bt_field_class_variant_option_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_variant_option_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_field_class_const")]
  ///Calls bt_field_class_variant_option_borrow_field_class_const
  pub fn borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_variant_option_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_user_attributes_const")]
  ///Calls bt_field_class_variant_option_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_variant_option_borrow_user_attributes_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_option
pub struct BtFieldClassVariantOption {
    ptr: *mut bt_field_class_variant_option
}
impl BtFieldClassVariantOption {
    /// Generate a BtFieldClassVariantOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantOption {
        BtFieldClassVariantOption { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_variant_option) -> BtFieldClassVariantOption {
        BtFieldClassVariantOption { ptr }
    }
    /// Create the equivalent BtFieldClassVariantOptionConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassVariantOptionConst {
      BtFieldClassVariantOptionConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassVariantOptionConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_option_get_name")]
  ///Calls bt_field_class_variant_option_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_field_class_variant_option_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_field_class")]
  ///Calls bt_field_class_variant_option_borrow_field_class
  pub fn borrow_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_field_class_variant_option_borrow_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_field_class_const")]
  ///Calls bt_field_class_variant_option_borrow_field_class_const
  pub fn borrow_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_field_class_variant_option_borrow_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_option_set_user_attributes")]
  ///Calls bt_field_class_variant_option_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_class_variant_option_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_user_attributes")]
  ///Calls bt_field_class_variant_option_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_field_class_variant_option_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_field_class_variant_option_borrow_user_attributes_const")]
  ///Calls bt_field_class_variant_option_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_field_class_variant_option_borrow_user_attributes_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_with_selector_field_integer_signed_option, but the pointer is const
pub struct BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    ptr: *const bt_field_class_variant_with_selector_field_integer_signed_option
}
impl BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
        BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_variant_with_selector_field_integer_signed_option) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
        assert!(!ptr.is_null());
        BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_with_selector_field_integer_signed_option
pub struct BtFieldClassVariantWithSelectorFieldIntegerSignedOption {
    ptr: *mut bt_field_class_variant_with_selector_field_integer_signed_option
}
impl BtFieldClassVariantWithSelectorFieldIntegerSignedOption {
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantWithSelectorFieldIntegerSignedOption {
        BtFieldClassVariantWithSelectorFieldIntegerSignedOption { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_variant_with_selector_field_integer_signed_option) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOption {
        BtFieldClassVariantWithSelectorFieldIntegerSignedOption { ptr }
    }
    /// Create the equivalent BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst {
      BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerSignedOptionConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetSignedConst{ ptr:bt_field_class_variant_with_selector_field_integer_signed_option_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_with_selector_field_integer_unsigned_option, but the pointer is const
pub struct BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    ptr: *const bt_field_class_variant_with_selector_field_integer_unsigned_option
}
impl BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
        BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_class_variant_with_selector_field_integer_unsigned_option) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
        assert!(!ptr.is_null());
        BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_class_variant_with_selector_field_integer_unsigned_option
pub struct BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption {
    ptr: *mut bt_field_class_variant_with_selector_field_integer_unsigned_option
}
impl BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption {
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption {
        BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_class_variant_with_selector_field_integer_unsigned_option) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption {
        BtFieldClassVariantWithSelectorFieldIntegerUnsignedOption { ptr }
    }
    /// Create the equivalent BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst version of this object.
    pub fn as_const(&mut self) -> BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst {
      BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst { ptr: self.ptr }
    }
    /// Generate a BtFieldClassVariantWithSelectorFieldIntegerUnsignedOptionConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const")]
  ///Calls bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const
  pub fn borrow_ranges_const(&self) -> BtIntegerRangeSetUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSetUnsignedConst{ ptr:bt_field_class_variant_with_selector_field_integer_unsigned_option_borrow_ranges_const(self.ptr)} }
  }

}/// Wraps all methods related to bt_field_path, but the pointer is const
pub struct BtFieldPathConst {
    ptr: *const bt_field_path
}
impl BtFieldPathConst {
    /// Generate a BtFieldPathConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldPathConst {
        BtFieldPathConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldPathConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_path) -> BtFieldPathConst {
        assert!(!ptr.is_null());
        BtFieldPathConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_path_get_root_scope")]
  ///Calls bt_field_path_get_root_scope
  pub fn get_root_scope(&self) -> BtFieldPathScope {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_path_get_root_scope(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_path_get_item_count")]
  ///Calls bt_field_path_get_item_count
  pub fn get_item_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_get_item_count(self.ptr) }
  }

  #[doc(alias = "bt_field_path_borrow_item_by_index_const")]
  ///Calls bt_field_path_borrow_item_by_index_const
  pub fn borrow_item_by_index_const(&self, index: u64) -> BtFieldPathItemConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathItemConst{ ptr:bt_field_path_borrow_item_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_path_get_ref")]
  ///Calls bt_field_path_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_field_path_put_ref")]
  ///Calls bt_field_path_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_field_path
pub struct BtFieldPath {
    ptr: *mut bt_field_path
}
impl BtFieldPath {
    /// Generate a BtFieldPathConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldPath {
        BtFieldPath { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldPathConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_path) -> BtFieldPath {
        BtFieldPath { ptr }
    }
    /// Create the equivalent BtFieldPathConst version of this object.
    pub fn as_const(&mut self) -> BtFieldPathConst {
      BtFieldPathConst { ptr: self.ptr }
    }
    /// Generate a BtFieldPathConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_path_get_root_scope")]
  ///Calls bt_field_path_get_root_scope
  pub fn get_root_scope(&self) -> BtFieldPathScope {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_path_get_root_scope(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_path_get_item_count")]
  ///Calls bt_field_path_get_item_count
  pub fn get_item_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_get_item_count(self.ptr) }
  }

  #[doc(alias = "bt_field_path_borrow_item_by_index_const")]
  ///Calls bt_field_path_borrow_item_by_index_const
  pub fn borrow_item_by_index_const(&self, index: u64) -> BtFieldPathItemConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldPathItemConst{ ptr:bt_field_path_borrow_item_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_field_path_get_ref")]
  ///Calls bt_field_path_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_field_path_put_ref")]
  ///Calls bt_field_path_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_field_path_item, but the pointer is const
pub struct BtFieldPathItemConst {
    ptr: *const bt_field_path_item
}
impl BtFieldPathItemConst {
    /// Generate a BtFieldPathItemConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldPathItemConst {
        BtFieldPathItemConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldPathItemConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_field_path_item) -> BtFieldPathItemConst {
        assert!(!ptr.is_null());
        BtFieldPathItemConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_path_item_get_type")]
  ///Calls bt_field_path_item_get_type
  pub fn get_type(&self) -> BtFieldPathItemType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_path_item_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_path_item_index_get_index")]
  ///Calls bt_field_path_item_index_get_index
  pub fn index_get_index(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_item_index_get_index(self.ptr) }
  }

}/// Wraps all methods related to bt_field_path_item
pub struct BtFieldPathItem {
    ptr: *mut bt_field_path_item
}
impl BtFieldPathItem {
    /// Generate a BtFieldPathItemConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtFieldPathItem {
        BtFieldPathItem { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtFieldPathItemConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_field_path_item) -> BtFieldPathItem {
        BtFieldPathItem { ptr }
    }
    /// Create the equivalent BtFieldPathItemConst version of this object.
    pub fn as_const(&mut self) -> BtFieldPathItemConst {
      BtFieldPathItemConst { ptr: self.ptr }
    }
    /// Generate a BtFieldPathItemConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_field_path_item_get_type")]
  ///Calls bt_field_path_item_get_type
  pub fn get_type(&self) -> BtFieldPathItemType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_field_path_item_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_field_path_item_index_get_index")]
  ///Calls bt_field_path_item_index_get_index
  pub fn index_get_index(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_field_path_item_index_get_index(self.ptr) }
  }

}/// Wraps all methods related to bt_graph, but the pointer is const
pub struct BtGraphConst {
    ptr: *const bt_graph
}
impl BtGraphConst {
    /// Generate a BtGraphConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtGraphConst {
        BtGraphConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtGraphConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_graph) -> BtGraphConst {
        assert!(!ptr.is_null());
        BtGraphConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_graph_get_ref")]
  ///Calls bt_graph_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_graph_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_graph_put_ref")]
  ///Calls bt_graph_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_graph_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_graph
pub struct BtGraph {
    ptr: *mut bt_graph
}
impl BtGraph {
    /// Generate a BtGraphConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtGraph {
        BtGraph { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtGraphConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_graph) -> BtGraph {
        BtGraph { ptr }
    }
    /// Create the equivalent BtGraphConst version of this object.
    pub fn as_const(&mut self) -> BtGraphConst {
      BtGraphConst { ptr: self.ptr }
    }
    /// Generate a BtGraphConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_graph_create")]
  ///Calls bt_graph_create
  pub fn create(mip_version: u64) -> BtGraph {
    unsafe { BtGraph{ ptr:bt_graph_create(mip_version)} }
  }

  #[doc(alias = "bt_graph_add_source_component")]
  ///Calls bt_graph_add_source_component
  pub unsafe fn add_source_component(&mut self, component_class: &BtComponentClassSourceConst, name: &str, params: &BtValueConst, logging_level: BtLoggingLevel, component: *mut *const bt_component_source) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_source_component(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_source_component_with_initialize_method_data")]
  ///Calls bt_graph_add_source_component_with_initialize_method_data
  pub unsafe fn add_source_component_with_initialize_method_data(&mut self, component_class: &BtComponentClassSourceConst, name: &str, params: &BtValueConst, initialize_method_data: *mut ::std::os::raw::c_void, logging_level: BtLoggingLevel, component: *mut *const bt_component_source) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_source_component_with_initialize_method_data(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, initialize_method_data, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_filter_component")]
  ///Calls bt_graph_add_filter_component
  pub unsafe fn add_filter_component(&mut self, component_class: &BtComponentClassFilterConst, name: &str, params: &BtValueConst, logging_level: BtLoggingLevel, component: *mut *const bt_component_filter) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_filter_component(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_filter_component_with_initialize_method_data")]
  ///Calls bt_graph_add_filter_component_with_initialize_method_data
  pub unsafe fn add_filter_component_with_initialize_method_data(&mut self, component_class: &BtComponentClassFilterConst, name: &str, params: &BtValueConst, initialize_method_data: *mut ::std::os::raw::c_void, logging_level: BtLoggingLevel, component: *mut *const bt_component_filter) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_filter_component_with_initialize_method_data(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, initialize_method_data, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_sink_component")]
  ///Calls bt_graph_add_sink_component
  pub unsafe fn add_sink_component(&mut self, component_class: &BtComponentClassSinkConst, name: &str, params: &BtValueConst, logging_level: BtLoggingLevel, component: *mut *const bt_component_sink) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_sink_component(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_sink_component_with_initialize_method_data")]
  ///Calls bt_graph_add_sink_component_with_initialize_method_data
  pub unsafe fn add_sink_component_with_initialize_method_data(&mut self, component_class: &BtComponentClassSinkConst, name: &str, params: &BtValueConst, initialize_method_data: *mut ::std::os::raw::c_void, logging_level: BtLoggingLevel, component: *mut *const bt_component_sink) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_sink_component_with_initialize_method_data(self.ptr, component_class.ptr, name.as_ptr(), params.ptr, initialize_method_data, num::ToPrimitive::to_u32(&logging_level).unwrap(), component)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_simple_sink_component")]
  ///Calls bt_graph_add_simple_sink_component
  pub unsafe fn add_simple_sink_component(&mut self, name: &str, initialize_func: bt_graph_simple_sink_component_initialize_func, consume_func: bt_graph_simple_sink_component_consume_func, finalize_func: bt_graph_simple_sink_component_finalize_func, user_data: *mut ::std::os::raw::c_void, component: *mut *const bt_component_sink) -> BtGraphAddComponentStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_simple_sink_component(self.ptr, name.as_ptr(), initialize_func, consume_func, finalize_func, user_data, component)).unwrap() }
  }

  #[doc(alias = "bt_graph_connect_ports")]
  ///Calls bt_graph_connect_ports
  pub unsafe fn connect_ports(&mut self, upstream_port: &BtPortOutputConst, downstream_port: &BtPortInputConst, connection: *mut *const bt_connection) -> BtGraphConnectPortsStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_connect_ports(self.ptr, upstream_port.ptr, downstream_port.ptr, connection)).unwrap() }
  }

  #[doc(alias = "bt_graph_run")]
  ///Calls bt_graph_run
  pub fn run(&mut self) -> BtGraphRunStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_run(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_graph_run_once")]
  ///Calls bt_graph_run_once
  pub fn run_once(&mut self) -> BtGraphRunOnceStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_run_once(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_interrupter")]
  ///Calls bt_graph_add_interrupter
  pub unsafe fn add_interrupter(&mut self, interrupter: &BtInterrupterConst) -> BtGraphAddInterrupterStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_interrupter(self.ptr, interrupter.ptr)).unwrap() }
  }

  #[doc(alias = "bt_graph_borrow_default_interrupter")]
  ///Calls bt_graph_borrow_default_interrupter
  pub fn borrow_default_interrupter(&mut self) -> BtInterrupter {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtInterrupter{ ptr:bt_graph_borrow_default_interrupter(self.ptr)} }
  }

  #[doc(alias = "bt_graph_add_filter_component_input_port_added_listener")]
  ///Calls bt_graph_add_filter_component_input_port_added_listener
  pub unsafe fn add_filter_component_input_port_added_listener(&mut self, user_func: bt_graph_filter_component_input_port_added_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtGraphAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_filter_component_input_port_added_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_sink_component_input_port_added_listener")]
  ///Calls bt_graph_add_sink_component_input_port_added_listener
  pub unsafe fn add_sink_component_input_port_added_listener(&mut self, user_func: bt_graph_sink_component_input_port_added_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtGraphAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_sink_component_input_port_added_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_source_component_output_port_added_listener")]
  ///Calls bt_graph_add_source_component_output_port_added_listener
  pub unsafe fn add_source_component_output_port_added_listener(&mut self, user_func: bt_graph_source_component_output_port_added_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtGraphAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_source_component_output_port_added_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_graph_add_filter_component_output_port_added_listener")]
  ///Calls bt_graph_add_filter_component_output_port_added_listener
  pub unsafe fn add_filter_component_output_port_added_listener(&mut self, user_func: bt_graph_filter_component_output_port_added_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtGraphAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_graph_add_filter_component_output_port_added_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_graph_get_ref")]
  ///Calls bt_graph_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_graph_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_graph_put_ref")]
  ///Calls bt_graph_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_graph_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set, but the pointer is const
pub struct BtIntegerRangeSetConst {
    ptr: *const bt_integer_range_set
}
impl BtIntegerRangeSetConst {
    /// Generate a BtIntegerRangeSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSetConst {
        BtIntegerRangeSetConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_integer_range_set) -> BtIntegerRangeSetConst {
        assert!(!ptr.is_null());
        BtIntegerRangeSetConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_get_range_count")]
  ///Calls bt_integer_range_set_get_range_count
  pub fn get_range_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_get_range_count(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set
pub struct BtIntegerRangeSet {
    ptr: *mut bt_integer_range_set
}
impl BtIntegerRangeSet {
    /// Generate a BtIntegerRangeSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSet {
        BtIntegerRangeSet { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_integer_range_set) -> BtIntegerRangeSet {
        BtIntegerRangeSet { ptr }
    }
    /// Create the equivalent BtIntegerRangeSetConst version of this object.
    pub fn as_const(&mut self) -> BtIntegerRangeSetConst {
      BtIntegerRangeSetConst { ptr: self.ptr }
    }
    /// Generate a BtIntegerRangeSetConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_get_range_count")]
  ///Calls bt_integer_range_set_get_range_count
  pub fn get_range_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_get_range_count(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set_signed, but the pointer is const
pub struct BtIntegerRangeSetSignedConst {
    ptr: *const bt_integer_range_set_signed
}
impl BtIntegerRangeSetSignedConst {
    /// Generate a BtIntegerRangeSetSignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSetSignedConst {
        BtIntegerRangeSetSignedConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetSignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_integer_range_set_signed) -> BtIntegerRangeSetSignedConst {
        assert!(!ptr.is_null());
        BtIntegerRangeSetSignedConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_signed_borrow_range_by_index_const")]
  ///Calls bt_integer_range_set_signed_borrow_range_by_index_const
  pub fn borrow_range_by_index_const(&self, index: u64) -> BtIntegerRangeSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSignedConst{ ptr:bt_integer_range_set_signed_borrow_range_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_integer_range_set_signed_is_equal")]
  ///Calls bt_integer_range_set_signed_is_equal
  pub unsafe fn is_equal(&self, int_range_set_b: &BtIntegerRangeSetSignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_set_signed_is_equal(self.ptr, int_range_set_b.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_integer_range_set_signed_get_ref")]
  ///Calls bt_integer_range_set_signed_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_signed_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_set_signed_put_ref")]
  ///Calls bt_integer_range_set_signed_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_signed_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set_signed
pub struct BtIntegerRangeSetSigned {
    ptr: *mut bt_integer_range_set_signed
}
impl BtIntegerRangeSetSigned {
    /// Generate a BtIntegerRangeSetSignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSetSigned {
        BtIntegerRangeSetSigned { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetSignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_integer_range_set_signed) -> BtIntegerRangeSetSigned {
        BtIntegerRangeSetSigned { ptr }
    }
    /// Create the equivalent BtIntegerRangeSetSignedConst version of this object.
    pub fn as_const(&mut self) -> BtIntegerRangeSetSignedConst {
      BtIntegerRangeSetSignedConst { ptr: self.ptr }
    }
    /// Generate a BtIntegerRangeSetSignedConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_signed_create")]
  ///Calls bt_integer_range_set_signed_create
  pub fn create() -> BtIntegerRangeSetSigned {
    unsafe { BtIntegerRangeSetSigned{ ptr:bt_integer_range_set_signed_create()} }
  }

  #[doc(alias = "bt_integer_range_set_signed_add_range")]
  ///Calls bt_integer_range_set_signed_add_range
  pub fn add_range(&mut self, lower: i64, upper: i64) -> BtIntegerRangeSetAddRangeStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_integer_range_set_signed_add_range(self.ptr, lower, upper)).unwrap() }
  }

  #[doc(alias = "bt_integer_range_set_signed_borrow_range_by_index_const")]
  ///Calls bt_integer_range_set_signed_borrow_range_by_index_const
  pub fn borrow_range_by_index_const(&self, index: u64) -> BtIntegerRangeSignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeSignedConst{ ptr:bt_integer_range_set_signed_borrow_range_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_integer_range_set_signed_is_equal")]
  ///Calls bt_integer_range_set_signed_is_equal
  pub unsafe fn is_equal(&self, int_range_set_b: &BtIntegerRangeSetSignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_set_signed_is_equal(self.ptr, int_range_set_b.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_integer_range_set_signed_get_ref")]
  ///Calls bt_integer_range_set_signed_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_signed_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_set_signed_put_ref")]
  ///Calls bt_integer_range_set_signed_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_signed_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set_unsigned, but the pointer is const
pub struct BtIntegerRangeSetUnsignedConst {
    ptr: *const bt_integer_range_set_unsigned
}
impl BtIntegerRangeSetUnsignedConst {
    /// Generate a BtIntegerRangeSetUnsignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSetUnsignedConst {
        BtIntegerRangeSetUnsignedConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetUnsignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_integer_range_set_unsigned) -> BtIntegerRangeSetUnsignedConst {
        assert!(!ptr.is_null());
        BtIntegerRangeSetUnsignedConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_unsigned_borrow_range_by_index_const")]
  ///Calls bt_integer_range_set_unsigned_borrow_range_by_index_const
  pub fn borrow_range_by_index_const(&self, index: u64) -> BtIntegerRangeUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeUnsignedConst{ ptr:bt_integer_range_set_unsigned_borrow_range_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_is_equal")]
  ///Calls bt_integer_range_set_unsigned_is_equal
  pub unsafe fn is_equal(&self, int_range_set_b: &BtIntegerRangeSetUnsignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_set_unsigned_is_equal(self.ptr, int_range_set_b.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_get_ref")]
  ///Calls bt_integer_range_set_unsigned_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_unsigned_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_put_ref")]
  ///Calls bt_integer_range_set_unsigned_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_unsigned_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_set_unsigned
pub struct BtIntegerRangeSetUnsigned {
    ptr: *mut bt_integer_range_set_unsigned
}
impl BtIntegerRangeSetUnsigned {
    /// Generate a BtIntegerRangeSetUnsignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSetUnsigned {
        BtIntegerRangeSetUnsigned { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSetUnsignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_integer_range_set_unsigned) -> BtIntegerRangeSetUnsigned {
        BtIntegerRangeSetUnsigned { ptr }
    }
    /// Create the equivalent BtIntegerRangeSetUnsignedConst version of this object.
    pub fn as_const(&mut self) -> BtIntegerRangeSetUnsignedConst {
      BtIntegerRangeSetUnsignedConst { ptr: self.ptr }
    }
    /// Generate a BtIntegerRangeSetUnsignedConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_set_unsigned_create")]
  ///Calls bt_integer_range_set_unsigned_create
  pub fn create() -> BtIntegerRangeSetUnsigned {
    unsafe { BtIntegerRangeSetUnsigned{ ptr:bt_integer_range_set_unsigned_create()} }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_add_range")]
  ///Calls bt_integer_range_set_unsigned_add_range
  pub fn add_range(&mut self, lower: u64, upper: u64) -> BtIntegerRangeSetAddRangeStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_integer_range_set_unsigned_add_range(self.ptr, lower, upper)).unwrap() }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_borrow_range_by_index_const")]
  ///Calls bt_integer_range_set_unsigned_borrow_range_by_index_const
  pub fn borrow_range_by_index_const(&self, index: u64) -> BtIntegerRangeUnsignedConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtIntegerRangeUnsignedConst{ ptr:bt_integer_range_set_unsigned_borrow_range_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_is_equal")]
  ///Calls bt_integer_range_set_unsigned_is_equal
  pub unsafe fn is_equal(&self, int_range_set_b: &BtIntegerRangeSetUnsignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_set_unsigned_is_equal(self.ptr, int_range_set_b.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_get_ref")]
  ///Calls bt_integer_range_set_unsigned_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_unsigned_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_set_unsigned_put_ref")]
  ///Calls bt_integer_range_set_unsigned_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_set_unsigned_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_integer_range_signed, but the pointer is const
pub struct BtIntegerRangeSignedConst {
    ptr: *const bt_integer_range_signed
}
impl BtIntegerRangeSignedConst {
    /// Generate a BtIntegerRangeSignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSignedConst {
        BtIntegerRangeSignedConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_integer_range_signed) -> BtIntegerRangeSignedConst {
        assert!(!ptr.is_null());
        BtIntegerRangeSignedConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_signed_get_lower")]
  ///Calls bt_integer_range_signed_get_lower
  pub fn get_lower(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_signed_get_lower(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_signed_get_upper")]
  ///Calls bt_integer_range_signed_get_upper
  pub fn get_upper(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_signed_get_upper(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_signed_is_equal")]
  ///Calls bt_integer_range_signed_is_equal
  pub unsafe fn is_equal(&self, b_int_range: &BtIntegerRangeSignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_signed_is_equal(self.ptr, b_int_range.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_integer_range_signed
pub struct BtIntegerRangeSigned {
    ptr: *mut bt_integer_range_signed
}
impl BtIntegerRangeSigned {
    /// Generate a BtIntegerRangeSignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeSigned {
        BtIntegerRangeSigned { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeSignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_integer_range_signed) -> BtIntegerRangeSigned {
        BtIntegerRangeSigned { ptr }
    }
    /// Create the equivalent BtIntegerRangeSignedConst version of this object.
    pub fn as_const(&mut self) -> BtIntegerRangeSignedConst {
      BtIntegerRangeSignedConst { ptr: self.ptr }
    }
    /// Generate a BtIntegerRangeSignedConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_signed_get_lower")]
  ///Calls bt_integer_range_signed_get_lower
  pub fn get_lower(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_signed_get_lower(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_signed_get_upper")]
  ///Calls bt_integer_range_signed_get_upper
  pub fn get_upper(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_signed_get_upper(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_signed_is_equal")]
  ///Calls bt_integer_range_signed_is_equal
  pub unsafe fn is_equal(&self, b_int_range: &BtIntegerRangeSignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_signed_is_equal(self.ptr, b_int_range.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_integer_range_unsigned, but the pointer is const
pub struct BtIntegerRangeUnsignedConst {
    ptr: *const bt_integer_range_unsigned
}
impl BtIntegerRangeUnsignedConst {
    /// Generate a BtIntegerRangeUnsignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeUnsignedConst {
        BtIntegerRangeUnsignedConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeUnsignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_integer_range_unsigned) -> BtIntegerRangeUnsignedConst {
        assert!(!ptr.is_null());
        BtIntegerRangeUnsignedConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_unsigned_get_lower")]
  ///Calls bt_integer_range_unsigned_get_lower
  pub fn get_lower(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_unsigned_get_lower(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_unsigned_get_upper")]
  ///Calls bt_integer_range_unsigned_get_upper
  pub fn get_upper(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_unsigned_get_upper(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_unsigned_is_equal")]
  ///Calls bt_integer_range_unsigned_is_equal
  pub unsafe fn is_equal(&self, b_int_range: &BtIntegerRangeUnsignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_unsigned_is_equal(self.ptr, b_int_range.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_integer_range_unsigned
pub struct BtIntegerRangeUnsigned {
    ptr: *mut bt_integer_range_unsigned
}
impl BtIntegerRangeUnsigned {
    /// Generate a BtIntegerRangeUnsignedConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtIntegerRangeUnsigned {
        BtIntegerRangeUnsigned { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtIntegerRangeUnsignedConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_integer_range_unsigned) -> BtIntegerRangeUnsigned {
        BtIntegerRangeUnsigned { ptr }
    }
    /// Create the equivalent BtIntegerRangeUnsignedConst version of this object.
    pub fn as_const(&mut self) -> BtIntegerRangeUnsignedConst {
      BtIntegerRangeUnsignedConst { ptr: self.ptr }
    }
    /// Generate a BtIntegerRangeUnsignedConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_integer_range_unsigned_get_lower")]
  ///Calls bt_integer_range_unsigned_get_lower
  pub fn get_lower(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_unsigned_get_lower(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_unsigned_get_upper")]
  ///Calls bt_integer_range_unsigned_get_upper
  pub fn get_upper(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_integer_range_unsigned_get_upper(self.ptr) }
  }

  #[doc(alias = "bt_integer_range_unsigned_is_equal")]
  ///Calls bt_integer_range_unsigned_is_equal
  pub unsafe fn is_equal(&self, b_int_range: &BtIntegerRangeUnsignedConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_integer_range_unsigned_is_equal(self.ptr, b_int_range.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_interrupter, but the pointer is const
pub struct BtInterrupterConst {
    ptr: *const bt_interrupter
}
impl BtInterrupterConst {
    /// Generate a BtInterrupterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtInterrupterConst {
        BtInterrupterConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtInterrupterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_interrupter) -> BtInterrupterConst {
        assert!(!ptr.is_null());
        BtInterrupterConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_interrupter_is_set")]
  ///Calls bt_interrupter_is_set
  pub fn is_set(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_interrupter_is_set(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_interrupter_get_ref")]
  ///Calls bt_interrupter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_interrupter_put_ref")]
  ///Calls bt_interrupter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_interrupter
pub struct BtInterrupter {
    ptr: *mut bt_interrupter
}
impl BtInterrupter {
    /// Generate a BtInterrupterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtInterrupter {
        BtInterrupter { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtInterrupterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_interrupter) -> BtInterrupter {
        BtInterrupter { ptr }
    }
    /// Create the equivalent BtInterrupterConst version of this object.
    pub fn as_const(&mut self) -> BtInterrupterConst {
      BtInterrupterConst { ptr: self.ptr }
    }
    /// Generate a BtInterrupterConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_interrupter_create")]
  ///Calls bt_interrupter_create
  pub fn create() -> BtInterrupter {
    unsafe { BtInterrupter{ ptr:bt_interrupter_create()} }
  }

  #[doc(alias = "bt_interrupter_set")]
  ///Calls bt_interrupter_set
  pub fn set(&mut self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_set(self.ptr) }
  }

  #[doc(alias = "bt_interrupter_reset")]
  ///Calls bt_interrupter_reset
  pub fn reset(&mut self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_reset(self.ptr) }
  }

  #[doc(alias = "bt_interrupter_is_set")]
  ///Calls bt_interrupter_is_set
  pub fn is_set(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_interrupter_is_set(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_interrupter_get_ref")]
  ///Calls bt_interrupter_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_interrupter_put_ref")]
  ///Calls bt_interrupter_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_interrupter_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message, but the pointer is const
pub struct BtMessageConst {
    ptr: *const bt_message
}
impl BtMessageConst {
    /// Generate a BtMessageConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessageConst {
        BtMessageConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_message) -> BtMessageConst {
        assert!(!ptr.is_null());
        BtMessageConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_get_type")]
  ///Calls bt_message_get_type
  pub fn get_type(&self) -> BtMessageType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_stream_const")]
  ///Calls bt_message_stream_beginning_borrow_stream_const
  pub fn stream_beginning_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_stream_beginning_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_stream_beginning_borrow_default_clock_snapshot_const
  pub unsafe fn stream_beginning_borrow_default_clock_snapshot_const(&self, clock_snapshot: *mut *const bt_clock_snapshot) -> BtMessageStreamClockSnapshotState {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_stream_beginning_borrow_default_clock_snapshot_const(self.ptr, clock_snapshot)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_stream_beginning_borrow_stream_class_default_clock_class_const
  pub fn stream_beginning_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_stream_beginning_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_borrow_stream_const")]
  ///Calls bt_message_stream_end_borrow_stream_const
  pub fn stream_end_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_stream_end_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_stream_end_borrow_default_clock_snapshot_const
  pub unsafe fn stream_end_borrow_default_clock_snapshot_const(&self, clock_snapshot: *mut *const bt_clock_snapshot) -> BtMessageStreamClockSnapshotState {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_stream_end_borrow_default_clock_snapshot_const(self.ptr, clock_snapshot)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_end_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_stream_end_borrow_stream_class_default_clock_class_const
  pub fn stream_end_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_stream_end_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_event_const")]
  ///Calls bt_message_event_borrow_event_const
  pub fn event_borrow_event_const(&self) -> BtEventConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventConst{ ptr:bt_message_event_borrow_event_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_event_borrow_default_clock_snapshot_const
  pub fn event_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_event_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_event_borrow_stream_class_default_clock_class_const
  pub fn event_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_event_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_packet_const")]
  ///Calls bt_message_packet_beginning_borrow_packet_const
  pub fn packet_beginning_borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_message_packet_beginning_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_packet_beginning_borrow_default_clock_snapshot_const
  pub fn packet_beginning_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_packet_beginning_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_packet_beginning_borrow_stream_class_default_clock_class_const
  pub fn packet_beginning_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_packet_beginning_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_packet_const")]
  ///Calls bt_message_packet_end_borrow_packet_const
  pub fn packet_end_borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_message_packet_end_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_packet_end_borrow_default_clock_snapshot_const
  pub fn packet_end_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_packet_end_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_packet_end_borrow_stream_class_default_clock_class_const
  pub fn packet_end_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_packet_end_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_stream_const")]
  ///Calls bt_message_discarded_events_borrow_stream_const
  pub fn discarded_events_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_discarded_events_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const
  pub fn discarded_events_borrow_beginning_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_end_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_events_borrow_end_default_clock_snapshot_const
  pub fn discarded_events_borrow_end_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_events_borrow_end_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_discarded_events_borrow_stream_class_default_clock_class_const
  pub fn discarded_events_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_discarded_events_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_get_count")]
  ///Calls bt_message_discarded_events_get_count
  pub unsafe fn discarded_events_get_count(&self, count: *mut u64) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_discarded_events_get_count(self.ptr, count)).unwrap() }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_stream_const")]
  ///Calls bt_message_discarded_packets_borrow_stream_const
  pub fn discarded_packets_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_discarded_packets_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const
  pub fn discarded_packets_borrow_beginning_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_end_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_packets_borrow_end_default_clock_snapshot_const
  pub fn discarded_packets_borrow_end_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_packets_borrow_end_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_discarded_packets_borrow_stream_class_default_clock_class_const
  pub fn discarded_packets_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_discarded_packets_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_get_count")]
  ///Calls bt_message_discarded_packets_get_count
  pub unsafe fn discarded_packets_get_count(&self, count: *mut u64) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_discarded_packets_get_count(self.ptr, count)).unwrap() }
  }

  #[doc(alias = "bt_message_message_iterator_inactivity_borrow_clock_snapshot_const")]
  ///Calls bt_message_message_iterator_inactivity_borrow_clock_snapshot_const
  pub fn message_iterator_inactivity_borrow_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_message_iterator_inactivity_borrow_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_get_ref")]
  ///Calls bt_message_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_put_ref")]
  ///Calls bt_message_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message
pub struct BtMessage {
    ptr: *mut bt_message
}
impl BtMessage {
    /// Generate a BtMessageConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessage {
        BtMessage { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_message) -> BtMessage {
        BtMessage { ptr }
    }
    /// Create the equivalent BtMessageConst version of this object.
    pub fn as_const(&mut self) -> BtMessageConst {
      BtMessageConst { ptr: self.ptr }
    }
    /// Generate a BtMessageConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_get_type")]
  ///Calls bt_message_get_type
  pub fn get_type(&self) -> BtMessageType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_beginning_create")]
  ///Calls bt_message_stream_beginning_create
  pub unsafe fn stream_beginning_create(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_stream_beginning_create(self_message_iterator.ptr, stream.ptr)} }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_stream")]
  ///Calls bt_message_stream_beginning_borrow_stream
  pub fn stream_beginning_borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_message_stream_beginning_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_stream_const")]
  ///Calls bt_message_stream_beginning_borrow_stream_const
  pub fn stream_beginning_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_stream_beginning_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_beginning_set_default_clock_snapshot")]
  ///Calls bt_message_stream_beginning_set_default_clock_snapshot
  pub fn stream_beginning_set_default_clock_snapshot(&mut self, value: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_stream_beginning_set_default_clock_snapshot(self.ptr, value) }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_stream_beginning_borrow_default_clock_snapshot_const
  pub unsafe fn stream_beginning_borrow_default_clock_snapshot_const(&self, clock_snapshot: *mut *const bt_clock_snapshot) -> BtMessageStreamClockSnapshotState {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_stream_beginning_borrow_default_clock_snapshot_const(self.ptr, clock_snapshot)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_beginning_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_stream_beginning_borrow_stream_class_default_clock_class_const
  pub fn stream_beginning_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_stream_beginning_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_create")]
  ///Calls bt_message_stream_end_create
  pub unsafe fn stream_end_create(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_stream_end_create(self_message_iterator.ptr, stream.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_borrow_stream")]
  ///Calls bt_message_stream_end_borrow_stream
  pub fn stream_end_borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_message_stream_end_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_borrow_stream_const")]
  ///Calls bt_message_stream_end_borrow_stream_const
  pub fn stream_end_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_stream_end_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_stream_end_set_default_clock_snapshot")]
  ///Calls bt_message_stream_end_set_default_clock_snapshot
  pub fn stream_end_set_default_clock_snapshot(&mut self, value: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_stream_end_set_default_clock_snapshot(self.ptr, value) }
  }

  #[doc(alias = "bt_message_stream_end_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_stream_end_borrow_default_clock_snapshot_const
  pub unsafe fn stream_end_borrow_default_clock_snapshot_const(&self, clock_snapshot: *mut *const bt_clock_snapshot) -> BtMessageStreamClockSnapshotState {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_stream_end_borrow_default_clock_snapshot_const(self.ptr, clock_snapshot)).unwrap() }
  }

  #[doc(alias = "bt_message_stream_end_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_stream_end_borrow_stream_class_default_clock_class_const
  pub fn stream_end_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_stream_end_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_create")]
  ///Calls bt_message_event_create
  pub unsafe fn event_create(self_message_iterator: &BtSelfMessageIterator, event_class: &BtEventClassConst, stream: &BtStreamConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_event_create(self_message_iterator.ptr, event_class.ptr, stream.ptr)} }
  }

  #[doc(alias = "bt_message_event_create_with_default_clock_snapshot")]
  ///Calls bt_message_event_create_with_default_clock_snapshot
  pub unsafe fn event_create_with_default_clock_snapshot(self_message_iterator: &BtSelfMessageIterator, event_class: &BtEventClassConst, stream: &BtStreamConst, clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_event_create_with_default_clock_snapshot(self_message_iterator.ptr, event_class.ptr, stream.ptr, clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_event_create_with_packet")]
  ///Calls bt_message_event_create_with_packet
  pub unsafe fn event_create_with_packet(self_message_iterator: &BtSelfMessageIterator, event_class: &BtEventClassConst, packet: &BtPacketConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_event_create_with_packet(self_message_iterator.ptr, event_class.ptr, packet.ptr)} }
  }

  #[doc(alias = "bt_message_event_create_with_packet_and_default_clock_snapshot")]
  ///Calls bt_message_event_create_with_packet_and_default_clock_snapshot
  pub unsafe fn event_create_with_packet_and_default_clock_snapshot(self_message_iterator: &BtSelfMessageIterator, event_class: &BtEventClassConst, packet: &BtPacketConst, clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_event_create_with_packet_and_default_clock_snapshot(self_message_iterator.ptr, event_class.ptr, packet.ptr, clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_event_borrow_event")]
  ///Calls bt_message_event_borrow_event
  pub fn event_borrow_event(&mut self) -> BtEvent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEvent{ ptr:bt_message_event_borrow_event(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_event_const")]
  ///Calls bt_message_event_borrow_event_const
  pub fn event_borrow_event_const(&self) -> BtEventConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventConst{ ptr:bt_message_event_borrow_event_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_event_borrow_default_clock_snapshot_const
  pub fn event_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_event_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_event_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_event_borrow_stream_class_default_clock_class_const
  pub fn event_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_event_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_create")]
  ///Calls bt_message_packet_beginning_create
  pub unsafe fn packet_beginning_create(self_message_iterator: &BtSelfMessageIterator, packet: &BtPacketConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_packet_beginning_create(self_message_iterator.ptr, packet.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_create_with_default_clock_snapshot")]
  ///Calls bt_message_packet_beginning_create_with_default_clock_snapshot
  pub unsafe fn packet_beginning_create_with_default_clock_snapshot(self_message_iterator: &BtSelfMessageIterator, packet: &BtPacketConst, clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_packet_beginning_create_with_default_clock_snapshot(self_message_iterator.ptr, packet.ptr, clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_packet")]
  ///Calls bt_message_packet_beginning_borrow_packet
  pub fn packet_beginning_borrow_packet(&mut self) -> BtPacket {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacket{ ptr:bt_message_packet_beginning_borrow_packet(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_packet_const")]
  ///Calls bt_message_packet_beginning_borrow_packet_const
  pub fn packet_beginning_borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_message_packet_beginning_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_packet_beginning_borrow_default_clock_snapshot_const
  pub fn packet_beginning_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_packet_beginning_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_beginning_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_packet_beginning_borrow_stream_class_default_clock_class_const
  pub fn packet_beginning_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_packet_beginning_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_create")]
  ///Calls bt_message_packet_end_create
  pub unsafe fn packet_end_create(self_message_iterator: &BtSelfMessageIterator, packet: &BtPacketConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_packet_end_create(self_message_iterator.ptr, packet.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_create_with_default_clock_snapshot")]
  ///Calls bt_message_packet_end_create_with_default_clock_snapshot
  pub unsafe fn packet_end_create_with_default_clock_snapshot(self_message_iterator: &BtSelfMessageIterator, packet: &BtPacketConst, clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_packet_end_create_with_default_clock_snapshot(self_message_iterator.ptr, packet.ptr, clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_packet")]
  ///Calls bt_message_packet_end_borrow_packet
  pub fn packet_end_borrow_packet(&mut self) -> BtPacket {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacket{ ptr:bt_message_packet_end_borrow_packet(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_packet_const")]
  ///Calls bt_message_packet_end_borrow_packet_const
  pub fn packet_end_borrow_packet_const(&self) -> BtPacketConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPacketConst{ ptr:bt_message_packet_end_borrow_packet_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_default_clock_snapshot_const")]
  ///Calls bt_message_packet_end_borrow_default_clock_snapshot_const
  pub fn packet_end_borrow_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_packet_end_borrow_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_packet_end_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_packet_end_borrow_stream_class_default_clock_class_const
  pub fn packet_end_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_packet_end_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_create")]
  ///Calls bt_message_discarded_events_create
  pub unsafe fn discarded_events_create(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_discarded_events_create(self_message_iterator.ptr, stream.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_create_with_default_clock_snapshots")]
  ///Calls bt_message_discarded_events_create_with_default_clock_snapshots
  pub unsafe fn discarded_events_create_with_default_clock_snapshots(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst, beginning_clock_snapshot_value: u64, end_clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_discarded_events_create_with_default_clock_snapshots(self_message_iterator.ptr, stream.ptr, beginning_clock_snapshot_value, end_clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_stream")]
  ///Calls bt_message_discarded_events_borrow_stream
  pub fn discarded_events_borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_message_discarded_events_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_stream_const")]
  ///Calls bt_message_discarded_events_borrow_stream_const
  pub fn discarded_events_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_discarded_events_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const
  pub fn discarded_events_borrow_beginning_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_events_borrow_beginning_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_end_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_events_borrow_end_default_clock_snapshot_const
  pub fn discarded_events_borrow_end_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_events_borrow_end_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_discarded_events_borrow_stream_class_default_clock_class_const
  pub fn discarded_events_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_discarded_events_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_events_set_count")]
  ///Calls bt_message_discarded_events_set_count
  pub fn discarded_events_set_count(&mut self, count: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_discarded_events_set_count(self.ptr, count) }
  }

  #[doc(alias = "bt_message_discarded_events_get_count")]
  ///Calls bt_message_discarded_events_get_count
  pub unsafe fn discarded_events_get_count(&self, count: *mut u64) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_discarded_events_get_count(self.ptr, count)).unwrap() }
  }

  #[doc(alias = "bt_message_discarded_packets_create")]
  ///Calls bt_message_discarded_packets_create
  pub unsafe fn discarded_packets_create(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_discarded_packets_create(self_message_iterator.ptr, stream.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_create_with_default_clock_snapshots")]
  ///Calls bt_message_discarded_packets_create_with_default_clock_snapshots
  pub unsafe fn discarded_packets_create_with_default_clock_snapshots(self_message_iterator: &BtSelfMessageIterator, stream: &BtStreamConst, beginning_clock_snapshot_value: u64, end_clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_discarded_packets_create_with_default_clock_snapshots(self_message_iterator.ptr, stream.ptr, beginning_clock_snapshot_value, end_clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_stream")]
  ///Calls bt_message_discarded_packets_borrow_stream
  pub fn discarded_packets_borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_message_discarded_packets_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_stream_const")]
  ///Calls bt_message_discarded_packets_borrow_stream_const
  pub fn discarded_packets_borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_message_discarded_packets_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const
  pub fn discarded_packets_borrow_beginning_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_packets_borrow_beginning_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_end_default_clock_snapshot_const")]
  ///Calls bt_message_discarded_packets_borrow_end_default_clock_snapshot_const
  pub fn discarded_packets_borrow_end_default_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_discarded_packets_borrow_end_default_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_borrow_stream_class_default_clock_class_const")]
  ///Calls bt_message_discarded_packets_borrow_stream_class_default_clock_class_const
  pub fn discarded_packets_borrow_stream_class_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_message_discarded_packets_borrow_stream_class_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_discarded_packets_set_count")]
  ///Calls bt_message_discarded_packets_set_count
  pub fn discarded_packets_set_count(&mut self, count: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_discarded_packets_set_count(self.ptr, count) }
  }

  #[doc(alias = "bt_message_discarded_packets_get_count")]
  ///Calls bt_message_discarded_packets_get_count
  pub unsafe fn discarded_packets_get_count(&self, count: *mut u64) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_discarded_packets_get_count(self.ptr, count)).unwrap() }
  }

  #[doc(alias = "bt_message_message_iterator_inactivity_create")]
  ///Calls bt_message_message_iterator_inactivity_create
  pub unsafe fn message_iterator_inactivity_create(self_message_iterator: &BtSelfMessageIterator, clock_class: &BtClockClassConst, clock_snapshot_value: u64) -> BtMessage {
    unsafe { BtMessage{ ptr:bt_message_message_iterator_inactivity_create(self_message_iterator.ptr, clock_class.ptr, clock_snapshot_value)} }
  }

  #[doc(alias = "bt_message_message_iterator_inactivity_borrow_clock_snapshot_const")]
  ///Calls bt_message_message_iterator_inactivity_borrow_clock_snapshot_const
  pub fn message_iterator_inactivity_borrow_clock_snapshot_const(&self) -> BtClockSnapshotConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockSnapshotConst{ ptr:bt_message_message_iterator_inactivity_borrow_clock_snapshot_const(self.ptr)} }
  }

  #[doc(alias = "bt_message_get_ref")]
  ///Calls bt_message_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_put_ref")]
  ///Calls bt_message_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message_iterator, but the pointer is const
pub struct BtMessageIteratorConst {
    ptr: *const bt_message_iterator
}
impl BtMessageIteratorConst {
    /// Generate a BtMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessageIteratorConst {
        BtMessageIteratorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_message_iterator) -> BtMessageIteratorConst {
        assert!(!ptr.is_null());
        BtMessageIteratorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_iterator_get_ref")]
  ///Calls bt_message_iterator_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_iterator_put_ref")]
  ///Calls bt_message_iterator_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message_iterator
pub struct BtMessageIterator {
    ptr: *mut bt_message_iterator
}
impl BtMessageIterator {
    /// Generate a BtMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessageIterator {
        BtMessageIterator { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_message_iterator) -> BtMessageIterator {
        BtMessageIterator { ptr }
    }
    /// Create the equivalent BtMessageIteratorConst version of this object.
    pub fn as_const(&mut self) -> BtMessageIteratorConst {
      BtMessageIteratorConst { ptr: self.ptr }
    }
    /// Generate a BtMessageIteratorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_iterator_create_from_message_iterator")]
  ///Calls bt_message_iterator_create_from_message_iterator
  pub unsafe fn create_from_message_iterator(self_message_iterator: &BtSelfMessageIterator, port: &BtSelfComponentPortInput, message_iterator: *mut *mut bt_message_iterator) -> BtMessageIteratorCreateFromMessageIteratorStatus {
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_create_from_message_iterator(self_message_iterator.ptr, port.ptr, message_iterator)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_create_from_sink_component")]
  ///Calls bt_message_iterator_create_from_sink_component
  pub unsafe fn create_from_sink_component(self_component_sink: &BtSelfComponentSink, port: &BtSelfComponentPortInput, message_iterator: *mut *mut bt_message_iterator) -> BtMessageIteratorCreateFromSinkComponentStatus {
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_create_from_sink_component(self_component_sink.ptr, port.ptr, message_iterator)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_borrow_component")]
  ///Calls bt_message_iterator_borrow_component
  pub fn borrow_component(&mut self) -> BtComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponent{ ptr:bt_message_iterator_borrow_component(self.ptr)} }
  }

  #[doc(alias = "bt_message_iterator_next")]
  ///Calls bt_message_iterator_next
  pub unsafe fn next(&mut self, messages: *mut bt_message_array_const, count: *mut u64) -> BtMessageIteratorNextStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_next(self.ptr, messages, count)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_can_seek_beginning")]
  ///Calls bt_message_iterator_can_seek_beginning
  pub unsafe fn can_seek_beginning(&mut self, can_seek_beginning: *mut bt_bool) -> BtMessageIteratorCanSeekBeginningStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_can_seek_beginning(self.ptr, can_seek_beginning)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_seek_beginning")]
  ///Calls bt_message_iterator_seek_beginning
  pub fn seek_beginning(&mut self) -> BtMessageIteratorSeekBeginningStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_seek_beginning(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_can_seek_ns_from_origin")]
  ///Calls bt_message_iterator_can_seek_ns_from_origin
  pub unsafe fn can_seek_ns_from_origin(&mut self, ns_from_origin: i64, can_seek_ns_from_origin: *mut bt_bool) -> BtMessageIteratorCanSeekNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_can_seek_ns_from_origin(self.ptr, ns_from_origin, can_seek_ns_from_origin)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_seek_ns_from_origin")]
  ///Calls bt_message_iterator_seek_ns_from_origin
  pub fn seek_ns_from_origin(&mut self, ns_from_origin: i64) -> BtMessageIteratorSeekNsFromOriginStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_message_iterator_seek_ns_from_origin(self.ptr, ns_from_origin)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_can_seek_forward")]
  ///Calls bt_message_iterator_can_seek_forward
  pub fn can_seek_forward(&mut self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_message_iterator_can_seek_forward(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_message_iterator_get_ref")]
  ///Calls bt_message_iterator_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_iterator_put_ref")]
  ///Calls bt_message_iterator_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message_iterator_class, but the pointer is const
pub struct BtMessageIteratorClassConst {
    ptr: *const bt_message_iterator_class
}
impl BtMessageIteratorClassConst {
    /// Generate a BtMessageIteratorClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessageIteratorClassConst {
        BtMessageIteratorClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageIteratorClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_message_iterator_class) -> BtMessageIteratorClassConst {
        assert!(!ptr.is_null());
        BtMessageIteratorClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_iterator_class_get_ref")]
  ///Calls bt_message_iterator_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_iterator_class_put_ref")]
  ///Calls bt_message_iterator_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_message_iterator_class
pub struct BtMessageIteratorClass {
    ptr: *mut bt_message_iterator_class
}
impl BtMessageIteratorClass {
    /// Generate a BtMessageIteratorClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtMessageIteratorClass {
        BtMessageIteratorClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtMessageIteratorClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_message_iterator_class) -> BtMessageIteratorClass {
        BtMessageIteratorClass { ptr }
    }
    /// Create the equivalent BtMessageIteratorClassConst version of this object.
    pub fn as_const(&mut self) -> BtMessageIteratorClassConst {
      BtMessageIteratorClassConst { ptr: self.ptr }
    }
    /// Generate a BtMessageIteratorClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_message_iterator_class_create")]
  ///Calls bt_message_iterator_class_create
  pub fn create(next_method: bt_message_iterator_class_next_method) -> BtMessageIteratorClass {
    unsafe { BtMessageIteratorClass{ ptr:bt_message_iterator_class_create(next_method)} }
  }

  #[doc(alias = "bt_message_iterator_class_set_finalize_method")]
  ///Calls bt_message_iterator_class_set_finalize_method
  pub fn set_finalize_method(&mut self, method: bt_message_iterator_class_finalize_method) -> BtMessageIteratorClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_iterator_class_set_finalize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_class_set_initialize_method")]
  ///Calls bt_message_iterator_class_set_initialize_method
  pub fn set_initialize_method(&mut self, method: bt_message_iterator_class_initialize_method) -> BtMessageIteratorClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_iterator_class_set_initialize_method(self.ptr, method)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_class_set_seek_beginning_methods")]
  ///Calls bt_message_iterator_class_set_seek_beginning_methods
  pub fn set_seek_beginning_methods(&mut self, seek_method: bt_message_iterator_class_seek_beginning_method, can_seek_method: bt_message_iterator_class_can_seek_beginning_method) -> BtMessageIteratorClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_iterator_class_set_seek_beginning_methods(self.ptr, seek_method, can_seek_method)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_class_set_seek_ns_from_origin_methods")]
  ///Calls bt_message_iterator_class_set_seek_ns_from_origin_methods
  pub fn set_seek_ns_from_origin_methods(&mut self, seek_method: bt_message_iterator_class_seek_ns_from_origin_method, can_seek_method: bt_message_iterator_class_can_seek_ns_from_origin_method) -> BtMessageIteratorClassSetMethodStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_message_iterator_class_set_seek_ns_from_origin_methods(self.ptr, seek_method, can_seek_method)).unwrap() }
  }

  #[doc(alias = "bt_message_iterator_class_get_ref")]
  ///Calls bt_message_iterator_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_message_iterator_class_put_ref")]
  ///Calls bt_message_iterator_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_message_iterator_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_object, but the pointer is const
pub struct BtObjectConst {
    ptr: *const bt_object
}
impl BtObjectConst {
    /// Generate a BtObjectConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtObjectConst {
        BtObjectConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtObjectConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_object) -> BtObjectConst {
        assert!(!ptr.is_null());
        BtObjectConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_object
pub struct BtObject {
    ptr: *mut bt_object
}
impl BtObject {
    /// Generate a BtObjectConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtObject {
        BtObject { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtObjectConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_object) -> BtObject {
        BtObject { ptr }
    }
    /// Create the equivalent BtObjectConst version of this object.
    pub fn as_const(&mut self) -> BtObjectConst {
      BtObjectConst { ptr: self.ptr }
    }
    /// Generate a BtObjectConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_packet, but the pointer is const
pub struct BtPacketConst {
    ptr: *const bt_packet
}
impl BtPacketConst {
    /// Generate a BtPacketConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPacketConst {
        BtPacketConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPacketConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_packet) -> BtPacketConst {
        assert!(!ptr.is_null());
        BtPacketConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_packet_borrow_stream_const")]
  ///Calls bt_packet_borrow_stream_const
  pub fn borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_packet_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_packet_borrow_context_field_const")]
  ///Calls bt_packet_borrow_context_field_const
  pub fn borrow_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_packet_borrow_context_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_packet_get_ref")]
  ///Calls bt_packet_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_packet_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_packet_put_ref")]
  ///Calls bt_packet_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_packet_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_packet
pub struct BtPacket {
    ptr: *mut bt_packet
}
impl BtPacket {
    /// Generate a BtPacketConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPacket {
        BtPacket { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPacketConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_packet) -> BtPacket {
        BtPacket { ptr }
    }
    /// Create the equivalent BtPacketConst version of this object.
    pub fn as_const(&mut self) -> BtPacketConst {
      BtPacketConst { ptr: self.ptr }
    }
    /// Generate a BtPacketConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_packet_create")]
  ///Calls bt_packet_create
  pub unsafe fn create(stream: &BtStreamConst) -> BtPacket {
    unsafe { BtPacket{ ptr:bt_packet_create(stream.ptr)} }
  }

  #[doc(alias = "bt_packet_borrow_stream")]
  ///Calls bt_packet_borrow_stream
  pub fn borrow_stream(&mut self) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_packet_borrow_stream(self.ptr)} }
  }

  #[doc(alias = "bt_packet_borrow_stream_const")]
  ///Calls bt_packet_borrow_stream_const
  pub fn borrow_stream_const(&self) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_packet_borrow_stream_const(self.ptr)} }
  }

  #[doc(alias = "bt_packet_borrow_context_field")]
  ///Calls bt_packet_borrow_context_field
  pub fn borrow_context_field(&mut self) -> BtField {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtField{ ptr:bt_packet_borrow_context_field(self.ptr)} }
  }

  #[doc(alias = "bt_packet_borrow_context_field_const")]
  ///Calls bt_packet_borrow_context_field_const
  pub fn borrow_context_field_const(&self) -> BtFieldConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldConst{ ptr:bt_packet_borrow_context_field_const(self.ptr)} }
  }

  #[doc(alias = "bt_packet_get_ref")]
  ///Calls bt_packet_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_packet_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_packet_put_ref")]
  ///Calls bt_packet_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_packet_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_plugin, but the pointer is const
pub struct BtPluginConst {
    ptr: *const bt_plugin
}
impl BtPluginConst {
    /// Generate a BtPluginConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPluginConst {
        BtPluginConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_plugin) -> BtPluginConst {
        assert!(!ptr.is_null());
        BtPluginConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_plugin_get_name")]
  ///Calls bt_plugin_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_description")]
  ///Calls bt_plugin_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_author")]
  ///Calls bt_plugin_get_author
  pub fn get_author(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_author(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_license")]
  ///Calls bt_plugin_get_license
  pub fn get_license(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_license(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_path")]
  ///Calls bt_plugin_get_path
  pub fn get_path(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_path(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_version")]
  ///Calls bt_plugin_get_version
  pub unsafe fn get_version(&self, major: *mut ::std::os::raw::c_uint, minor: *mut ::std::os::raw::c_uint, patch: *mut ::std::os::raw::c_uint, extra: *mut *const ::std::os::raw::c_char) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_plugin_get_version(self.ptr, major, minor, patch, extra)).unwrap() }
  }

  #[doc(alias = "bt_plugin_get_source_component_class_count")]
  ///Calls bt_plugin_get_source_component_class_count
  pub fn get_source_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_source_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_get_filter_component_class_count")]
  ///Calls bt_plugin_get_filter_component_class_count
  pub fn get_filter_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_filter_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_get_sink_component_class_count")]
  ///Calls bt_plugin_get_sink_component_class_count
  pub fn get_sink_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_sink_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_borrow_source_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_source_component_class_by_index_const
  pub fn borrow_source_component_class_by_index_const(&self, index: u64) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_plugin_borrow_source_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_filter_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_filter_component_class_by_index_const
  pub fn borrow_filter_component_class_by_index_const(&self, index: u64) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_plugin_borrow_filter_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_sink_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_sink_component_class_by_index_const
  pub fn borrow_sink_component_class_by_index_const(&self, index: u64) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_plugin_borrow_sink_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_source_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_source_component_class_by_name_const
  pub unsafe fn borrow_source_component_class_by_name_const(&self, name: &str) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_plugin_borrow_source_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_borrow_filter_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_filter_component_class_by_name_const
  pub unsafe fn borrow_filter_component_class_by_name_const(&self, name: &str) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_plugin_borrow_filter_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_borrow_sink_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_sink_component_class_by_name_const
  pub unsafe fn borrow_sink_component_class_by_name_const(&self, name: &str) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_plugin_borrow_sink_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_get_ref")]
  ///Calls bt_plugin_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_plugin_put_ref")]
  ///Calls bt_plugin_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_plugin
pub struct BtPlugin {
    ptr: *mut bt_plugin
}
impl BtPlugin {
    /// Generate a BtPluginConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPlugin {
        BtPlugin { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_plugin) -> BtPlugin {
        BtPlugin { ptr }
    }
    /// Create the equivalent BtPluginConst version of this object.
    pub fn as_const(&mut self) -> BtPluginConst {
      BtPluginConst { ptr: self.ptr }
    }
    /// Generate a BtPluginConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_plugin_get_name")]
  ///Calls bt_plugin_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_description")]
  ///Calls bt_plugin_get_description
  pub fn get_description(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_description(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_author")]
  ///Calls bt_plugin_get_author
  pub fn get_author(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_author(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_license")]
  ///Calls bt_plugin_get_license
  pub fn get_license(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_license(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_path")]
  ///Calls bt_plugin_get_path
  pub fn get_path(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_plugin_get_path(self.ptr)) }
  }

  #[doc(alias = "bt_plugin_get_version")]
  ///Calls bt_plugin_get_version
  pub unsafe fn get_version(&self, major: *mut ::std::os::raw::c_uint, minor: *mut ::std::os::raw::c_uint, patch: *mut ::std::os::raw::c_uint, extra: *mut *const ::std::os::raw::c_char) -> BtPropertyAvailability {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_plugin_get_version(self.ptr, major, minor, patch, extra)).unwrap() }
  }

  #[doc(alias = "bt_plugin_get_source_component_class_count")]
  ///Calls bt_plugin_get_source_component_class_count
  pub fn get_source_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_source_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_get_filter_component_class_count")]
  ///Calls bt_plugin_get_filter_component_class_count
  pub fn get_filter_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_filter_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_get_sink_component_class_count")]
  ///Calls bt_plugin_get_sink_component_class_count
  pub fn get_sink_component_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_sink_component_class_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_borrow_source_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_source_component_class_by_index_const
  pub fn borrow_source_component_class_by_index_const(&self, index: u64) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_plugin_borrow_source_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_filter_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_filter_component_class_by_index_const
  pub fn borrow_filter_component_class_by_index_const(&self, index: u64) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_plugin_borrow_filter_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_sink_component_class_by_index_const")]
  ///Calls bt_plugin_borrow_sink_component_class_by_index_const
  pub fn borrow_sink_component_class_by_index_const(&self, index: u64) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_plugin_borrow_sink_component_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_borrow_source_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_source_component_class_by_name_const
  pub unsafe fn borrow_source_component_class_by_name_const(&self, name: &str) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_plugin_borrow_source_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_borrow_filter_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_filter_component_class_by_name_const
  pub unsafe fn borrow_filter_component_class_by_name_const(&self, name: &str) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_plugin_borrow_filter_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_borrow_sink_component_class_by_name_const")]
  ///Calls bt_plugin_borrow_sink_component_class_by_name_const
  pub unsafe fn borrow_sink_component_class_by_name_const(&self, name: &str) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_plugin_borrow_sink_component_class_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_plugin_get_ref")]
  ///Calls bt_plugin_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_plugin_put_ref")]
  ///Calls bt_plugin_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_plugin_set, but the pointer is const
pub struct BtPluginSetConst {
    ptr: *const bt_plugin_set
}
impl BtPluginSetConst {
    /// Generate a BtPluginSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPluginSetConst {
        BtPluginSetConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_plugin_set) -> BtPluginSetConst {
        assert!(!ptr.is_null());
        BtPluginSetConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_plugin_set_get_plugin_count")]
  ///Calls bt_plugin_set_get_plugin_count
  pub fn get_plugin_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_get_plugin_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_set_borrow_plugin_by_index_const")]
  ///Calls bt_plugin_set_borrow_plugin_by_index_const
  pub fn borrow_plugin_by_index_const(&self, index: u64) -> BtPluginConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPluginConst{ ptr:bt_plugin_set_borrow_plugin_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_set_get_ref")]
  ///Calls bt_plugin_set_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_plugin_set_put_ref")]
  ///Calls bt_plugin_set_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_plugin_set
pub struct BtPluginSet {
    ptr: *mut bt_plugin_set
}
impl BtPluginSet {
    /// Generate a BtPluginSetConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPluginSet {
        BtPluginSet { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginSetConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_plugin_set) -> BtPluginSet {
        BtPluginSet { ptr }
    }
    /// Create the equivalent BtPluginSetConst version of this object.
    pub fn as_const(&mut self) -> BtPluginSetConst {
      BtPluginSetConst { ptr: self.ptr }
    }
    /// Generate a BtPluginSetConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_plugin_set_get_plugin_count")]
  ///Calls bt_plugin_set_get_plugin_count
  pub fn get_plugin_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_get_plugin_count(self.ptr) }
  }

  #[doc(alias = "bt_plugin_set_borrow_plugin_by_index_const")]
  ///Calls bt_plugin_set_borrow_plugin_by_index_const
  pub fn borrow_plugin_by_index_const(&self, index: u64) -> BtPluginConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPluginConst{ ptr:bt_plugin_set_borrow_plugin_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_plugin_set_get_ref")]
  ///Calls bt_plugin_set_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_plugin_set_put_ref")]
  ///Calls bt_plugin_set_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_plugin_set_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_plugin_so_shared_lib_handle, but the pointer is const
pub struct BtPluginSoSharedLibHandleConst {
    ptr: *const bt_plugin_so_shared_lib_handle
}
impl BtPluginSoSharedLibHandleConst {
    /// Generate a BtPluginSoSharedLibHandleConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPluginSoSharedLibHandleConst {
        BtPluginSoSharedLibHandleConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginSoSharedLibHandleConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_plugin_so_shared_lib_handle) -> BtPluginSoSharedLibHandleConst {
        assert!(!ptr.is_null());
        BtPluginSoSharedLibHandleConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_plugin_so_shared_lib_handle
pub struct BtPluginSoSharedLibHandle {
    ptr: *mut bt_plugin_so_shared_lib_handle
}
impl BtPluginSoSharedLibHandle {
    /// Generate a BtPluginSoSharedLibHandleConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPluginSoSharedLibHandle {
        BtPluginSoSharedLibHandle { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPluginSoSharedLibHandleConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_plugin_so_shared_lib_handle) -> BtPluginSoSharedLibHandle {
        BtPluginSoSharedLibHandle { ptr }
    }
    /// Create the equivalent BtPluginSoSharedLibHandleConst version of this object.
    pub fn as_const(&mut self) -> BtPluginSoSharedLibHandleConst {
      BtPluginSoSharedLibHandleConst { ptr: self.ptr }
    }
    /// Generate a BtPluginSoSharedLibHandleConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_port, but the pointer is const
pub struct BtPortConst {
    ptr: *const bt_port
}
impl BtPortConst {
    /// Generate a BtPortConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortConst {
        BtPortConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_port) -> BtPortConst {
        assert!(!ptr.is_null());
        BtPortConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_get_type")]
  ///Calls bt_port_get_type
  pub fn get_type(&self) -> BtPortType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_port_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_port_borrow_connection_const")]
  ///Calls bt_port_borrow_connection_const
  pub fn borrow_connection_const(&self) -> BtConnectionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtConnectionConst{ ptr:bt_port_borrow_connection_const(self.ptr)} }
  }

  #[doc(alias = "bt_port_borrow_component_const")]
  ///Calls bt_port_borrow_component_const
  pub fn borrow_component_const(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_port_borrow_component_const(self.ptr)} }
  }

  #[doc(alias = "bt_port_get_name")]
  ///Calls bt_port_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_port_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_port_is_connected")]
  ///Calls bt_port_is_connected
  pub fn is_connected(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_connected(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_port_get_ref")]
  ///Calls bt_port_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_put_ref")]
  ///Calls bt_port_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_is_input_inline")]
  ///Calls bt_port_is_input_inline
  pub fn is_input_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_input_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_port_is_output_inline")]
  ///Calls bt_port_is_output_inline
  pub fn is_output_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_output_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_port
pub struct BtPort {
    ptr: *mut bt_port
}
impl BtPort {
    /// Generate a BtPortConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPort {
        BtPort { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_port) -> BtPort {
        BtPort { ptr }
    }
    /// Create the equivalent BtPortConst version of this object.
    pub fn as_const(&mut self) -> BtPortConst {
      BtPortConst { ptr: self.ptr }
    }
    /// Generate a BtPortConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_get_type")]
  ///Calls bt_port_get_type
  pub fn get_type(&self) -> BtPortType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_port_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_port_borrow_connection_const")]
  ///Calls bt_port_borrow_connection_const
  pub fn borrow_connection_const(&self) -> BtConnectionConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtConnectionConst{ ptr:bt_port_borrow_connection_const(self.ptr)} }
  }

  #[doc(alias = "bt_port_borrow_component_const")]
  ///Calls bt_port_borrow_component_const
  pub fn borrow_component_const(&self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_port_borrow_component_const(self.ptr)} }
  }

  #[doc(alias = "bt_port_get_name")]
  ///Calls bt_port_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_port_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_port_is_connected")]
  ///Calls bt_port_is_connected
  pub fn is_connected(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_connected(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_port_get_ref")]
  ///Calls bt_port_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_put_ref")]
  ///Calls bt_port_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_is_input_inline")]
  ///Calls bt_port_is_input_inline
  pub fn is_input_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_input_inline(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_port_is_output_inline")]
  ///Calls bt_port_is_output_inline
  pub fn is_output_inline(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_port_is_output_inline(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_port_input, but the pointer is const
pub struct BtPortInputConst {
    ptr: *const bt_port_input
}
impl BtPortInputConst {
    /// Generate a BtPortInputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortInputConst {
        BtPortInputConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortInputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_port_input) -> BtPortInputConst {
        assert!(!ptr.is_null());
        BtPortInputConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_input_get_ref")]
  ///Calls bt_port_input_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_input_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_input_put_ref")]
  ///Calls bt_port_input_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_input_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_input_as_port_const_inline")]
  ///Calls bt_port_input_as_port_const_inline
  pub fn as_port_const_inline(&self) -> BtPortConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortConst{ ptr:bt_port_input_as_port_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_port_input
pub struct BtPortInput {
    ptr: *mut bt_port_input
}
impl BtPortInput {
    /// Generate a BtPortInputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortInput {
        BtPortInput { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortInputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_port_input) -> BtPortInput {
        BtPortInput { ptr }
    }
    /// Create the equivalent BtPortInputConst version of this object.
    pub fn as_const(&mut self) -> BtPortInputConst {
      BtPortInputConst { ptr: self.ptr }
    }
    /// Generate a BtPortInputConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_input_get_ref")]
  ///Calls bt_port_input_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_input_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_input_put_ref")]
  ///Calls bt_port_input_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_input_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_input_as_port_const_inline")]
  ///Calls bt_port_input_as_port_const_inline
  pub fn as_port_const_inline(&self) -> BtPortConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortConst{ ptr:bt_port_input_as_port_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_port_output, but the pointer is const
pub struct BtPortOutputConst {
    ptr: *const bt_port_output
}
impl BtPortOutputConst {
    /// Generate a BtPortOutputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortOutputConst {
        BtPortOutputConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortOutputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_port_output) -> BtPortOutputConst {
        assert!(!ptr.is_null());
        BtPortOutputConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_output_get_ref")]
  ///Calls bt_port_output_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_output_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_output_put_ref")]
  ///Calls bt_port_output_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_output_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_output_as_port_const_inline")]
  ///Calls bt_port_output_as_port_const_inline
  pub fn as_port_const_inline(&self) -> BtPortConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortConst{ ptr:bt_port_output_as_port_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_port_output
pub struct BtPortOutput {
    ptr: *mut bt_port_output
}
impl BtPortOutput {
    /// Generate a BtPortOutputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortOutput {
        BtPortOutput { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortOutputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_port_output) -> BtPortOutput {
        BtPortOutput { ptr }
    }
    /// Create the equivalent BtPortOutputConst version of this object.
    pub fn as_const(&mut self) -> BtPortOutputConst {
      BtPortOutputConst { ptr: self.ptr }
    }
    /// Generate a BtPortOutputConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_port_output_get_ref")]
  ///Calls bt_port_output_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_output_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_output_put_ref")]
  ///Calls bt_port_output_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_port_output_put_ref(self.ptr) }
  }

  #[doc(alias = "bt_port_output_as_port_const_inline")]
  ///Calls bt_port_output_as_port_const_inline
  pub fn as_port_const_inline(&self) -> BtPortConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortConst{ ptr:bt_port_output_as_port_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_port_output_message_iterator, but the pointer is const
pub struct BtPortOutputMessageIteratorConst {
    ptr: *const bt_port_output_message_iterator
}
impl BtPortOutputMessageIteratorConst {
    /// Generate a BtPortOutputMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortOutputMessageIteratorConst {
        BtPortOutputMessageIteratorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortOutputMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_port_output_message_iterator) -> BtPortOutputMessageIteratorConst {
        assert!(!ptr.is_null());
        BtPortOutputMessageIteratorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_port_output_message_iterator
pub struct BtPortOutputMessageIterator {
    ptr: *mut bt_port_output_message_iterator
}
impl BtPortOutputMessageIterator {
    /// Generate a BtPortOutputMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPortOutputMessageIterator {
        BtPortOutputMessageIterator { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPortOutputMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_port_output_message_iterator) -> BtPortOutputMessageIterator {
        BtPortOutputMessageIterator { ptr }
    }
    /// Create the equivalent BtPortOutputMessageIteratorConst version of this object.
    pub fn as_const(&mut self) -> BtPortOutputMessageIteratorConst {
      BtPortOutputMessageIteratorConst { ptr: self.ptr }
    }
    /// Generate a BtPortOutputMessageIteratorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_private_query_executor, but the pointer is const
pub struct BtPrivateQueryExecutorConst {
    ptr: *const bt_private_query_executor
}
impl BtPrivateQueryExecutorConst {
    /// Generate a BtPrivateQueryExecutorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPrivateQueryExecutorConst {
        BtPrivateQueryExecutorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPrivateQueryExecutorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_private_query_executor) -> BtPrivateQueryExecutorConst {
        assert!(!ptr.is_null());
        BtPrivateQueryExecutorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_private_query_executor
pub struct BtPrivateQueryExecutor {
    ptr: *mut bt_private_query_executor
}
impl BtPrivateQueryExecutor {
    /// Generate a BtPrivateQueryExecutorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtPrivateQueryExecutor {
        BtPrivateQueryExecutor { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtPrivateQueryExecutorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_private_query_executor) -> BtPrivateQueryExecutor {
        BtPrivateQueryExecutor { ptr }
    }
    /// Create the equivalent BtPrivateQueryExecutorConst version of this object.
    pub fn as_const(&mut self) -> BtPrivateQueryExecutorConst {
      BtPrivateQueryExecutorConst { ptr: self.ptr }
    }
    /// Generate a BtPrivateQueryExecutorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_private_query_executor_as_query_executor_const_inline")]
  ///Calls bt_private_query_executor_as_query_executor_const_inline
  pub fn as_query_executor_const_inline(&mut self) -> BtQueryExecutorConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtQueryExecutorConst{ ptr:bt_private_query_executor_as_query_executor_const_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_query_executor, but the pointer is const
pub struct BtQueryExecutorConst {
    ptr: *const bt_query_executor
}
impl BtQueryExecutorConst {
    /// Generate a BtQueryExecutorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtQueryExecutorConst {
        BtQueryExecutorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtQueryExecutorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_query_executor) -> BtQueryExecutorConst {
        assert!(!ptr.is_null());
        BtQueryExecutorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_query_executor_get_logging_level")]
  ///Calls bt_query_executor_get_logging_level
  pub fn get_logging_level(&self) -> BtLoggingLevel {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_query_executor_get_logging_level(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_query_executor_is_interrupted")]
  ///Calls bt_query_executor_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_query_executor_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_query_executor_get_ref")]
  ///Calls bt_query_executor_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_query_executor_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_query_executor_put_ref")]
  ///Calls bt_query_executor_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_query_executor_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_query_executor
pub struct BtQueryExecutor {
    ptr: *mut bt_query_executor
}
impl BtQueryExecutor {
    /// Generate a BtQueryExecutorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtQueryExecutor {
        BtQueryExecutor { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtQueryExecutorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_query_executor) -> BtQueryExecutor {
        BtQueryExecutor { ptr }
    }
    /// Create the equivalent BtQueryExecutorConst version of this object.
    pub fn as_const(&mut self) -> BtQueryExecutorConst {
      BtQueryExecutorConst { ptr: self.ptr }
    }
    /// Generate a BtQueryExecutorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_query_executor_create")]
  ///Calls bt_query_executor_create
  pub unsafe fn create(component_class: &BtComponentClassConst, object_name: &str, params: &BtValueConst) -> BtQueryExecutor {
    unsafe { BtQueryExecutor{ ptr:bt_query_executor_create(component_class.ptr, object_name.as_ptr(), params.ptr)} }
  }

  #[doc(alias = "bt_query_executor_create_with_method_data")]
  ///Calls bt_query_executor_create_with_method_data
  pub unsafe fn create_with_method_data(component_class: &BtComponentClassConst, object_name: &str, params: &BtValueConst, method_data: *mut ::std::os::raw::c_void) -> BtQueryExecutor {
    unsafe { BtQueryExecutor{ ptr:bt_query_executor_create_with_method_data(component_class.ptr, object_name.as_ptr(), params.ptr, method_data)} }
  }

  #[doc(alias = "bt_query_executor_query")]
  ///Calls bt_query_executor_query
  pub unsafe fn query(&mut self, result: *mut *const bt_value) -> BtQueryExecutorQueryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_query_executor_query(self.ptr, result)).unwrap() }
  }

  #[doc(alias = "bt_query_executor_set_logging_level")]
  ///Calls bt_query_executor_set_logging_level
  pub fn set_logging_level(&mut self, logging_level: BtLoggingLevel) -> BtQueryExecutorSetLoggingLevelStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_query_executor_set_logging_level(self.ptr, num::ToPrimitive::to_u32(&logging_level).unwrap())).unwrap() }
  }

  #[doc(alias = "bt_query_executor_get_logging_level")]
  ///Calls bt_query_executor_get_logging_level
  pub fn get_logging_level(&self) -> BtLoggingLevel {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_query_executor_get_logging_level(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_query_executor_add_interrupter")]
  ///Calls bt_query_executor_add_interrupter
  pub unsafe fn add_interrupter(&mut self, interrupter: &BtInterrupterConst) -> BtQueryExecutorAddInterrupterStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_query_executor_add_interrupter(self.ptr, interrupter.ptr)).unwrap() }
  }

  #[doc(alias = "bt_query_executor_borrow_default_interrupter")]
  ///Calls bt_query_executor_borrow_default_interrupter
  pub fn borrow_default_interrupter(&mut self) -> BtInterrupter {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtInterrupter{ ptr:bt_query_executor_borrow_default_interrupter(self.ptr)} }
  }

  #[doc(alias = "bt_query_executor_is_interrupted")]
  ///Calls bt_query_executor_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_query_executor_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_query_executor_get_ref")]
  ///Calls bt_query_executor_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_query_executor_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_query_executor_put_ref")]
  ///Calls bt_query_executor_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_query_executor_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_self_component, but the pointer is const
pub struct BtSelfComponentConst {
    ptr: *const bt_self_component
}
impl BtSelfComponentConst {
    /// Generate a BtSelfComponentConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentConst {
        BtSelfComponentConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component) -> BtSelfComponentConst {
        assert!(!ptr.is_null());
        BtSelfComponentConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_get_data")]
  ///Calls bt_self_component_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_get_data(self.ptr) }
  }

}/// Wraps all methods related to bt_self_component
pub struct BtSelfComponent {
    ptr: *mut bt_self_component
}
impl BtSelfComponent {
    /// Generate a BtSelfComponentConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponent {
        BtSelfComponent { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component) -> BtSelfComponent {
        BtSelfComponent { ptr }
    }
    /// Create the equivalent BtSelfComponentConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentConst {
      BtSelfComponentConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_set_data")]
  ///Calls bt_self_component_set_data
  pub unsafe fn set_data(&mut self, user_data: *mut ::std::os::raw::c_void)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_set_data(self.ptr, user_data) }
  }

  #[doc(alias = "bt_self_component_get_data")]
  ///Calls bt_self_component_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_get_data(self.ptr) }
  }

  #[doc(alias = "bt_self_component_get_graph_mip_version")]
  ///Calls bt_self_component_get_graph_mip_version
  pub fn get_graph_mip_version(&mut self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_get_graph_mip_version(self.ptr) }
  }

  #[doc(alias = "bt_self_component_as_component_inline")]
  ///Calls bt_self_component_as_component_inline
  pub fn as_component_inline(&mut self) -> BtComponentConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentConst{ ptr:bt_self_component_as_component_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_class, but the pointer is const
pub struct BtSelfComponentClassConst {
    ptr: *const bt_self_component_class
}
impl BtSelfComponentClassConst {
    /// Generate a BtSelfComponentClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassConst {
        BtSelfComponentClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_class) -> BtSelfComponentClassConst {
        assert!(!ptr.is_null());
        BtSelfComponentClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_class
pub struct BtSelfComponentClass {
    ptr: *mut bt_self_component_class
}
impl BtSelfComponentClass {
    /// Generate a BtSelfComponentClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClass {
        BtSelfComponentClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_class) -> BtSelfComponentClass {
        BtSelfComponentClass { ptr }
    }
    /// Create the equivalent BtSelfComponentClassConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentClassConst {
      BtSelfComponentClassConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_class_as_component_class_inline")]
  ///Calls bt_self_component_class_as_component_class_inline
  pub fn as_component_class_inline(&mut self) -> BtComponentClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassConst{ ptr:bt_self_component_class_as_component_class_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_class_filter, but the pointer is const
pub struct BtSelfComponentClassFilterConst {
    ptr: *const bt_self_component_class_filter
}
impl BtSelfComponentClassFilterConst {
    /// Generate a BtSelfComponentClassFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassFilterConst {
        BtSelfComponentClassFilterConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_class_filter) -> BtSelfComponentClassFilterConst {
        assert!(!ptr.is_null());
        BtSelfComponentClassFilterConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_class_filter
pub struct BtSelfComponentClassFilter {
    ptr: *mut bt_self_component_class_filter
}
impl BtSelfComponentClassFilter {
    /// Generate a BtSelfComponentClassFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassFilter {
        BtSelfComponentClassFilter { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_class_filter) -> BtSelfComponentClassFilter {
        BtSelfComponentClassFilter { ptr }
    }
    /// Create the equivalent BtSelfComponentClassFilterConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentClassFilterConst {
      BtSelfComponentClassFilterConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentClassFilterConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_class_filter_as_component_class_filter_inline")]
  ///Calls bt_self_component_class_filter_as_component_class_filter_inline
  pub fn as_component_class_filter_inline(&mut self) -> BtComponentClassFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassFilterConst{ ptr:bt_self_component_class_filter_as_component_class_filter_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_class_filter_as_self_component_class_inline")]
  ///Calls bt_self_component_class_filter_as_self_component_class_inline
  pub fn as_self_component_class_inline(&mut self) -> BtSelfComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentClass{ ptr:bt_self_component_class_filter_as_self_component_class_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_class_sink, but the pointer is const
pub struct BtSelfComponentClassSinkConst {
    ptr: *const bt_self_component_class_sink
}
impl BtSelfComponentClassSinkConst {
    /// Generate a BtSelfComponentClassSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassSinkConst {
        BtSelfComponentClassSinkConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_class_sink) -> BtSelfComponentClassSinkConst {
        assert!(!ptr.is_null());
        BtSelfComponentClassSinkConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_class_sink
pub struct BtSelfComponentClassSink {
    ptr: *mut bt_self_component_class_sink
}
impl BtSelfComponentClassSink {
    /// Generate a BtSelfComponentClassSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassSink {
        BtSelfComponentClassSink { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_class_sink) -> BtSelfComponentClassSink {
        BtSelfComponentClassSink { ptr }
    }
    /// Create the equivalent BtSelfComponentClassSinkConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentClassSinkConst {
      BtSelfComponentClassSinkConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentClassSinkConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_class_sink_as_component_class_sink_inline")]
  ///Calls bt_self_component_class_sink_as_component_class_sink_inline
  pub fn as_component_class_sink_inline(&mut self) -> BtComponentClassSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSinkConst{ ptr:bt_self_component_class_sink_as_component_class_sink_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_class_sink_as_self_component_class_inline")]
  ///Calls bt_self_component_class_sink_as_self_component_class_inline
  pub fn as_self_component_class_inline(&mut self) -> BtSelfComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentClass{ ptr:bt_self_component_class_sink_as_self_component_class_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_class_source, but the pointer is const
pub struct BtSelfComponentClassSourceConst {
    ptr: *const bt_self_component_class_source
}
impl BtSelfComponentClassSourceConst {
    /// Generate a BtSelfComponentClassSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassSourceConst {
        BtSelfComponentClassSourceConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_class_source) -> BtSelfComponentClassSourceConst {
        assert!(!ptr.is_null());
        BtSelfComponentClassSourceConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_class_source
pub struct BtSelfComponentClassSource {
    ptr: *mut bt_self_component_class_source
}
impl BtSelfComponentClassSource {
    /// Generate a BtSelfComponentClassSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentClassSource {
        BtSelfComponentClassSource { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentClassSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_class_source) -> BtSelfComponentClassSource {
        BtSelfComponentClassSource { ptr }
    }
    /// Create the equivalent BtSelfComponentClassSourceConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentClassSourceConst {
      BtSelfComponentClassSourceConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentClassSourceConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_class_source_as_component_class_source_inline")]
  ///Calls bt_self_component_class_source_as_component_class_source_inline
  pub fn as_component_class_source_inline(&mut self) -> BtComponentClassSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentClassSourceConst{ ptr:bt_self_component_class_source_as_component_class_source_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_class_source_as_self_component_class_inline")]
  ///Calls bt_self_component_class_source_as_self_component_class_inline
  pub fn as_self_component_class_inline(&mut self) -> BtSelfComponentClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentClass{ ptr:bt_self_component_class_source_as_self_component_class_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_filter, but the pointer is const
pub struct BtSelfComponentFilterConst {
    ptr: *const bt_self_component_filter
}
impl BtSelfComponentFilterConst {
    /// Generate a BtSelfComponentFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentFilterConst {
        BtSelfComponentFilterConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_filter) -> BtSelfComponentFilterConst {
        assert!(!ptr.is_null());
        BtSelfComponentFilterConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_filter
pub struct BtSelfComponentFilter {
    ptr: *mut bt_self_component_filter
}
impl BtSelfComponentFilter {
    /// Generate a BtSelfComponentFilterConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentFilter {
        BtSelfComponentFilter { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentFilterConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_filter) -> BtSelfComponentFilter {
        BtSelfComponentFilter { ptr }
    }
    /// Create the equivalent BtSelfComponentFilterConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentFilterConst {
      BtSelfComponentFilterConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentFilterConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_filter_add_input_port")]
  ///Calls bt_self_component_filter_add_input_port
  pub unsafe fn add_input_port(&mut self, name: &str, user_data: *mut ::std::os::raw::c_void, self_component_port: *mut *mut bt_self_component_port_input) -> BtSelfComponentAddPortStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_self_component_filter_add_input_port(self.ptr, name.as_ptr(), user_data, self_component_port)).unwrap() }
  }

  #[doc(alias = "bt_self_component_filter_add_output_port")]
  ///Calls bt_self_component_filter_add_output_port
  pub unsafe fn add_output_port(&mut self, name: &str, user_data: *mut ::std::os::raw::c_void, self_component_port: *mut *mut bt_self_component_port_output) -> BtSelfComponentAddPortStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_self_component_filter_add_output_port(self.ptr, name.as_ptr(), user_data, self_component_port)).unwrap() }
  }

  #[doc(alias = "bt_self_component_filter_borrow_input_port_by_index")]
  ///Calls bt_self_component_filter_borrow_input_port_by_index
  pub fn borrow_input_port_by_index(&mut self, index: u64) -> BtSelfComponentPortInput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortInput{ ptr:bt_self_component_filter_borrow_input_port_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_self_component_filter_borrow_output_port_by_index")]
  ///Calls bt_self_component_filter_borrow_output_port_by_index
  pub fn borrow_output_port_by_index(&mut self, index: u64) -> BtSelfComponentPortOutput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortOutput{ ptr:bt_self_component_filter_borrow_output_port_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_self_component_filter_borrow_input_port_by_name")]
  ///Calls bt_self_component_filter_borrow_input_port_by_name
  pub unsafe fn borrow_input_port_by_name(&mut self, name: &str) -> BtSelfComponentPortInput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortInput{ ptr:bt_self_component_filter_borrow_input_port_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_self_component_filter_borrow_output_port_by_name")]
  ///Calls bt_self_component_filter_borrow_output_port_by_name
  pub unsafe fn borrow_output_port_by_name(&mut self, name: &str) -> BtSelfComponentPortOutput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortOutput{ ptr:bt_self_component_filter_borrow_output_port_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_self_component_filter_as_component_filter_inline")]
  ///Calls bt_self_component_filter_as_component_filter_inline
  pub fn as_component_filter_inline(&mut self) -> BtComponentFilterConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentFilterConst{ ptr:bt_self_component_filter_as_component_filter_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_filter_as_self_component_inline")]
  ///Calls bt_self_component_filter_as_self_component_inline
  pub fn as_self_component_inline(&mut self) -> BtSelfComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponent{ ptr:bt_self_component_filter_as_self_component_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_filter_configuration, but the pointer is const
pub struct BtSelfComponentFilterConfigurationConst {
    ptr: *const bt_self_component_filter_configuration
}
impl BtSelfComponentFilterConfigurationConst {
    /// Generate a BtSelfComponentFilterConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentFilterConfigurationConst {
        BtSelfComponentFilterConfigurationConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentFilterConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_filter_configuration) -> BtSelfComponentFilterConfigurationConst {
        assert!(!ptr.is_null());
        BtSelfComponentFilterConfigurationConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_filter_configuration
pub struct BtSelfComponentFilterConfiguration {
    ptr: *mut bt_self_component_filter_configuration
}
impl BtSelfComponentFilterConfiguration {
    /// Generate a BtSelfComponentFilterConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentFilterConfiguration {
        BtSelfComponentFilterConfiguration { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentFilterConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_filter_configuration) -> BtSelfComponentFilterConfiguration {
        BtSelfComponentFilterConfiguration { ptr }
    }
    /// Create the equivalent BtSelfComponentFilterConfigurationConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentFilterConfigurationConst {
      BtSelfComponentFilterConfigurationConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentFilterConfigurationConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_port, but the pointer is const
pub struct BtSelfComponentPortConst {
    ptr: *const bt_self_component_port
}
impl BtSelfComponentPortConst {
    /// Generate a BtSelfComponentPortConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPortConst {
        BtSelfComponentPortConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_port) -> BtSelfComponentPortConst {
        assert!(!ptr.is_null());
        BtSelfComponentPortConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_port_get_data")]
  ///Calls bt_self_component_port_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_port_get_data(self.ptr) }
  }

}/// Wraps all methods related to bt_self_component_port
pub struct BtSelfComponentPort {
    ptr: *mut bt_self_component_port
}
impl BtSelfComponentPort {
    /// Generate a BtSelfComponentPortConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPort {
        BtSelfComponentPort { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_port) -> BtSelfComponentPort {
        BtSelfComponentPort { ptr }
    }
    /// Create the equivalent BtSelfComponentPortConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentPortConst {
      BtSelfComponentPortConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentPortConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_port_borrow_component")]
  ///Calls bt_self_component_port_borrow_component
  pub fn borrow_component(&mut self) -> BtSelfComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponent{ ptr:bt_self_component_port_borrow_component(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_port_get_data")]
  ///Calls bt_self_component_port_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_component_port_get_data(self.ptr) }
  }

  #[doc(alias = "bt_self_component_port_as_port_inline")]
  ///Calls bt_self_component_port_as_port_inline
  pub fn as_port_inline(&mut self) -> BtPortConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortConst{ ptr:bt_self_component_port_as_port_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_port_input, but the pointer is const
pub struct BtSelfComponentPortInputConst {
    ptr: *const bt_self_component_port_input
}
impl BtSelfComponentPortInputConst {
    /// Generate a BtSelfComponentPortInputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPortInputConst {
        BtSelfComponentPortInputConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortInputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_port_input) -> BtSelfComponentPortInputConst {
        assert!(!ptr.is_null());
        BtSelfComponentPortInputConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_port_input_as_port_input_inline")]
  ///Calls bt_self_component_port_input_as_port_input_inline
  pub fn as_port_input_inline(&self) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_self_component_port_input_as_port_input_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_port_input
pub struct BtSelfComponentPortInput {
    ptr: *mut bt_self_component_port_input
}
impl BtSelfComponentPortInput {
    /// Generate a BtSelfComponentPortInputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPortInput {
        BtSelfComponentPortInput { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortInputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_port_input) -> BtSelfComponentPortInput {
        BtSelfComponentPortInput { ptr }
    }
    /// Create the equivalent BtSelfComponentPortInputConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentPortInputConst {
      BtSelfComponentPortInputConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentPortInputConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_port_input_as_port_input_inline")]
  ///Calls bt_self_component_port_input_as_port_input_inline
  pub fn as_port_input_inline(&self) -> BtPortInputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortInputConst{ ptr:bt_self_component_port_input_as_port_input_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_port_input_as_self_component_port_inline")]
  ///Calls bt_self_component_port_input_as_self_component_port_inline
  pub fn as_self_component_port_inline(&mut self) -> BtSelfComponentPort {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPort{ ptr:bt_self_component_port_input_as_self_component_port_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_port_output, but the pointer is const
pub struct BtSelfComponentPortOutputConst {
    ptr: *const bt_self_component_port_output
}
impl BtSelfComponentPortOutputConst {
    /// Generate a BtSelfComponentPortOutputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPortOutputConst {
        BtSelfComponentPortOutputConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortOutputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_port_output) -> BtSelfComponentPortOutputConst {
        assert!(!ptr.is_null());
        BtSelfComponentPortOutputConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_port_output
pub struct BtSelfComponentPortOutput {
    ptr: *mut bt_self_component_port_output
}
impl BtSelfComponentPortOutput {
    /// Generate a BtSelfComponentPortOutputConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentPortOutput {
        BtSelfComponentPortOutput { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentPortOutputConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_port_output) -> BtSelfComponentPortOutput {
        BtSelfComponentPortOutput { ptr }
    }
    /// Create the equivalent BtSelfComponentPortOutputConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentPortOutputConst {
      BtSelfComponentPortOutputConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentPortOutputConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_port_output_as_port_output_inline")]
  ///Calls bt_self_component_port_output_as_port_output_inline
  pub fn as_port_output_inline(&mut self) -> BtPortOutputConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtPortOutputConst{ ptr:bt_self_component_port_output_as_port_output_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_port_output_as_self_component_port_inline")]
  ///Calls bt_self_component_port_output_as_self_component_port_inline
  pub fn as_self_component_port_inline(&mut self) -> BtSelfComponentPort {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPort{ ptr:bt_self_component_port_output_as_self_component_port_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_sink, but the pointer is const
pub struct BtSelfComponentSinkConst {
    ptr: *const bt_self_component_sink
}
impl BtSelfComponentSinkConst {
    /// Generate a BtSelfComponentSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSinkConst {
        BtSelfComponentSinkConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_sink) -> BtSelfComponentSinkConst {
        assert!(!ptr.is_null());
        BtSelfComponentSinkConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_sink_is_interrupted")]
  ///Calls bt_self_component_sink_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_self_component_sink_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_self_component_sink
pub struct BtSelfComponentSink {
    ptr: *mut bt_self_component_sink
}
impl BtSelfComponentSink {
    /// Generate a BtSelfComponentSinkConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSink {
        BtSelfComponentSink { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSinkConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_sink) -> BtSelfComponentSink {
        BtSelfComponentSink { ptr }
    }
    /// Create the equivalent BtSelfComponentSinkConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentSinkConst {
      BtSelfComponentSinkConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentSinkConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_sink_add_input_port")]
  ///Calls bt_self_component_sink_add_input_port
  pub unsafe fn add_input_port(&mut self, name: &str, user_data: *mut ::std::os::raw::c_void, self_component_port: *mut *mut bt_self_component_port_input) -> BtSelfComponentAddPortStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_self_component_sink_add_input_port(self.ptr, name.as_ptr(), user_data, self_component_port)).unwrap() }
  }

  #[doc(alias = "bt_self_component_sink_borrow_input_port_by_index")]
  ///Calls bt_self_component_sink_borrow_input_port_by_index
  pub fn borrow_input_port_by_index(&mut self, index: u64) -> BtSelfComponentPortInput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortInput{ ptr:bt_self_component_sink_borrow_input_port_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_self_component_sink_borrow_input_port_by_name")]
  ///Calls bt_self_component_sink_borrow_input_port_by_name
  pub unsafe fn borrow_input_port_by_name(&mut self, name: &str) -> BtSelfComponentPortInput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortInput{ ptr:bt_self_component_sink_borrow_input_port_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_self_component_sink_is_interrupted")]
  ///Calls bt_self_component_sink_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_self_component_sink_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_self_component_sink_as_component_sink_inline")]
  ///Calls bt_self_component_sink_as_component_sink_inline
  pub fn as_component_sink_inline(&mut self) -> BtComponentSinkConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentSinkConst{ ptr:bt_self_component_sink_as_component_sink_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_sink_as_self_component_inline")]
  ///Calls bt_self_component_sink_as_self_component_inline
  pub fn as_self_component_inline(&mut self) -> BtSelfComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponent{ ptr:bt_self_component_sink_as_self_component_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_sink_configuration, but the pointer is const
pub struct BtSelfComponentSinkConfigurationConst {
    ptr: *const bt_self_component_sink_configuration
}
impl BtSelfComponentSinkConfigurationConst {
    /// Generate a BtSelfComponentSinkConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSinkConfigurationConst {
        BtSelfComponentSinkConfigurationConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSinkConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_sink_configuration) -> BtSelfComponentSinkConfigurationConst {
        assert!(!ptr.is_null());
        BtSelfComponentSinkConfigurationConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_sink_configuration
pub struct BtSelfComponentSinkConfiguration {
    ptr: *mut bt_self_component_sink_configuration
}
impl BtSelfComponentSinkConfiguration {
    /// Generate a BtSelfComponentSinkConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSinkConfiguration {
        BtSelfComponentSinkConfiguration { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSinkConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_sink_configuration) -> BtSelfComponentSinkConfiguration {
        BtSelfComponentSinkConfiguration { ptr }
    }
    /// Create the equivalent BtSelfComponentSinkConfigurationConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentSinkConfigurationConst {
      BtSelfComponentSinkConfigurationConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentSinkConfigurationConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_source, but the pointer is const
pub struct BtSelfComponentSourceConst {
    ptr: *const bt_self_component_source
}
impl BtSelfComponentSourceConst {
    /// Generate a BtSelfComponentSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSourceConst {
        BtSelfComponentSourceConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_source) -> BtSelfComponentSourceConst {
        assert!(!ptr.is_null());
        BtSelfComponentSourceConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_source
pub struct BtSelfComponentSource {
    ptr: *mut bt_self_component_source
}
impl BtSelfComponentSource {
    /// Generate a BtSelfComponentSourceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSource {
        BtSelfComponentSource { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSourceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_source) -> BtSelfComponentSource {
        BtSelfComponentSource { ptr }
    }
    /// Create the equivalent BtSelfComponentSourceConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentSourceConst {
      BtSelfComponentSourceConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentSourceConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_component_source_add_output_port")]
  ///Calls bt_self_component_source_add_output_port
  pub unsafe fn add_output_port(&mut self, name: &str, user_data: *mut ::std::os::raw::c_void, self_component_port: *mut *mut bt_self_component_port_output) -> BtSelfComponentAddPortStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_self_component_source_add_output_port(self.ptr, name.as_ptr(), user_data, self_component_port)).unwrap() }
  }

  #[doc(alias = "bt_self_component_source_borrow_output_port_by_index")]
  ///Calls bt_self_component_source_borrow_output_port_by_index
  pub fn borrow_output_port_by_index(&mut self, index: u64) -> BtSelfComponentPortOutput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortOutput{ ptr:bt_self_component_source_borrow_output_port_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_self_component_source_borrow_output_port_by_name")]
  ///Calls bt_self_component_source_borrow_output_port_by_name
  pub unsafe fn borrow_output_port_by_name(&mut self, name: &str) -> BtSelfComponentPortOutput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortOutput{ ptr:bt_self_component_source_borrow_output_port_by_name(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_self_component_source_as_component_source_inline")]
  ///Calls bt_self_component_source_as_component_source_inline
  pub fn as_component_source_inline(&mut self) -> BtComponentSourceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtComponentSourceConst{ ptr:bt_self_component_source_as_component_source_inline(self.ptr)} }
  }

  #[doc(alias = "bt_self_component_source_as_self_component_inline")]
  ///Calls bt_self_component_source_as_self_component_inline
  pub fn as_self_component_inline(&mut self) -> BtSelfComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponent{ ptr:bt_self_component_source_as_self_component_inline(self.ptr)} }
  }

}/// Wraps all methods related to bt_self_component_source_configuration, but the pointer is const
pub struct BtSelfComponentSourceConfigurationConst {
    ptr: *const bt_self_component_source_configuration
}
impl BtSelfComponentSourceConfigurationConst {
    /// Generate a BtSelfComponentSourceConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSourceConfigurationConst {
        BtSelfComponentSourceConfigurationConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSourceConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_component_source_configuration) -> BtSelfComponentSourceConfigurationConst {
        assert!(!ptr.is_null());
        BtSelfComponentSourceConfigurationConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_component_source_configuration
pub struct BtSelfComponentSourceConfiguration {
    ptr: *mut bt_self_component_source_configuration
}
impl BtSelfComponentSourceConfiguration {
    /// Generate a BtSelfComponentSourceConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfComponentSourceConfiguration {
        BtSelfComponentSourceConfiguration { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfComponentSourceConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_component_source_configuration) -> BtSelfComponentSourceConfiguration {
        BtSelfComponentSourceConfiguration { ptr }
    }
    /// Create the equivalent BtSelfComponentSourceConfigurationConst version of this object.
    pub fn as_const(&mut self) -> BtSelfComponentSourceConfigurationConst {
      BtSelfComponentSourceConfigurationConst { ptr: self.ptr }
    }
    /// Generate a BtSelfComponentSourceConfigurationConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_message_iterator, but the pointer is const
pub struct BtSelfMessageIteratorConst {
    ptr: *const bt_self_message_iterator
}
impl BtSelfMessageIteratorConst {
    /// Generate a BtSelfMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfMessageIteratorConst {
        BtSelfMessageIteratorConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_message_iterator) -> BtSelfMessageIteratorConst {
        assert!(!ptr.is_null());
        BtSelfMessageIteratorConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_message_iterator_get_data")]
  ///Calls bt_self_message_iterator_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_message_iterator_get_data(self.ptr) }
  }

  #[doc(alias = "bt_self_message_iterator_is_interrupted")]
  ///Calls bt_self_message_iterator_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_self_message_iterator_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_self_message_iterator
pub struct BtSelfMessageIterator {
    ptr: *mut bt_self_message_iterator
}
impl BtSelfMessageIterator {
    /// Generate a BtSelfMessageIteratorConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfMessageIterator {
        BtSelfMessageIterator { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfMessageIteratorConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_message_iterator) -> BtSelfMessageIterator {
        BtSelfMessageIterator { ptr }
    }
    /// Create the equivalent BtSelfMessageIteratorConst version of this object.
    pub fn as_const(&mut self) -> BtSelfMessageIteratorConst {
      BtSelfMessageIteratorConst { ptr: self.ptr }
    }
    /// Generate a BtSelfMessageIteratorConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_message_iterator_borrow_component")]
  ///Calls bt_self_message_iterator_borrow_component
  pub fn borrow_component(&mut self) -> BtSelfComponent {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponent{ ptr:bt_self_message_iterator_borrow_component(self.ptr)} }
  }

  #[doc(alias = "bt_self_message_iterator_borrow_port")]
  ///Calls bt_self_message_iterator_borrow_port
  pub fn borrow_port(&mut self) -> BtSelfComponentPortOutput {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtSelfComponentPortOutput{ ptr:bt_self_message_iterator_borrow_port(self.ptr)} }
  }

  #[doc(alias = "bt_self_message_iterator_set_data")]
  ///Calls bt_self_message_iterator_set_data
  pub unsafe fn set_data(&mut self, user_data: *mut ::std::os::raw::c_void)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_message_iterator_set_data(self.ptr, user_data) }
  }

  #[doc(alias = "bt_self_message_iterator_get_data")]
  ///Calls bt_self_message_iterator_get_data
  pub fn get_data(&self) -> *mut ::std::os::raw::c_void {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_message_iterator_get_data(self.ptr) }
  }

  #[doc(alias = "bt_self_message_iterator_is_interrupted")]
  ///Calls bt_self_message_iterator_is_interrupted
  pub fn is_interrupted(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_self_message_iterator_is_interrupted(self.ptr) as u32) != BT_FALSE }
  }

}/// Wraps all methods related to bt_self_message_iterator_configuration, but the pointer is const
pub struct BtSelfMessageIteratorConfigurationConst {
    ptr: *const bt_self_message_iterator_configuration
}
impl BtSelfMessageIteratorConfigurationConst {
    /// Generate a BtSelfMessageIteratorConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfMessageIteratorConfigurationConst {
        BtSelfMessageIteratorConfigurationConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfMessageIteratorConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_message_iterator_configuration) -> BtSelfMessageIteratorConfigurationConst {
        assert!(!ptr.is_null());
        BtSelfMessageIteratorConfigurationConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_message_iterator_configuration
pub struct BtSelfMessageIteratorConfiguration {
    ptr: *mut bt_self_message_iterator_configuration
}
impl BtSelfMessageIteratorConfiguration {
    /// Generate a BtSelfMessageIteratorConfigurationConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfMessageIteratorConfiguration {
        BtSelfMessageIteratorConfiguration { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfMessageIteratorConfigurationConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_message_iterator_configuration) -> BtSelfMessageIteratorConfiguration {
        BtSelfMessageIteratorConfiguration { ptr }
    }
    /// Create the equivalent BtSelfMessageIteratorConfigurationConst version of this object.
    pub fn as_const(&mut self) -> BtSelfMessageIteratorConfigurationConst {
      BtSelfMessageIteratorConfigurationConst { ptr: self.ptr }
    }
    /// Generate a BtSelfMessageIteratorConfigurationConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_self_message_iterator_configuration_set_can_seek_forward")]
  ///Calls bt_self_message_iterator_configuration_set_can_seek_forward
  pub fn set_can_seek_forward(&mut self, can_seek_forward: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_self_message_iterator_configuration_set_can_seek_forward(self.ptr, if can_seek_forward { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

}/// Wraps all methods related to bt_self_plugin, but the pointer is const
pub struct BtSelfPluginConst {
    ptr: *const bt_self_plugin
}
impl BtSelfPluginConst {
    /// Generate a BtSelfPluginConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfPluginConst {
        BtSelfPluginConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfPluginConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_self_plugin) -> BtSelfPluginConst {
        assert!(!ptr.is_null());
        BtSelfPluginConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_self_plugin
pub struct BtSelfPlugin {
    ptr: *mut bt_self_plugin
}
impl BtSelfPlugin {
    /// Generate a BtSelfPluginConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtSelfPlugin {
        BtSelfPlugin { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtSelfPluginConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_self_plugin) -> BtSelfPlugin {
        BtSelfPlugin { ptr }
    }
    /// Create the equivalent BtSelfPluginConst version of this object.
    pub fn as_const(&mut self) -> BtSelfPluginConst {
      BtSelfPluginConst { ptr: self.ptr }
    }
    /// Generate a BtSelfPluginConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

}/// Wraps all methods related to bt_stream, but the pointer is const
pub struct BtStreamConst {
    ptr: *const bt_stream
}
impl BtStreamConst {
    /// Generate a BtStreamConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtStreamConst {
        BtStreamConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtStreamConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_stream) -> BtStreamConst {
        assert!(!ptr.is_null());
        BtStreamConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_stream_borrow_class_const")]
  ///Calls bt_stream_borrow_class_const
  pub fn borrow_class_const(&self) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_stream_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_borrow_trace_const")]
  ///Calls bt_stream_borrow_trace_const
  pub fn borrow_trace_const(&self) -> BtTraceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceConst{ ptr:bt_stream_borrow_trace_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_get_id")]
  ///Calls bt_stream_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_get_id(self.ptr) }
  }

  #[doc(alias = "bt_stream_get_name")]
  ///Calls bt_stream_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_stream_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_stream_borrow_user_attributes_const")]
  ///Calls bt_stream_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_stream_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_get_ref")]
  ///Calls bt_stream_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_stream_put_ref")]
  ///Calls bt_stream_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_stream
pub struct BtStream {
    ptr: *mut bt_stream
}
impl BtStream {
    /// Generate a BtStreamConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtStream {
        BtStream { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtStreamConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_stream) -> BtStream {
        BtStream { ptr }
    }
    /// Create the equivalent BtStreamConst version of this object.
    pub fn as_const(&mut self) -> BtStreamConst {
      BtStreamConst { ptr: self.ptr }
    }
    /// Generate a BtStreamConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_stream_create")]
  ///Calls bt_stream_create
  pub unsafe fn create(stream_class: &BtStreamClass, trace: &BtTrace) -> BtStream {
    unsafe { BtStream{ ptr:bt_stream_create(stream_class.ptr, trace.ptr)} }
  }

  #[doc(alias = "bt_stream_create_with_id")]
  ///Calls bt_stream_create_with_id
  pub unsafe fn create_with_id(stream_class: &BtStreamClass, trace: &BtTrace, id: u64) -> BtStream {
    unsafe { BtStream{ ptr:bt_stream_create_with_id(stream_class.ptr, trace.ptr, id)} }
  }

  #[doc(alias = "bt_stream_borrow_class")]
  ///Calls bt_stream_borrow_class
  pub fn borrow_class(&mut self) -> BtStreamClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClass{ ptr:bt_stream_borrow_class(self.ptr)} }
  }

  #[doc(alias = "bt_stream_borrow_class_const")]
  ///Calls bt_stream_borrow_class_const
  pub fn borrow_class_const(&self) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_stream_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_borrow_trace")]
  ///Calls bt_stream_borrow_trace
  pub fn borrow_trace(&mut self) -> BtTrace {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTrace{ ptr:bt_stream_borrow_trace(self.ptr)} }
  }

  #[doc(alias = "bt_stream_borrow_trace_const")]
  ///Calls bt_stream_borrow_trace_const
  pub fn borrow_trace_const(&self) -> BtTraceConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceConst{ ptr:bt_stream_borrow_trace_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_get_id")]
  ///Calls bt_stream_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_get_id(self.ptr) }
  }

  #[doc(alias = "bt_stream_set_name")]
  ///Calls bt_stream_set_name
  pub unsafe fn set_name(&mut self, name: &str) -> BtStreamSetNameStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_stream_set_name(self.ptr, name.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_stream_get_name")]
  ///Calls bt_stream_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_stream_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_stream_set_user_attributes")]
  ///Calls bt_stream_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_stream_borrow_user_attributes")]
  ///Calls bt_stream_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_stream_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_stream_borrow_user_attributes_const")]
  ///Calls bt_stream_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_stream_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_get_ref")]
  ///Calls bt_stream_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_stream_put_ref")]
  ///Calls bt_stream_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_stream_class, but the pointer is const
pub struct BtStreamClassConst {
    ptr: *const bt_stream_class
}
impl BtStreamClassConst {
    /// Generate a BtStreamClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtStreamClassConst {
        BtStreamClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtStreamClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_stream_class) -> BtStreamClassConst {
        assert!(!ptr.is_null());
        BtStreamClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_stream_class_borrow_trace_class_const")]
  ///Calls bt_stream_class_borrow_trace_class_const
  pub fn borrow_trace_class_const(&self) -> BtTraceClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClassConst{ ptr:bt_stream_class_borrow_trace_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_get_event_class_count")]
  ///Calls bt_stream_class_get_event_class_count
  pub fn get_event_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_event_class_count(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_index_const")]
  ///Calls bt_stream_class_borrow_event_class_by_index_const
  pub fn borrow_event_class_by_index_const(&self, index: u64) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_stream_class_borrow_event_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_id_const")]
  ///Calls bt_stream_class_borrow_event_class_by_id_const
  pub fn borrow_event_class_by_id_const(&self, id: u64) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_stream_class_borrow_event_class_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_stream_class_get_id")]
  ///Calls bt_stream_class_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_id(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_get_name")]
  ///Calls bt_stream_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_stream_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_stream_class_borrow_default_clock_class_const")]
  ///Calls bt_stream_class_borrow_default_clock_class_const
  pub fn borrow_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_stream_class_borrow_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_packet_context_field_class_const")]
  ///Calls bt_stream_class_borrow_packet_context_field_class_const
  pub fn borrow_packet_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_stream_class_borrow_packet_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_common_context_field_class_const")]
  ///Calls bt_stream_class_borrow_event_common_context_field_class_const
  pub fn borrow_event_common_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_stream_class_borrow_event_common_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_assigns_automatic_event_class_id")]
  ///Calls bt_stream_class_assigns_automatic_event_class_id
  pub fn assigns_automatic_event_class_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_assigns_automatic_event_class_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_assigns_automatic_stream_id")]
  ///Calls bt_stream_class_assigns_automatic_stream_id
  pub fn assigns_automatic_stream_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_assigns_automatic_stream_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_supports_packets")]
  ///Calls bt_stream_class_supports_packets
  pub fn supports_packets(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_packets(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_packets_have_beginning_default_clock_snapshot")]
  ///Calls bt_stream_class_packets_have_beginning_default_clock_snapshot
  pub fn packets_have_beginning_default_clock_snapshot(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_packets_have_beginning_default_clock_snapshot(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_packets_have_end_default_clock_snapshot")]
  ///Calls bt_stream_class_packets_have_end_default_clock_snapshot
  pub fn packets_have_end_default_clock_snapshot(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_packets_have_end_default_clock_snapshot(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_supports_discarded_events")]
  ///Calls bt_stream_class_supports_discarded_events
  pub fn supports_discarded_events(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_discarded_events(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_discarded_events_have_default_clock_snapshots")]
  ///Calls bt_stream_class_discarded_events_have_default_clock_snapshots
  pub fn discarded_events_have_default_clock_snapshots(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_discarded_events_have_default_clock_snapshots(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_supports_discarded_packets")]
  ///Calls bt_stream_class_supports_discarded_packets
  pub fn supports_discarded_packets(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_discarded_packets(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_discarded_packets_have_default_clock_snapshots")]
  ///Calls bt_stream_class_discarded_packets_have_default_clock_snapshots
  pub fn discarded_packets_have_default_clock_snapshots(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_discarded_packets_have_default_clock_snapshots(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_borrow_user_attributes_const")]
  ///Calls bt_stream_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_stream_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_get_ref")]
  ///Calls bt_stream_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_put_ref")]
  ///Calls bt_stream_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_stream_class
pub struct BtStreamClass {
    ptr: *mut bt_stream_class
}
impl BtStreamClass {
    /// Generate a BtStreamClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtStreamClass {
        BtStreamClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtStreamClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_stream_class) -> BtStreamClass {
        BtStreamClass { ptr }
    }
    /// Create the equivalent BtStreamClassConst version of this object.
    pub fn as_const(&mut self) -> BtStreamClassConst {
      BtStreamClassConst { ptr: self.ptr }
    }
    /// Generate a BtStreamClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_stream_class_create")]
  ///Calls bt_stream_class_create
  pub unsafe fn create(trace_class: &BtTraceClass) -> BtStreamClass {
    unsafe { BtStreamClass{ ptr:bt_stream_class_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_stream_class_create_with_id")]
  ///Calls bt_stream_class_create_with_id
  pub unsafe fn create_with_id(trace_class: &BtTraceClass, id: u64) -> BtStreamClass {
    unsafe { BtStreamClass{ ptr:bt_stream_class_create_with_id(trace_class.ptr, id)} }
  }

  #[doc(alias = "bt_stream_class_borrow_trace_class")]
  ///Calls bt_stream_class_borrow_trace_class
  pub fn borrow_trace_class(&mut self) -> BtTraceClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClass{ ptr:bt_stream_class_borrow_trace_class(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_trace_class_const")]
  ///Calls bt_stream_class_borrow_trace_class_const
  pub fn borrow_trace_class_const(&self) -> BtTraceClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClassConst{ ptr:bt_stream_class_borrow_trace_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_get_event_class_count")]
  ///Calls bt_stream_class_get_event_class_count
  pub fn get_event_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_event_class_count(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_index")]
  ///Calls bt_stream_class_borrow_event_class_by_index
  pub fn borrow_event_class_by_index(&mut self, index: u64) -> BtEventClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClass{ ptr:bt_stream_class_borrow_event_class_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_index_const")]
  ///Calls bt_stream_class_borrow_event_class_by_index_const
  pub fn borrow_event_class_by_index_const(&self, index: u64) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_stream_class_borrow_event_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_id")]
  ///Calls bt_stream_class_borrow_event_class_by_id
  pub fn borrow_event_class_by_id(&mut self, id: u64) -> BtEventClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClass{ ptr:bt_stream_class_borrow_event_class_by_id(self.ptr, id)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_class_by_id_const")]
  ///Calls bt_stream_class_borrow_event_class_by_id_const
  pub fn borrow_event_class_by_id_const(&self, id: u64) -> BtEventClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtEventClassConst{ ptr:bt_stream_class_borrow_event_class_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_stream_class_get_id")]
  ///Calls bt_stream_class_get_id
  pub fn get_id(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_id(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_set_name")]
  ///Calls bt_stream_class_set_name
  pub unsafe fn set_name(&mut self, name: &str) -> BtStreamClassSetNameStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_stream_class_set_name(self.ptr, name.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_stream_class_get_name")]
  ///Calls bt_stream_class_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_stream_class_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_stream_class_set_default_clock_class")]
  ///Calls bt_stream_class_set_default_clock_class
  pub unsafe fn set_default_clock_class(&mut self, clock_class: &BtClockClass) -> BtStreamClassSetDefaultClockClassStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_stream_class_set_default_clock_class(self.ptr, clock_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_stream_class_borrow_default_clock_class")]
  ///Calls bt_stream_class_borrow_default_clock_class
  pub fn borrow_default_clock_class(&mut self) -> BtClockClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClass{ ptr:bt_stream_class_borrow_default_clock_class(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_default_clock_class_const")]
  ///Calls bt_stream_class_borrow_default_clock_class_const
  pub fn borrow_default_clock_class_const(&self) -> BtClockClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtClockClassConst{ ptr:bt_stream_class_borrow_default_clock_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_set_packet_context_field_class")]
  ///Calls bt_stream_class_set_packet_context_field_class
  pub unsafe fn set_packet_context_field_class(&mut self, field_class: &BtFieldClass) -> BtStreamClassSetFieldClassStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_stream_class_set_packet_context_field_class(self.ptr, field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_stream_class_borrow_packet_context_field_class")]
  ///Calls bt_stream_class_borrow_packet_context_field_class
  pub fn borrow_packet_context_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_stream_class_borrow_packet_context_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_packet_context_field_class_const")]
  ///Calls bt_stream_class_borrow_packet_context_field_class_const
  pub fn borrow_packet_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_stream_class_borrow_packet_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_set_event_common_context_field_class")]
  ///Calls bt_stream_class_set_event_common_context_field_class
  pub unsafe fn set_event_common_context_field_class(&mut self, field_class: &BtFieldClass) -> BtStreamClassSetFieldClassStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_stream_class_set_event_common_context_field_class(self.ptr, field_class.ptr)).unwrap() }
  }

  #[doc(alias = "bt_stream_class_borrow_event_common_context_field_class")]
  ///Calls bt_stream_class_borrow_event_common_context_field_class
  pub fn borrow_event_common_context_field_class(&mut self) -> BtFieldClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClass{ ptr:bt_stream_class_borrow_event_common_context_field_class(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_event_common_context_field_class_const")]
  ///Calls bt_stream_class_borrow_event_common_context_field_class_const
  pub fn borrow_event_common_context_field_class_const(&self) -> BtFieldClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtFieldClassConst{ ptr:bt_stream_class_borrow_event_common_context_field_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_set_assigns_automatic_event_class_id")]
  ///Calls bt_stream_class_set_assigns_automatic_event_class_id
  pub fn set_assigns_automatic_event_class_id(&mut self, assigns_automatic_event_class_id: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_assigns_automatic_event_class_id(self.ptr, if assigns_automatic_event_class_id { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_stream_class_assigns_automatic_event_class_id")]
  ///Calls bt_stream_class_assigns_automatic_event_class_id
  pub fn assigns_automatic_event_class_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_assigns_automatic_event_class_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_set_assigns_automatic_stream_id")]
  ///Calls bt_stream_class_set_assigns_automatic_stream_id
  pub fn set_assigns_automatic_stream_id(&mut self, assigns_automatic_stream_id: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_assigns_automatic_stream_id(self.ptr, if assigns_automatic_stream_id { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_stream_class_assigns_automatic_stream_id")]
  ///Calls bt_stream_class_assigns_automatic_stream_id
  pub fn assigns_automatic_stream_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_assigns_automatic_stream_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_set_supports_packets")]
  ///Calls bt_stream_class_set_supports_packets
  pub fn set_supports_packets(&mut self, supports_packets: bool, with_beginning_default_clock_snapshot: bool, with_end_default_clock_snapshot: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_supports_packets(self.ptr, if supports_packets { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }, if with_beginning_default_clock_snapshot { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }, if with_end_default_clock_snapshot { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_stream_class_supports_packets")]
  ///Calls bt_stream_class_supports_packets
  pub fn supports_packets(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_packets(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_packets_have_beginning_default_clock_snapshot")]
  ///Calls bt_stream_class_packets_have_beginning_default_clock_snapshot
  pub fn packets_have_beginning_default_clock_snapshot(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_packets_have_beginning_default_clock_snapshot(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_packets_have_end_default_clock_snapshot")]
  ///Calls bt_stream_class_packets_have_end_default_clock_snapshot
  pub fn packets_have_end_default_clock_snapshot(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_packets_have_end_default_clock_snapshot(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_set_supports_discarded_events")]
  ///Calls bt_stream_class_set_supports_discarded_events
  pub fn set_supports_discarded_events(&mut self, supports_discarded_events: bool, with_default_clock_snapshots: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_supports_discarded_events(self.ptr, if supports_discarded_events { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }, if with_default_clock_snapshots { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_stream_class_supports_discarded_events")]
  ///Calls bt_stream_class_supports_discarded_events
  pub fn supports_discarded_events(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_discarded_events(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_discarded_events_have_default_clock_snapshots")]
  ///Calls bt_stream_class_discarded_events_have_default_clock_snapshots
  pub fn discarded_events_have_default_clock_snapshots(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_discarded_events_have_default_clock_snapshots(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_set_supports_discarded_packets")]
  ///Calls bt_stream_class_set_supports_discarded_packets
  pub fn set_supports_discarded_packets(&mut self, supports_discarded_packets: bool, with_default_clock_snapshots: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_supports_discarded_packets(self.ptr, if supports_discarded_packets { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }, if with_default_clock_snapshots { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_stream_class_supports_discarded_packets")]
  ///Calls bt_stream_class_supports_discarded_packets
  pub fn supports_discarded_packets(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_supports_discarded_packets(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_discarded_packets_have_default_clock_snapshots")]
  ///Calls bt_stream_class_discarded_packets_have_default_clock_snapshots
  pub fn discarded_packets_have_default_clock_snapshots(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_stream_class_discarded_packets_have_default_clock_snapshots(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_stream_class_set_user_attributes")]
  ///Calls bt_stream_class_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_stream_class_borrow_user_attributes")]
  ///Calls bt_stream_class_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_stream_class_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_borrow_user_attributes_const")]
  ///Calls bt_stream_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_stream_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_stream_class_get_ref")]
  ///Calls bt_stream_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_stream_class_put_ref")]
  ///Calls bt_stream_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_stream_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_trace, but the pointer is const
pub struct BtTraceConst {
    ptr: *const bt_trace
}
impl BtTraceConst {
    /// Generate a BtTraceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtTraceConst {
        BtTraceConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtTraceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_trace) -> BtTraceConst {
        assert!(!ptr.is_null());
        BtTraceConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_trace_borrow_class_const")]
  ///Calls bt_trace_borrow_class_const
  pub fn borrow_class_const(&self) -> BtTraceClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClassConst{ ptr:bt_trace_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_get_stream_count")]
  ///Calls bt_trace_get_stream_count
  pub fn get_stream_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_stream_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_index_const")]
  ///Calls bt_trace_borrow_stream_by_index_const
  pub fn borrow_stream_by_index_const(&self, index: u64) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_trace_borrow_stream_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_id_const")]
  ///Calls bt_trace_borrow_stream_by_id_const
  pub fn borrow_stream_by_id_const(&self, id: u64) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_trace_borrow_stream_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_get_name")]
  ///Calls bt_trace_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_trace_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_trace_get_uuid")]
  ///Calls bt_trace_get_uuid
  pub fn get_uuid(&self) -> bt_uuid {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_uuid(self.ptr) }
  }

  #[doc(alias = "bt_trace_get_environment_entry_count")]
  ///Calls bt_trace_get_environment_entry_count
  pub fn get_environment_entry_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_environment_entry_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_borrow_environment_entry_by_index_const")]
  ///Calls bt_trace_borrow_environment_entry_by_index_const
  pub unsafe fn borrow_environment_entry_by_index_const(&self, index: u64, name: *mut *const ::std::os::raw::c_char, value: *mut *const bt_value)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_borrow_environment_entry_by_index_const(self.ptr, index, name, value) }
  }

  #[doc(alias = "bt_trace_borrow_environment_entry_value_by_name_const")]
  ///Calls bt_trace_borrow_environment_entry_value_by_name_const
  pub unsafe fn borrow_environment_entry_value_by_name_const(&self, name: &str) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_borrow_environment_entry_value_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_trace_borrow_user_attributes_const")]
  ///Calls bt_trace_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_add_destruction_listener")]
  ///Calls bt_trace_add_destruction_listener
  pub unsafe fn add_destruction_listener(&self, user_func: bt_trace_destruction_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtTraceAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_add_destruction_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_remove_destruction_listener")]
  ///Calls bt_trace_remove_destruction_listener
  pub fn remove_destruction_listener(&self, listener_id: bt_listener_id) -> BtTraceRemoveListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_remove_destruction_listener(self.ptr, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_get_ref")]
  ///Calls bt_trace_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_trace_put_ref")]
  ///Calls bt_trace_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_trace
pub struct BtTrace {
    ptr: *mut bt_trace
}
impl BtTrace {
    /// Generate a BtTraceConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtTrace {
        BtTrace { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtTraceConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_trace) -> BtTrace {
        BtTrace { ptr }
    }
    /// Create the equivalent BtTraceConst version of this object.
    pub fn as_const(&mut self) -> BtTraceConst {
      BtTraceConst { ptr: self.ptr }
    }
    /// Generate a BtTraceConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_trace_create")]
  ///Calls bt_trace_create
  pub unsafe fn create(trace_class: &BtTraceClass) -> BtTrace {
    unsafe { BtTrace{ ptr:bt_trace_create(trace_class.ptr)} }
  }

  #[doc(alias = "bt_trace_borrow_class")]
  ///Calls bt_trace_borrow_class
  pub fn borrow_class(&mut self) -> BtTraceClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClass{ ptr:bt_trace_borrow_class(self.ptr)} }
  }

  #[doc(alias = "bt_trace_borrow_class_const")]
  ///Calls bt_trace_borrow_class_const
  pub fn borrow_class_const(&self) -> BtTraceClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtTraceClassConst{ ptr:bt_trace_borrow_class_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_get_stream_count")]
  ///Calls bt_trace_get_stream_count
  pub fn get_stream_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_stream_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_index")]
  ///Calls bt_trace_borrow_stream_by_index
  pub fn borrow_stream_by_index(&mut self, index: u64) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_trace_borrow_stream_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_index_const")]
  ///Calls bt_trace_borrow_stream_by_index_const
  pub fn borrow_stream_by_index_const(&self, index: u64) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_trace_borrow_stream_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_id")]
  ///Calls bt_trace_borrow_stream_by_id
  pub fn borrow_stream_by_id(&mut self, id: u64) -> BtStream {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStream{ ptr:bt_trace_borrow_stream_by_id(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_borrow_stream_by_id_const")]
  ///Calls bt_trace_borrow_stream_by_id_const
  pub fn borrow_stream_by_id_const(&self, id: u64) -> BtStreamConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamConst{ ptr:bt_trace_borrow_stream_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_set_name")]
  ///Calls bt_trace_set_name
  pub unsafe fn set_name(&mut self, name: &str) -> BtTraceSetNameStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_set_name(self.ptr, name.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_trace_get_name")]
  ///Calls bt_trace_get_name
  pub fn get_name(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_trace_get_name(self.ptr)) }
  }

  #[doc(alias = "bt_trace_set_uuid")]
  ///Calls bt_trace_set_uuid
  pub unsafe fn set_uuid(&mut self, uuid: bt_uuid)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_set_uuid(self.ptr, uuid) }
  }

  #[doc(alias = "bt_trace_get_uuid")]
  ///Calls bt_trace_get_uuid
  pub fn get_uuid(&self) -> bt_uuid {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_uuid(self.ptr) }
  }

  #[doc(alias = "bt_trace_set_environment_entry_integer")]
  ///Calls bt_trace_set_environment_entry_integer
  pub unsafe fn set_environment_entry_integer(&mut self, name: &str, value: i64) -> BtTraceSetEnvironmentEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_set_environment_entry_integer(self.ptr, name.as_ptr(), value)).unwrap() }
  }

  #[doc(alias = "bt_trace_set_environment_entry_string")]
  ///Calls bt_trace_set_environment_entry_string
  pub unsafe fn set_environment_entry_string(&mut self, name: &str, value: &str) -> BtTraceSetEnvironmentEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_set_environment_entry_string(self.ptr, name.as_ptr(), value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_trace_get_environment_entry_count")]
  ///Calls bt_trace_get_environment_entry_count
  pub fn get_environment_entry_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_environment_entry_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_borrow_environment_entry_by_index_const")]
  ///Calls bt_trace_borrow_environment_entry_by_index_const
  pub unsafe fn borrow_environment_entry_by_index_const(&self, index: u64, name: *mut *const ::std::os::raw::c_char, value: *mut *const bt_value)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_borrow_environment_entry_by_index_const(self.ptr, index, name, value) }
  }

  #[doc(alias = "bt_trace_borrow_environment_entry_value_by_name_const")]
  ///Calls bt_trace_borrow_environment_entry_value_by_name_const
  pub unsafe fn borrow_environment_entry_value_by_name_const(&self, name: &str) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_borrow_environment_entry_value_by_name_const(self.ptr, name.as_ptr())} }
  }

  #[doc(alias = "bt_trace_set_user_attributes")]
  ///Calls bt_trace_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_trace_borrow_user_attributes")]
  ///Calls bt_trace_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_trace_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_trace_borrow_user_attributes_const")]
  ///Calls bt_trace_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_add_destruction_listener")]
  ///Calls bt_trace_add_destruction_listener
  pub unsafe fn add_destruction_listener(&self, user_func: bt_trace_destruction_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtTraceAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_add_destruction_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_remove_destruction_listener")]
  ///Calls bt_trace_remove_destruction_listener
  pub fn remove_destruction_listener(&self, listener_id: bt_listener_id) -> BtTraceRemoveListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_remove_destruction_listener(self.ptr, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_get_ref")]
  ///Calls bt_trace_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_trace_put_ref")]
  ///Calls bt_trace_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_trace_class, but the pointer is const
pub struct BtTraceClassConst {
    ptr: *const bt_trace_class
}
impl BtTraceClassConst {
    /// Generate a BtTraceClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtTraceClassConst {
        BtTraceClassConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtTraceClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_trace_class) -> BtTraceClassConst {
        assert!(!ptr.is_null());
        BtTraceClassConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_trace_class_get_stream_class_count")]
  ///Calls bt_trace_class_get_stream_class_count
  pub fn get_stream_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_get_stream_class_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_index_const")]
  ///Calls bt_trace_class_borrow_stream_class_by_index_const
  pub fn borrow_stream_class_by_index_const(&self, index: u64) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_trace_class_borrow_stream_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_id_const")]
  ///Calls bt_trace_class_borrow_stream_class_by_id_const
  pub fn borrow_stream_class_by_id_const(&self, id: u64) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_trace_class_borrow_stream_class_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_class_assigns_automatic_stream_class_id")]
  ///Calls bt_trace_class_assigns_automatic_stream_class_id
  pub fn assigns_automatic_stream_class_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_trace_class_assigns_automatic_stream_class_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_trace_class_borrow_user_attributes_const")]
  ///Calls bt_trace_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_class_add_destruction_listener")]
  ///Calls bt_trace_class_add_destruction_listener
  pub unsafe fn add_destruction_listener(&self, user_func: bt_trace_class_destruction_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtTraceClassAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_class_add_destruction_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_class_remove_destruction_listener")]
  ///Calls bt_trace_class_remove_destruction_listener
  pub fn remove_destruction_listener(&self, listener_id: bt_listener_id) -> BtTraceClassRemoveListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_class_remove_destruction_listener(self.ptr, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_class_get_ref")]
  ///Calls bt_trace_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_trace_class_put_ref")]
  ///Calls bt_trace_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_trace_class
pub struct BtTraceClass {
    ptr: *mut bt_trace_class
}
impl BtTraceClass {
    /// Generate a BtTraceClassConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtTraceClass {
        BtTraceClass { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtTraceClassConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_trace_class) -> BtTraceClass {
        BtTraceClass { ptr }
    }
    /// Create the equivalent BtTraceClassConst version of this object.
    pub fn as_const(&mut self) -> BtTraceClassConst {
      BtTraceClassConst { ptr: self.ptr }
    }
    /// Generate a BtTraceClassConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_trace_class_create")]
  ///Calls bt_trace_class_create
  pub unsafe fn create(self_component: &BtSelfComponent) -> BtTraceClass {
    unsafe { BtTraceClass{ ptr:bt_trace_class_create(self_component.ptr)} }
  }

  #[doc(alias = "bt_trace_class_get_stream_class_count")]
  ///Calls bt_trace_class_get_stream_class_count
  pub fn get_stream_class_count(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_get_stream_class_count(self.ptr) }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_index")]
  ///Calls bt_trace_class_borrow_stream_class_by_index
  pub fn borrow_stream_class_by_index(&mut self, index: u64) -> BtStreamClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClass{ ptr:bt_trace_class_borrow_stream_class_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_index_const")]
  ///Calls bt_trace_class_borrow_stream_class_by_index_const
  pub fn borrow_stream_class_by_index_const(&self, index: u64) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_trace_class_borrow_stream_class_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_id")]
  ///Calls bt_trace_class_borrow_stream_class_by_id
  pub fn borrow_stream_class_by_id(&mut self, id: u64) -> BtStreamClass {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClass{ ptr:bt_trace_class_borrow_stream_class_by_id(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_class_borrow_stream_class_by_id_const")]
  ///Calls bt_trace_class_borrow_stream_class_by_id_const
  pub fn borrow_stream_class_by_id_const(&self, id: u64) -> BtStreamClassConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtStreamClassConst{ ptr:bt_trace_class_borrow_stream_class_by_id_const(self.ptr, id)} }
  }

  #[doc(alias = "bt_trace_class_set_assigns_automatic_stream_class_id")]
  ///Calls bt_trace_class_set_assigns_automatic_stream_class_id
  pub fn set_assigns_automatic_stream_class_id(&mut self, assigns_automatic_stream_class_id: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_set_assigns_automatic_stream_class_id(self.ptr, if assigns_automatic_stream_class_id { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_trace_class_assigns_automatic_stream_class_id")]
  ///Calls bt_trace_class_assigns_automatic_stream_class_id
  pub fn assigns_automatic_stream_class_id(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_trace_class_assigns_automatic_stream_class_id(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_trace_class_set_user_attributes")]
  ///Calls bt_trace_class_set_user_attributes
  pub unsafe fn set_user_attributes(&mut self, user_attributes: &BtValueConst)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_set_user_attributes(self.ptr, user_attributes.ptr) }
  }

  #[doc(alias = "bt_trace_class_borrow_user_attributes")]
  ///Calls bt_trace_class_borrow_user_attributes
  pub fn borrow_user_attributes(&mut self) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_trace_class_borrow_user_attributes(self.ptr)} }
  }

  #[doc(alias = "bt_trace_class_borrow_user_attributes_const")]
  ///Calls bt_trace_class_borrow_user_attributes_const
  pub fn borrow_user_attributes_const(&self) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_trace_class_borrow_user_attributes_const(self.ptr)} }
  }

  #[doc(alias = "bt_trace_class_add_destruction_listener")]
  ///Calls bt_trace_class_add_destruction_listener
  pub unsafe fn add_destruction_listener(&self, user_func: bt_trace_class_destruction_listener_func, user_data: *mut ::std::os::raw::c_void, listener_id: *mut bt_listener_id) -> BtTraceClassAddListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_class_add_destruction_listener(self.ptr, user_func, user_data, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_class_remove_destruction_listener")]
  ///Calls bt_trace_class_remove_destruction_listener
  pub fn remove_destruction_listener(&self, listener_id: bt_listener_id) -> BtTraceClassRemoveListenerStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_trace_class_remove_destruction_listener(self.ptr, listener_id)).unwrap() }
  }

  #[doc(alias = "bt_trace_class_get_ref")]
  ///Calls bt_trace_class_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_trace_class_put_ref")]
  ///Calls bt_trace_class_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_trace_class_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_value, but the pointer is const
pub struct BtValueConst {
    ptr: *const bt_value
}
impl BtValueConst {
    /// Generate a BtValueConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtValueConst {
        BtValueConst { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtValueConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*const bt_value) -> BtValueConst {
        assert!(!ptr.is_null());
        BtValueConst { ptr }
    }
    /// Check if the stored pointer is a null pointer or not.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_value_get_type")]
  ///Calls bt_value_get_type
  pub fn get_type(&self) -> BtValueType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_value_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_bool_get")]
  ///Calls bt_value_bool_get
  pub fn bool_get(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_bool_get(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_integer_unsigned_get")]
  ///Calls bt_value_integer_unsigned_get
  pub fn integer_unsigned_get(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_unsigned_get(self.ptr) }
  }

  #[doc(alias = "bt_value_integer_signed_get")]
  ///Calls bt_value_integer_signed_get
  pub fn integer_signed_get(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_signed_get(self.ptr) }
  }

  #[doc(alias = "bt_value_real_get")]
  ///Calls bt_value_real_get
  pub fn real_get(&self) -> f64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_real_get(self.ptr) }
  }

  #[doc(alias = "bt_value_string_get")]
  ///Calls bt_value_string_get
  pub fn string_get(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_value_string_get(self.ptr)) }
  }

  #[doc(alias = "bt_value_array_borrow_element_by_index_const")]
  ///Calls bt_value_array_borrow_element_by_index_const
  pub fn array_borrow_element_by_index_const(&self, index: u64) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_value_array_borrow_element_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_value_array_get_length")]
  ///Calls bt_value_array_get_length
  pub fn array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_value_map_borrow_entry_value_const")]
  ///Calls bt_value_map_borrow_entry_value_const
  pub unsafe fn map_borrow_entry_value_const(&self, key: &str) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_value_map_borrow_entry_value_const(self.ptr, key.as_ptr())} }
  }

  #[doc(alias = "bt_value_map_foreach_entry_const")]
  ///Calls bt_value_map_foreach_entry_const
  pub unsafe fn map_foreach_entry_const(&self, user_func: bt_value_map_foreach_entry_const_func, user_data: *mut ::std::os::raw::c_void) -> BtValueMapForeachEntryConstStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_foreach_entry_const(self.ptr, user_func, user_data)).unwrap() }
  }

  #[doc(alias = "bt_value_map_get_size")]
  ///Calls bt_value_map_get_size
  pub fn map_get_size(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_map_get_size(self.ptr) }
  }

  #[doc(alias = "bt_value_map_has_entry")]
  ///Calls bt_value_map_has_entry
  pub unsafe fn map_has_entry(&self, key: &str) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_map_has_entry(self.ptr, key.as_ptr()) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_copy")]
  ///Calls bt_value_copy
  pub unsafe fn copy(&self, copy_value: *mut *mut bt_value) -> BtValueCopyStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_copy(self.ptr, copy_value)).unwrap() }
  }

  #[doc(alias = "bt_value_is_equal")]
  ///Calls bt_value_is_equal
  pub unsafe fn is_equal(&self, b_value: &BtValueConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_is_equal(self.ptr, b_value.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_get_ref")]
  ///Calls bt_value_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_value_put_ref")]
  ///Calls bt_value_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_put_ref(self.ptr) }
  }

}/// Wraps all methods related to bt_value
pub struct BtValue {
    ptr: *mut bt_value
}
impl BtValue {
    /// Generate a BtValueConst pointing to null. This can be useful to allocate in arrays or vectors,
    /// but calling a function on it is checked with a debug_assert. In release this would case 
    /// a segmentation fault!
    pub fn empty() -> BtValue {
        BtValue { ptr: std::ptr::null_mut() }
    }
    /// Generate a BtValueConst pointing to ptr. This is assumed to be a proper pointer obtained 
    /// from a lower-level API. Null pointer are not allowed and checked with an assert.
    pub fn from_ptr(ptr:*mut bt_value) -> BtValue {
        BtValue { ptr }
    }
    /// Create the equivalent BtValueConst version of this object.
    pub fn as_const(&mut self) -> BtValueConst {
      BtValueConst { ptr: self.ptr }
    }
    /// Generate a BtValueConst pointing to null.
    pub fn is_empty(&mut self) -> bool {
        self.ptr.is_null()
    }

  #[doc(alias = "bt_value_get_type")]
  ///Calls bt_value_get_type
  pub fn get_type(&self) -> BtValueType {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_u32(bt_value_get_type(self.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_bool_create")]
  ///Calls bt_value_bool_create
  pub fn bool_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_bool_create()} }
  }

  #[doc(alias = "bt_value_bool_create_init")]
  ///Calls bt_value_bool_create_init
  pub fn bool_create_init(raw_value: bool) -> BtValue {
    unsafe { BtValue{ ptr:bt_value_bool_create_init(if raw_value { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool })} }
  }

  #[doc(alias = "bt_value_bool_set")]
  ///Calls bt_value_bool_set
  pub fn bool_set(&mut self, raw_value: bool)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_bool_set(self.ptr, if raw_value { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool }) }
  }

  #[doc(alias = "bt_value_bool_get")]
  ///Calls bt_value_bool_get
  pub fn bool_get(&self) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_bool_get(self.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_integer_unsigned_create")]
  ///Calls bt_value_integer_unsigned_create
  pub fn integer_unsigned_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_integer_unsigned_create()} }
  }

  #[doc(alias = "bt_value_integer_unsigned_create_init")]
  ///Calls bt_value_integer_unsigned_create_init
  pub fn integer_unsigned_create_init(raw_value: u64) -> BtValue {
    unsafe { BtValue{ ptr:bt_value_integer_unsigned_create_init(raw_value)} }
  }

  #[doc(alias = "bt_value_integer_unsigned_set")]
  ///Calls bt_value_integer_unsigned_set
  pub fn integer_unsigned_set(&mut self, raw_value: u64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_unsigned_set(self.ptr, raw_value) }
  }

  #[doc(alias = "bt_value_integer_unsigned_get")]
  ///Calls bt_value_integer_unsigned_get
  pub fn integer_unsigned_get(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_unsigned_get(self.ptr) }
  }

  #[doc(alias = "bt_value_integer_signed_create")]
  ///Calls bt_value_integer_signed_create
  pub fn integer_signed_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_integer_signed_create()} }
  }

  #[doc(alias = "bt_value_integer_signed_create_init")]
  ///Calls bt_value_integer_signed_create_init
  pub fn integer_signed_create_init(raw_value: i64) -> BtValue {
    unsafe { BtValue{ ptr:bt_value_integer_signed_create_init(raw_value)} }
  }

  #[doc(alias = "bt_value_integer_signed_set")]
  ///Calls bt_value_integer_signed_set
  pub fn integer_signed_set(&mut self, raw_value: i64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_signed_set(self.ptr, raw_value) }
  }

  #[doc(alias = "bt_value_integer_signed_get")]
  ///Calls bt_value_integer_signed_get
  pub fn integer_signed_get(&self) -> i64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_integer_signed_get(self.ptr) }
  }

  #[doc(alias = "bt_value_real_create")]
  ///Calls bt_value_real_create
  pub fn real_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_real_create()} }
  }

  #[doc(alias = "bt_value_real_create_init")]
  ///Calls bt_value_real_create_init
  pub fn real_create_init(raw_value: f64) -> BtValue {
    unsafe { BtValue{ ptr:bt_value_real_create_init(raw_value)} }
  }

  #[doc(alias = "bt_value_real_set")]
  ///Calls bt_value_real_set
  pub fn real_set(&mut self, raw_value: f64)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_real_set(self.ptr, raw_value) }
  }

  #[doc(alias = "bt_value_real_get")]
  ///Calls bt_value_real_get
  pub fn real_get(&self) -> f64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_real_get(self.ptr) }
  }

  #[doc(alias = "bt_value_string_create")]
  ///Calls bt_value_string_create
  pub fn string_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_string_create()} }
  }

  #[doc(alias = "bt_value_string_create_init")]
  ///Calls bt_value_string_create_init
  pub unsafe fn string_create_init(raw_value: &str) -> BtValue {
    unsafe { BtValue{ ptr:bt_value_string_create_init(raw_value.as_ptr())} }
  }

  #[doc(alias = "bt_value_string_set")]
  ///Calls bt_value_string_set
  pub unsafe fn string_set(&mut self, raw_value: &str) -> BtValueStringSetStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_string_set(self.ptr, raw_value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_value_string_get")]
  ///Calls bt_value_string_get
  pub fn string_get(&self) -> &CStr {
    debug_assert!(!self.ptr.is_null());
    unsafe { CStr::from_ptr(bt_value_string_get(self.ptr)) }
  }

  #[doc(alias = "bt_value_array_create")]
  ///Calls bt_value_array_create
  pub fn array_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_array_create()} }
  }

  #[doc(alias = "bt_value_array_append_element")]
  ///Calls bt_value_array_append_element
  pub unsafe fn array_append_element(&mut self, element_value: &BtValue) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_element(self.ptr, element_value.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_bool_element")]
  ///Calls bt_value_array_append_bool_element
  pub fn array_append_bool_element(&mut self, raw_value: bool) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_bool_element(self.ptr, if raw_value { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool })).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_unsigned_integer_element")]
  ///Calls bt_value_array_append_unsigned_integer_element
  pub fn array_append_unsigned_integer_element(&mut self, raw_value: u64) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_unsigned_integer_element(self.ptr, raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_signed_integer_element")]
  ///Calls bt_value_array_append_signed_integer_element
  pub fn array_append_signed_integer_element(&mut self, raw_value: i64) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_signed_integer_element(self.ptr, raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_real_element")]
  ///Calls bt_value_array_append_real_element
  pub fn array_append_real_element(&mut self, raw_value: f64) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_real_element(self.ptr, raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_string_element")]
  ///Calls bt_value_array_append_string_element
  pub unsafe fn array_append_string_element(&mut self, raw_value: &str) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_string_element(self.ptr, raw_value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_empty_array_element")]
  ///Calls bt_value_array_append_empty_array_element
  pub unsafe fn array_append_empty_array_element(&mut self, element_value: *mut *mut bt_value) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_empty_array_element(self.ptr, element_value)).unwrap() }
  }

  #[doc(alias = "bt_value_array_append_empty_map_element")]
  ///Calls bt_value_array_append_empty_map_element
  pub unsafe fn array_append_empty_map_element(&mut self, element_value: *mut *mut bt_value) -> BtValueArrayAppendElementStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_append_empty_map_element(self.ptr, element_value)).unwrap() }
  }

  #[doc(alias = "bt_value_array_set_element_by_index")]
  ///Calls bt_value_array_set_element_by_index
  pub unsafe fn array_set_element_by_index(&mut self, index: u64, element_value: &BtValue) -> BtValueArraySetElementByIndexStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_array_set_element_by_index(self.ptr, index, element_value.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_array_borrow_element_by_index")]
  ///Calls bt_value_array_borrow_element_by_index
  pub fn array_borrow_element_by_index(&mut self, index: u64) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_value_array_borrow_element_by_index(self.ptr, index)} }
  }

  #[doc(alias = "bt_value_array_borrow_element_by_index_const")]
  ///Calls bt_value_array_borrow_element_by_index_const
  pub fn array_borrow_element_by_index_const(&self, index: u64) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_value_array_borrow_element_by_index_const(self.ptr, index)} }
  }

  #[doc(alias = "bt_value_array_get_length")]
  ///Calls bt_value_array_get_length
  pub fn array_get_length(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_array_get_length(self.ptr) }
  }

  #[doc(alias = "bt_value_map_create")]
  ///Calls bt_value_map_create
  pub fn map_create() -> BtValue {
    unsafe { BtValue{ ptr:bt_value_map_create()} }
  }

  #[doc(alias = "bt_value_map_insert_entry")]
  ///Calls bt_value_map_insert_entry
  pub unsafe fn map_insert_entry(&mut self, key: &str, entry_value: &BtValue) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_entry(self.ptr, key.as_ptr(), entry_value.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_bool_entry")]
  ///Calls bt_value_map_insert_bool_entry
  pub unsafe fn map_insert_bool_entry(&mut self, key: &str, raw_value: bool) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_bool_entry(self.ptr, key.as_ptr(), if raw_value { BT_TRUE as bt_bool } else { BT_FALSE as bt_bool })).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_unsigned_integer_entry")]
  ///Calls bt_value_map_insert_unsigned_integer_entry
  pub unsafe fn map_insert_unsigned_integer_entry(&mut self, key: &str, raw_value: u64) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_unsigned_integer_entry(self.ptr, key.as_ptr(), raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_signed_integer_entry")]
  ///Calls bt_value_map_insert_signed_integer_entry
  pub unsafe fn map_insert_signed_integer_entry(&mut self, key: &str, raw_value: i64) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_signed_integer_entry(self.ptr, key.as_ptr(), raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_real_entry")]
  ///Calls bt_value_map_insert_real_entry
  pub unsafe fn map_insert_real_entry(&mut self, key: &str, raw_value: f64) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_real_entry(self.ptr, key.as_ptr(), raw_value)).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_string_entry")]
  ///Calls bt_value_map_insert_string_entry
  pub unsafe fn map_insert_string_entry(&mut self, key: &str, raw_value: &str) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_string_entry(self.ptr, key.as_ptr(), raw_value.as_ptr())).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_empty_array_entry")]
  ///Calls bt_value_map_insert_empty_array_entry
  pub unsafe fn map_insert_empty_array_entry(&mut self, key: &str, entry_value: *mut *mut bt_value) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_empty_array_entry(self.ptr, key.as_ptr(), entry_value)).unwrap() }
  }

  #[doc(alias = "bt_value_map_insert_empty_map_entry")]
  ///Calls bt_value_map_insert_empty_map_entry
  pub unsafe fn map_insert_empty_map_entry(&mut self, key: &str, entry_value: *mut *mut bt_value) -> BtValueMapInsertEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_insert_empty_map_entry(self.ptr, key.as_ptr(), entry_value)).unwrap() }
  }

  #[doc(alias = "bt_value_map_borrow_entry_value")]
  ///Calls bt_value_map_borrow_entry_value
  pub unsafe fn map_borrow_entry_value(&mut self, key: &str) -> BtValue {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValue{ ptr:bt_value_map_borrow_entry_value(self.ptr, key.as_ptr())} }
  }

  #[doc(alias = "bt_value_map_borrow_entry_value_const")]
  ///Calls bt_value_map_borrow_entry_value_const
  pub unsafe fn map_borrow_entry_value_const(&self, key: &str) -> BtValueConst {
    debug_assert!(!self.ptr.is_null());
    unsafe { BtValueConst{ ptr:bt_value_map_borrow_entry_value_const(self.ptr, key.as_ptr())} }
  }

  #[doc(alias = "bt_value_map_foreach_entry")]
  ///Calls bt_value_map_foreach_entry
  pub unsafe fn map_foreach_entry(&mut self, user_func: bt_value_map_foreach_entry_func, user_data: *mut ::std::os::raw::c_void) -> BtValueMapForeachEntryStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_foreach_entry(self.ptr, user_func, user_data)).unwrap() }
  }

  #[doc(alias = "bt_value_map_foreach_entry_const")]
  ///Calls bt_value_map_foreach_entry_const
  pub unsafe fn map_foreach_entry_const(&self, user_func: bt_value_map_foreach_entry_const_func, user_data: *mut ::std::os::raw::c_void) -> BtValueMapForeachEntryConstStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_foreach_entry_const(self.ptr, user_func, user_data)).unwrap() }
  }

  #[doc(alias = "bt_value_map_get_size")]
  ///Calls bt_value_map_get_size
  pub fn map_get_size(&self) -> u64 {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_map_get_size(self.ptr) }
  }

  #[doc(alias = "bt_value_map_has_entry")]
  ///Calls bt_value_map_has_entry
  pub unsafe fn map_has_entry(&self, key: &str) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_map_has_entry(self.ptr, key.as_ptr()) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_map_extend")]
  ///Calls bt_value_map_extend
  pub unsafe fn map_extend(&mut self, extension_value: &BtValueConst) -> BtValueMapExtendStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_map_extend(self.ptr, extension_value.ptr)).unwrap() }
  }

  #[doc(alias = "bt_value_copy")]
  ///Calls bt_value_copy
  pub unsafe fn copy(&self, copy_value: *mut *mut bt_value) -> BtValueCopyStatus {
    debug_assert!(!self.ptr.is_null());
    unsafe { num::FromPrimitive::from_i32(bt_value_copy(self.ptr, copy_value)).unwrap() }
  }

  #[doc(alias = "bt_value_is_equal")]
  ///Calls bt_value_is_equal
  pub unsafe fn is_equal(&self, b_value: &BtValueConst) -> bool {
    debug_assert!(!self.ptr.is_null());
    unsafe { (bt_value_is_equal(self.ptr, b_value.ptr) as u32) != BT_FALSE }
  }

  #[doc(alias = "bt_value_get_ref")]
  ///Calls bt_value_get_ref
  pub fn get_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_get_ref(self.ptr) }
  }

  #[doc(alias = "bt_value_put_ref")]
  ///Calls bt_value_put_ref
  pub fn put_ref(&self)  {
    debug_assert!(!self.ptr.is_null());
    unsafe { bt_value_put_ref(self.ptr) }
  }

}